=head1 Implicit Ideas

Z<implicit_ideas>

Context is only one linguistic shortcut in Perl. Programmers who understand
these shortcuts can glance at code and instantly understand its most important
characteristics. Another important linguistic feature is the Perl equivalent of
pronouns.

=head2 The Default Scalar Variable

Z<default_scalar_variable>

X<default variables; scalar>
X<default variables; C<$_>>
X<< variables; C<$_> >>
X<< C<$_>; default scalar variable >>

The I<default scalar variable> (also called the I<topic variable>), C<$_>, is
most notable in its I<absence>: many of Perl's builtin operations work on the
contents of C<$_> in the absence of an explicit variable. You can still use
C<$_> as the variable, but it's often unnecessary.

X<builtins; C<chomp>>
X<builtins; C<chr>>
X<builtins; C<ord>>
X<builtins; C<lc>>
X<builtins; C<length>>
X<builtins; C<reverse>>
X<builtins; C<uc>>

Many of Perl's scalar operators (including C<chr>, C<ord>, C<lc>, C<length>,
C<reverse>, and C<uc>) work on the default scalar variable if you do not
provide an alternative. For example, the C<chomp> builtin removes any trailing
newline sequence from its operandN<See C<perldoc -f chomp> and C<$/> for more
precise details of its behavior.>:

=begin programlisting

    my $uncle = "Bob\n";
    chomp $uncle;
    say "'$uncle'";

=end programlisting

C<$_> has the same function in Perl as the pronoun I<it> in English. Without an
explicit variable, C<chomp> removes the trailing newline sequence from C<$_>.
Perl understands what you mean when you say "C<chomp>"; Perl will always chomp
I<it>, so these two lines of code are equivalent:

=begin programlisting

    chomp $_;
    chomp;

=end programlisting

X<builtins; C<say>>
X<builtins; C<print>>

Similarly, C<say> and C<print> operate on C<$_> in the absence of other
arguments:

=begin programlisting

    print;  # prints $_ to the current filehandle
    say;    # prints "$_\n" to the current filehandle

=end programlisting

X<C<s///>; substitution operator>
X<C<m//>; match operator>
X<C<tr//>; transliteration operator>

Perl's regular expression facilities (L<regex>) default to C<$_> to match,
substitute, and transliterate:

=begin programlisting

    $_ = 'My name is Paquito';
    say if /My name is/;

    s/Paquito/Paquita/;

    tr/A-Z/a-z/;
    say;

=end programlisting

X<builtins; C<for>>

Perl's looping directives (L<looping_directives>) default to using C<$_> as the
iteration variable. Consider C<for> iterating over a list:

=begin programlisting

    say "#B<$_>" for 1 .. 10;

    for (1 .. 10)
    {
        say "#B<$_>";
    }

=end programlisting

X<builtins; C<while>>

... or C<while>:

=begin programlisting

    while (<STDIN>)
    {
        chomp;
        say scalar reverse;
    }

=end programlisting

X<builtins; C<map>>

... or C<map> transforming a list:

=begin programlisting

    my @squares = map { B<$_> * B<$_> } 1 .. 10;
    say for @squares;

=end programlisting

X<builtins; C<grep>>

... or C<grep> filtering a list:

=begin programlisting

    say 'Brunch time!'
        if grep { /pancake mix/ } @pantry;

=end programlisting

As English gets confusing when you have too many pronouns and antecedents, you
must take care mixing uses of C<$_> implicitly or explicitly. Uncautious
simultaneous use of C<$_> may lead to one piece of code silently overwriting
the value written by another. If you write a function which uses C<$_>, you
may clobber a caller function's use of C<$_>.

As of Perl 5.10, you may declare C<$_> as a lexical variable (L<lexical_scope>)
to prevent this clobbering behavior:

=begin programlisting

    while (<STDIN>)
    {
        chomp;

        # BAD EXAMPLE
        my $munged = calculate_value( $_ );
        say "Original: $_";
        say "Munged  : $munged";
    }

=end programlisting

If C<calculate_value()> or any other function changed C<$_>, that change would
persist through that iteration of the loop. Adding a C<my> declaration prevents
clobbering an existing instance of C<$_>:

=begin programlisting

    while (my $_ = <STDIN>)
    {
        ...
    }

=end programlisting

Of course, using a named lexical can be just as clear:

=begin programlisting

    while (my $line = <STDIN>)
    {
        ...
    }

=end programlisting

Use C<$_> as you would the word "it" in formal writing: sparingly, in small and well-defined scopes.

=begin tip The C<...> Operator

X<builtins; C<...>>

Perl 5.12 introduced the triple-dot (C<...>) operator as a placeholder for code
you intend to fill in later. Perl will parse it as a complete statement, but
will throw an exception that you're trying to run unimplemented code if you try
to run it. See C<perldoc perlop> for more details.

=end tip

=head2 The Default Array Variables

Z<default_array_variables>

X<default variables; array>
X<default variables; C<@_>>
X<variables; C<@_>>
X<C<@_>>

Perl also provides two implicit array variables. Perl passes arguments to
functions (L<functions>) in an array named C<@_>. Array manipulation operations
(L<arrays>) inside functions affect this array by default, so these two
snippets of code are equivalent:

=begin programlisting

    sub foo
    {
        my $arg = shift;
        ...
    }

    sub foo_explicit_args
    {
        my $arg = shift @_;
        ...
    }

=end programlisting

X<builtins; C<shift>>
X<builtins; C<pop>>

Just as C<$_> corresponds to the pronoun I<it>, C<@_> corresponds to the
pronouns I<they> and I<them>. I<Unlike> C<$_>, Perl automatically localizes
C<@_> for you when you call other functions. The builtins C<shift> and C<pop>
operate on C<@_> with no other operands provided.

X<default variables; C<@ARGV>>
X<variables; C<@ARGV>>
X<C<@ARGV>>

Outside of all functions, the default array variable C<@ARGV> contains the
command-line arguments to the program. Perl's array operations (including
C<shift> and C<pop>) operate on C<@ARGV> implicitly outside of functions. You
cannot use C<@_> when you mean C<@ARGV>.

=begin tip C<readline>

X<builtins; C<readline>>
X<builtins; C<glob>>

Perl's C<< <$fh> >> operator is the same as the C<readline> builtin.
C<readline $fh> does the same thing as C<< <$fh> >>. As of Perl 5.10, a bare
C<readline> behaves just like C<< <> >>, so you can now use C<readline>
everywhere. For historic reasons, C<< <> >> is still more common, but consider
using C<readline> as a more readable alternative. You probably prefer C<glob
'*.html'> to C<< <*.html> >>, right? It's the same idea.

=end tip

X<null filehandle>

C<ARGV> has one special case. If you read from the null filehandle C<< <> >>,
Perl will treat every element in C<@ARGV> as the I<name> of a file to open for
reading. (If C<@ARGV> is empty, Perl will read from standard input.) This
implicit C<@ARGV> behavior is useful for writing short programs, such as this
command-line filter which reverses its input:

=begin programlisting

    while (<>)
    {
        chomp;
        say scalar reverse;
    }

=end programlisting

Why C<scalar>? C<say> imposes list context on its operands. C<reverse> passes
its context on to its operands, treating them as a list in list context and a
concatenated string in scalar context. If the behavior of C<reverse> sounds
confusing, your instincts are correct. Perl 5 arguably should have separated
"reverse a string" from "reverse a list".

If you run it with a list of files:

=begin screen

    $ B<perl reverse_lines.pl encrypted/*.txt>

=end screen

... the result will be one long stream of output.  Without any arguments, you
can provide your own standard input by piping in from another program or typing
directly. Yet Perl is good for far more than small command-line programs....
