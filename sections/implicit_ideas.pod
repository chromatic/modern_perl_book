=head1 Implicit Ideas

Z<implicit_ideas>

Like many spoken languages, Perl provides linguistic shortcuts.  Context is one
such feature: both the compiler and a programmer reading the code can
understand the expected number of results or the type of an operation from
existing information without requiring additional information to disambiguate.

Other linguistic features include default variables--essentially pronouns.

=head2 The Default Scalar Variable

Z<default_scalar_variable>

X<default variables; scalar>
X<default variables; C<$_>>
X<< variables; C<$_> >>
X<< C<$_>; default scalar variable >>

The I<default scalar variable> (also called the I<topic variable>), C<$_>, is
the best example of a linguistic shortcut in Perl.  It's most notable in its
I<absence>: many of Perl's builtin operations work on the contents of C<$_> in
the absence of an explicit variable.  You can still use C<$_> as the variable,
but it's often unnecessary.

For example, the C<chomp> operator removes any trailing newline sequence from
the given string:

=begin programlisting

    my $uncle = "Bob\n";
    say "'$uncle'";
    chomp $uncle;
    say "'$uncle'";

=end programlisting

Without an explicit variable, C<chomp> removes the trailing newline sequence
from C<$_>.  These two lines of code are equivalent:

=begin programlisting

    chomp $_;
    chomp;

=end programlisting

C<$_> has the same function in Perl as the pronoun I<it> in English.  Read the
first line as "C<chomp> I<it>" and the second as "C<chomp>".  Perl understands
what you mean when you don't explain what to chomp; Perl will always chomp
I<it>.

Similarly, the C<say> and C<print> builtins operate on C<$_> in the absence of
other arguments:

=begin programlisting

    print;  # prints $_ to the currently selected filehandle
    say;    # prints $_ to the currently selected filehandle
            # with a trailing newline

=end programlisting

X<C<s///>; subsitution operator>
X<C<m//>; match operator>
X<C<tr//>; transliteration operator>

Perl's regular expression facilities (L<regex>) can also operate on C<$_> to
match, substitute, and transliterate:

=begin programlisting

    $_ = 'My name is Paquito';
    say if /My name is/;

    s/Paquito/Paquita/;

    tr/A-Z/a-z/;
    say;

=end programlisting

X<builtins; C<chr>>
X<builtins; C<ord>>
X<builtins; C<lc>>
X<builtins; C<length>>
X<builtins; C<reverse>>
X<builtins; C<uc>>

Many of Perl's scalar operators (including C<chr>, C<ord>, C<lc>, C<length>,
C<reverse>, and C<uc>) work on the default scalar variable if you do not
provide an alternative.

Perl's looping directives (L<looping_directives>) also set C<$_>, such as
C<for> iterating over a list:

=begin programlisting

    say "#B<$_>" for 1 .. 10;

    for (1 .. 10)
    {
        say "#B<$_>";
    }

=end programlisting

... or C<while>:

=begin programlisting

    while (<STDIN>)
    {
        chomp;
        say scalar reverse;
    }

=end programlisting

X<builtins; C<map>>

... or C<map> transforming a list:

=begin programlisting

    my @squares = map { B<$_> * B<$_> } 1 .. 10;
    say for @squares;

=end programlisting

X<builtins; C<grep>>

... or C<grep> filtering a list:

=begin programlisting

    say 'Brunch time!' if grep { /pancake mix/ } @pantry;

=end programlisting

If you call functions within code that uses C<$_> whether implicitly or
explicitly, they may overwrite the value of C<$_>.  Similarly, if you write a
function which uses C<$_>, you may clobber a caller function's use of
C<$_>.  Perl 5.10 allows you to use C<my> to declare C<$_> as a lexical
variable, which prevents this clobbering behavior.  Be wise.

=begin programlisting

    while (<STDIN>)
    {
        chomp;

        # BAD EXAMPLE
        my $munged = calculate_value( $_ );
        say "Original: $_";
        say "Munged  : $munged";
    }

=end programlisting

In this example, if C<calculate_value()> or any other function it happened to
call changed C<$_>, it would remain changed throughout the C<while> loop.
Adding a C<my> declaration prevents that behavior:

=begin programlisting

    while (my $_ = <STDIN>)
    {
        ...
    }

=end programlisting

Of course, using a named lexical can be just as clear:

=begin programlisting

    while (my $line = <STDIN>)
    {
        ...
    }

=end programlisting

Use C<$_> as you would the word "it" in formal writing: sparingly, in small and well-defined scopes.

=head2 The Default Array Variables

X<default variables; array>
X<default variables; C<@_>>
X<variables; C<@_>>
X<C<@_>>

While Perl has a single implicit scalar variable, it has two implicit array
variables.  Perl passes arguments to functions in an array named C<@_>.  Array
manipulation operations (L<arrays>) inside functions affect this array by
default.  Thus, these two snippets of code are equivalent:

=begin programlisting

    sub foo
    {
        my $arg = shift;
        ...
    }

    sub foo_explicit
    {
        my $arg = shift @_;
        ...
    }

=end programlisting

Just as C<$_> corresponds to the pronoun I<it>, C<@_> corresponds to the
pronoun I<they> or I<them>.  I<Unlike> C<$_>, Perl automatically localizes
C<@_> for you when you call other functions.  The array operators C<shift> and
C<pop> operate on C<@_> with no other operands provided.

X<default variables; C<@ARGV>>
X<variables; C<@ARGV>>
X<C<@ARGV>>

Outside of all functions, the default array variable C<@ARGV> contains the
command-line arguments to the program.  The same array operators which use
C<@_> implicitly I<within> functions use C<@ARGV> implicitly outside of
functions.  You cannot use C<@_> when you mean C<@ARGV>.

X<null filehandle>

C<ARGV> has one special case.  If you read from the null filehandle C<< <> >>,
Perl will treat every element in C<@ARGV> as the I<name> of a file to open for
reading.  (If C<@ARGV> is empty, Perl will read from standard input.) This
implicit C<@ARGV> behavior is useful for writing short programs, such as this
command-line filter which reverses its input:

=begin programlisting

    while (<>)
    {
        chomp;
        say scalar reverse;
    }

=end programlisting

=begin sidebar

Why C<scalar>?  C<say> imposes list context on its operands.  C<reverse> passes
its context on to its operands, treating them as a list in list context and a
concatenated string in scalar context.  This sounds confusing, because it is.
Perl 5 arguably should have had different operators for these different
operations.

=end sidebar

If you run it with a list of files:

=begin screen

    $ B<perl reverse_lines.pl encrypted/*.txt>

=end screen

... the result will be one long stream of output.  Without any arguments, you
can provide your own standard input by piping in from another program or typing
directly.
