=head1 Implicit Ideas

Z<implicit_ideas>

Perl code can seem dense at first, but it's full of linguistic shortcuts. These
allow experienced programmers to glance at code and understand its important
implications. Context is one shortcut. Another is default variables--the
programming equivalent of pronouns.

=head2 The Default Scalar Variable

Z<default_scalar_variable>

X<default variables; scalar>
X<default variables; C<$_>>
X<< variables; C<$_> >>
X<< C<$_>; default scalar variable >>

The I<default scalar variable> (or I<topic variable>), C<$_>, is most notable
in its I<absence>: many of Perl's builtin operations work on the contents of
C<$_> in the absence of an explicit variable. You can still type C<$_> if it
makes your code clearer to you, but it's often unnecessary.

X<builtins; C<chomp>>
X<builtins; C<chr>>
X<builtins; C<ord>>
X<builtins; C<lc>>
X<builtins; C<length>>
X<builtins; C<reverse>>
X<builtins; C<uc>>

Many of Perl's scalar operators (including C<chr>, C<ord>, C<lc>, C<length>,
C<reverse>, and C<uc>) work on the default scalar variable if you do not
provide an alternative. For example, the C<chomp> builtin removes any trailing
newline sequence (technically the contents of C<$/>; see C<perldoc -f chomp>)
from its operand:

=begin programlisting

    my $uncle = "Bob\n";
    chomp $uncle;
    say "'$uncle'";

=end programlisting

C<$_> behaves the same way in Perl as the pronoun I<it> does in English.
Without an explicit variable, C<chomp> removes the trailing newline sequence
from C<$_>. When you write "C<chomp;>", Perl will always chomp I<it>. These two
lines of code are equivalent:

=begin programlisting

    chomp $_;
    chomp;

=end programlisting

X<builtins; C<say>>
X<builtins; C<print>>

C<say> and C<print> also operate on C<$_> in the absence of other arguments:

=begin programlisting

    print;  # prints $_ to the current filehandle
    say;    # prints $_ and a newline to the current filehandle

=end programlisting

X<C<s///>; substitution operator>
X<C<m//>; match operator>
X<C<tr//>; transliteration operator>

Perl's regular expression facilities (L<regex>) default to C<$_> to match,
substitute, and transliterate:

=begin programlisting

    $_ = 'My name is Paquito';
    say if /My name is/;

    s/Paquito/Paquita/;

    tr/A-Z/a-z/;
    say;

=end programlisting

X<builtins; C<for>>

Perl's looping directives (L<looping_directives>) default to using C<$_> as the
iteration variable, whether C<for> iterating over a list:

=begin programlisting

    say "#B<$_>" for 1 .. 10;

    for (1 .. 10) {
        say "#B<$_>";
    }

=end programlisting

X<builtins; C<while>>

... or C<while> waiting for an expression to evaluate to false:

=begin programlisting

    while (<STDIN>) {
        chomp;
        say scalar reverse;
    }

=end programlisting

X<builtins; C<map>>

... or C<map> transforming a list:

=begin programlisting

    my @squares = map { B<$_> * B<$_> } 1 .. 10;
    say for @squares; # note the postfix for

=end programlisting

X<builtins; C<grep>>

... or C<grep> filtering a list:

=begin programlisting

    say 'Brunch is possible!'
        if grep { /pancake mix/ } @pantry;

=end programlisting

Just as English gets confusing when you have too many pronouns and antecedents,
so does Perl when you mix explicit and implicit uses of C<$_>. In general,
there's only one C<$_>. If you use it in multiple places, one operator's C<$_>
may override another's. For example, if one function uses C<$_> and you call it
from another function which uses C<$_>, the callee may clobber the caller's
value:

=begin programlisting

    while (<STDIN>) {
        chomp;

        # BAD EXAMPLE
        my $munged = calculate_value( $_ );
        say "Original: $_";
        say "Munged  : $munged";
    }

=end programlisting

If C<calculate_value()> or any other function changed C<$_>, that change would
persist through that iteration of the loop. Using a named lexical is safer and
may be clearer:

=begin programlisting

    while (my $line = <STDIN>) {
        ...
    }

=end programlisting

Use C<$_> as you would the word "it" in formal writing: sparingly, in small and
well-defined scopes.

=begin tip The C<...> Operator

X<builtins; C<...>>

The triple-dot (C<...>) operator is a placeholder for code you intend to fill
in later. Perl will parse it as a complete statement, but will throw an
exception that you're trying to run unimplemented code if you try to run it.
See C<perldoc perlop> for more details.

=end tip

=head2 The Default Array Variables

Z<default_array_variables>

X<default variables; array>
X<default variables; C<@_>>
X<variables; C<@_>>
X<C<@_>>

Perl also provides two implicit array variables. Perl passes arguments to
functions (L<functions>) in an array named C<@_>. Array operations (L<arrays>)
inside functions use this array by default. These two snippets of code are
equivalent:

=begin programlisting

    sub foo {
        my $arg = shift;
        ...
    }

    sub foo_explicit_args {
        my $arg = shift @_;
        ...
    }

=end programlisting

X<builtins; C<shift>>
X<builtins; C<pop>>

Just as C<$_> corresponds to the pronoun I<it>, C<@_> corresponds to the
pronouns I<they> and I<them>. I<Unlike> C<$_>, each function has a separate
copy of C<@_>. The builtins C<shift> and C<pop> operate on C<@_>, if provided
no explicit operands.

X<default variables; C<@ARGV>>
X<variables; C<@ARGV>>
X<C<@ARGV>>

Outside of all functions, the default array variable C<@ARGV> contains the
command-line arguments provided to the program. Perl's array operations
(including C<shift> and C<pop>) operate on C<@ARGV> implicitly outside of
functions. You cannot use C<@_> when you mean C<@ARGV>.

=begin tip C<readline>

X<builtins; C<readline>>
X<builtins; C<glob>>

Perl's C<< <$fh> >> operator is the same as the C<readline> builtin.
C<readline $fh> does the same thing as C<< <$fh> >>. A bare C<readline> behaves
just like C<< <> >>. For historic reasons, C<< <> >> is still more common, but
consider using C<readline> as a more readable alternative. (What's more
readable, C<glob '*.html'> to C<< <*.html> >>? The same idea applies.)

=end tip

X<null filehandle>

C<ARGV> has one special case. If you read from the null filehandle C<< <> >>,
Perl will treat every element in C<@ARGV> as the I<name> of a file to open for
reading. (If C<@ARGV> is empty, Perl will read from standard input; see
L<filehandle>.) This implicit C<@ARGV> behavior is useful for writing short
programs, such as a command-line filter which reverses its input:

=begin programlisting

    while (<>) {
        chomp;
        say scalar reverse;
    }

=end programlisting

=begin tip The Double Open Operator

X<builtins; C<<< <<>>  >>> >

Perl 5.22 made this expression a little safer with the C<<< <<>> >>> operator.
If a filename provided contains a special punctuation symbol like C<|filename>
or C<filename|>, Perl would do something special with it. The double-diamond
operator avoids this behavior.

=end tip

Why C<scalar>? C<say> imposes list context on its operands. C<reverse> passes
its context on to its operands, treating them as a list in list context and a
concatenated string in scalar context. If the behavior of C<reverse> sounds
confusing, your instincts are correct. Perl arguably should have separated
"reverse a string" from "reverse a list".

If you run it with a list of files:

=begin screen

    $ B<perl reverse_lines.pl encrypted/*.txt>

=end screen

... the result will be one long stream of output.  Without any arguments, you
can provide your own standard input by piping in from another program or typing
directly. That's a lot of flexibility in a small program--and you're only
getting started.
