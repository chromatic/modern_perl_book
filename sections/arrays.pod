=head1 Arrays

Z<arrays>
X<arrays>

Perl 5 I<arrays> are I<first-class> data structures--the language supports them
as a built-in data type--which store zero or more scalars. You can access
individual members of the array by integer indexes, and you can add or remove
elements at will.

X<C<@> sigil>
X<sigils; C<@>>

The C<@> sigil denotes an array. To declare an array:

=begin programlisting

    my @items;

=end programlisting

=head2 Array Elements

X<sigils; variant>
X<C<$>; sigil>
X<sigils; C<$>>

I<Accessing> an individual element of an array in Perl 5 requires the scalar
sigil. C<$cats[0]> is an unambiguous use of the C<@cats> array, because postfix
(L<fixity>) square brackets (C<[]>) always mean indexed access to an array.

The first element of an array is at index zero:

=begin programlisting

    # @cats contains a list of Cat objects
    my $first_cat = $cats[0];

=end programlisting

The last index of an array depends on the number of elements in the array. An
array in scalar context (due to scalar assignment, string concatenation,
addition, or boolean context) evaluates to the number of elements in the array:

=begin programlisting

    # scalar assignment
    my $num_cats = @cats;

    # string concatenation
    say 'I have ' . @cats . ' cats!';

    # addition
    my $num_animals = @cats + @dogs + @fish;

    # boolean context
    say 'Yep, a cat owner!' if @cats;

=end programlisting

To get the I<index> of the final element of an array, subtract one from the
number of elements of the array (remember that array indexes start at 0):

=begin programlisting

    my $first_index = 0;
    my $last_index  = @cats - 1;

    say   "My first cat has an index of $first_index, "
        . "and my last cat has an index of $last_index."

=end programlisting

X<C<$#>; sigil>
X<sigils; C<$#>>

The less wieldy syntax C<$#cats> also evaluates to the last index of the array:

=begin programlisting

    my $first_index = 0;
    B<my $last_index  = $#cats;>

    say   "My first cat has an index of $first_index, "
        . "and my last cat has an index of $last_index."

=end programlisting

... though it's often clearer to use negative array indices instead.  The last
element of an array is available at the index C<-1>. The second to last element
of the array is available at index C<-2>, and so on:

=begin programlisting

    my $last_cat           = $cats[-1];
    my $second_to_last_cat = $cats[-2];

=end programlisting

C<$#> has another use: resize an array in place by I<assigning> to it.
Remember that Perl 5 arrays are mutable. They expand or contract as necessary.
When you shrink an array, Perl will discard values which do not fit in the
resized array. When you expand an array, Perl will fill the expanded positions
with C<undef>.

=head2 Array Assignment

Assign to individual positions in an array directly by index:

=begin programlisting

    my @cats;
    $cats[3] = 'Jack';
    $cats[2] = 'Tuxedo';
    $cats[0] = 'Daisy';
    $cats[1] = 'Petunia';
    $cats[4] = 'Brad';

=end programlisting

If you assign to an index beyond the array's current bound, Perl will extend
the array to account for the new size and will fill in all intermediary
positions with C<undef>. After the first assignment, the array will contain
C<undef> at positions 0, 1, and 2 and C<Jack> at position 3.

As an assignment shortcut, initialize an array from a list:

=begin programlisting

    my @cats = ( 'Daisy', 'Petunia', 'Tuxedo', 'Jack', 'Brad' );

=end programlisting

=begin sidebar

Remember that these parentheses I<do not> create a list. Without parentheses,
this would assign C<Daisy> as the first and only element of the array, due to
operator precedence (L<precedence>).

=end sidebar

Any expression which produces a list in list context can assign to an array:

=begin programlisting

    my @cats     = get_cat_list();
    my @timeinfo = localtime();
    my @nums     = 1 .. 10;

=end programlisting

Assigning to a scalar element of an array imposes scalar context, while
assigning to the array as a whole imposes list context.

To clear an array, assign an empty list:

=begin programlisting

    my @dates = ( 1969, 2001, 2010, 2051, 1787 );
    ...
    @dates    = ();

=end programlisting

=begin sidebar

C<my @items = ();> is a longer and noisier version of C<my @items> because
freshly-declared arrays start out empty.

=end sidebar

=head2 Array Slices

Z<array_slices>

X<arrays; slices>
X<slices; array>
X<C<@>; sigil>
X<sigils; C<@>>

The I<array slice> construct allows you to access elements of an array in list
context. Unlike scalar access of an array element, this indexing operation
takes a list of zero or more indices and uses the array sigil (C<@>):

=begin programlisting

    my @youngest_cats = @cats[-1, -2];
    my @oldest_cats   = @cats[0 .. 2];
    my @selected_cats = @cats[ @indexes ];

=end programlisting

Array slices are useful for assignment:

=begin programlisting

    @users[ @replace_indices ] = @replace_users;

=end programlisting

A slice can contain zero or more elements--including one:

=begin programlisting

    # single-element array slice; function call in I<list> context
    @cats[-1] = get_more_cats();

    # single-element array access; function call in I<scalar> context
    $cats[-1] = get_more_cats();

=end programlisting

The only syntactic difference between an array slice of one element and the
scalar access of an array element is the leading sigil. The I<semantic>
difference is greater: an array slice always imposes list context. An array
slice evaluated in scalar context will produce a warning:

=begin screen

    Scalar value @cats[1] better written as $cats[1] at...

=end screen

An array slice imposes list context (L<context_philosophy>) on the expression
used as its index:

=begin programlisting

    # function called in list context
    my @hungry_cats = @cats[ get_cat_indices() ];

=end programlisting

=head2 Array Operations

Sometimes an array is more convenient as an ordered, mutable collection of
items than as a mapping of indices to values. Perl 5 provides several
operations to manipulate array elements without using indices.

X<arrays; C<push>>
X<arrays; C<pop>>
X<builtins; C<push>>
X<builtins; C<pop>>

The C<push> and C<pop> operators add and remove elements from the tail of the
array, respectively:

=begin programlisting

    my @meals;

    # what is there to eat?
    push @meals, qw( hamburgers pizza lasagna turnip );

    # ... but your nephew hates vegetables
    pop @meals;

=end programlisting

You may C<push> a list of values onto an array, but you may only C<pop> one at
a time. C<push> returns the new number of elements in the array. C<pop> returns
the removed element.

X<arrays; C<shift>>
X<arrays; C<unshift>>
X<builtins; C<shift>>
X<builtins; C<unshift>>

Similarly, C<unshift> and C<shift> add elements to and remove an element from
the start of an array, respectively:

=begin programlisting

    # expand our culinary horizons
    unshift @meals, qw( tofu curry spanakopita taquitos );

    # rethink that whole soy idea
    shift @meals;

=end programlisting

C<unshift> prepends a list of elements to the start of the array and returns
the new number of elements in the array. C<shift> removes and returns the first
element of the array.

=begin sidebar

Few programs use the return values of C<push> and C<unshift>.

=end sidebar

X<arrays; C<splice>>
X<builtins; C<splice>>

The C<splice> operator removes and replaces elements from an array given an
offset, a length of a list slice, and replacements. Both replacing and removing
are optional; you may omit either behavior. The C<perlfunc> description of
C<splice> demonstrates its equivalences with C<push>, C<pop>, C<shift>, and
C<unshift>. One effective use is removal of two elements from an array:

=begin programlisting

    my ($winner, $runnerup) = splice @finalists, 0, 2;

    # or
    my $winner              = shift @finalists;
    my $runnerup            = shift @finalists;

=end programlisting

X<arrays; C<each>>
X<builtins; C<each>>

Prior to Perl 5.12, iterating over an array by index required a C-style loop.
As of Perl 5.12, C<each> can iterate over an array by index and value:

=begin programlisting

    while (my ($index, $value) = each @bookshelf)
    {
        say "#$index: $value";
        ...
    }

=end programlisting

=head2 Arrays and Context

X<list context; arrays>

In list context, arrays flatten into lists.  If you pass multiple arrays to a
normal Perl 5 function, they will flatten into a single list:

=begin programlisting

    my @cats = qw( Daisy Petunia Tuxedo Brad Jack );
    my @dogs = qw( Rodney Lucky );

    take_pets_to_vet( @cats, @dogs );

    sub take_pets_to_vet
    {
        # BUGGY: do not use!
        my (@cats, @dogs) = @_;
        ...
    }

=end programlisting

Within the function, C<@_> will contain seven elements, not two, because list
assignment to arrays is I<greedy>. An array will consume as many elements from
the list as possible. After the assignment, C<@cats> will contain I<every>
argument passed to the function. C<@dogs> will be empty.

This flattening behavior sometimes confuses novices who attempt to create
nested arrays in Perl 5:

=begin programlisting

    # creates a single array, not an array of arrays
    my @array_of_arrays = ( 1 .. 10, ( 11 .. 20, ( 21 .. 30 ) ) );

=end programlisting

... but this code is effectively the same as:

=begin programlisting

    # creates a single array, not an array of arrays
    my @array_of_arrays = 1 .. 30;

=end programlisting

... because these parentheses merely group expressions. They do not I<create>
lists in these circumstances. To avoid this flattening behavior, use array
references (L<array_references>).

=head2 Array Interpolation

X<arrays; interpolation>
X<interpolation; arrays>
X<C<$">>
X<C<$LIST_SEPARATOR>>

Arrays interpolate in strings as lists of the stringifications of each item
separated by the current value of the magic global C<$">. The default value of
this variable is a single space. Its F<English.pm> mnemonic is
C<$LIST_SEPARATOR>. Thus:

=begin programlisting

    my @alphabet = 'a' .. 'z';
    say "[@alphabet]";
    B<[a b c d e f g h i j k l m n o p q r s t u v w x y z]>

=end programlisting

Temporarily localizing and assigning another value to C<$"> for debugging
purposes is very handyN<Credit goes to Mark Jason Dominus for demonstrating its
efficacy.>:

=begin programlisting

    # what's in this array again?
    {
        local $" = ')(';
        say "(@sweet_treats)";
    }

=end programlisting

... which produces the result:

=begin screen

    (pie)(cake)(doughnuts)(cookies)(raisin bread)

=end screen
