=head3 Control Flow

Z<control_flow>

Perl's control flow is similar to that of other procedural programming
languages; program execution starts at the beginning (the first line of the
file executed) and continues to the end:

=begin programlisting

    say 'At start'
    say 'In middle'
    say 'At end'

=end programlisting

X<control flow directives>

This is true in the absence of specific I<control flow directives>.  These
directives change the flow of execution -- what happens next -- depending on
the values of arbitrarily complex expressions.

=head4 Branching Directives

X<if>
X<control flow directives; if>

The C<if> directive evaluates a conditional expression and performs the
associated action only when the conditional expression evaluates to a true
value:

=begin programlisting

    say 'Hello, Bob!' if $name eq 'Bob';

=end programlisting

Along with the postfix form, there is a block form, useful to group multiple
expressions into a single unit:

=begin programlisting

    if ($name eq 'Bob')
    {
        say 'Hello, Bob!';
        found_bob();
    }

=end programlisting

Note that the postfix form does not require parentheses around its condition,
while the block form does.  The conditional expressions may be more complex:

=begin programlisting

    if ($name eq 'Bob' && not greeted_bob())
    {
        say 'Hello, Bob!';
        found_bob();
    }

=end programlisting

... though in this case, parenthesization of the expression in postfix form may
add clarityN<It may also argue against using the postfix form.>:

=begin programlisting

    greet_bob() if ($name eq 'Bob' && not greeted_bob());

=end programlisting

=begin sidebar

You may not omit the curly braces in block form under any circumstances; use
the postfix conditional form instead.

=end sidebar

X<unless>
X<control flow directives; unless>

The C<unless> directive is a negated form of C<if>.  Perl will perform the
requested action when the conditional expression evaluates to I<false>:

=begin programlisting

    say "You're no Bob!" unless $name eq 'Bob';

=end programlisting

Like C<if>, C<unless> also has a block form, but this is rarer in practice than
the postfix form:

=begin programlisting

    unless (is_leap_year() and is_full_moon())
    {
        frolic();
        gambol();
    }

=end programlisting

C<unless> works very well for postfix conditionals, especially parameter
validation in subroutines:

=begin programlisting

    sub frolic
    {
        return unless @_;

        for my $chant (@_)
        {
            ...
        }
    }

=end programlisting

C<unless> can be difficult to read with multiple conditions; this is one reason
it appears rarely in its block form.

X<else>
X<control flow directives; else>

The block forms of C<if> and C<unless> both work with the C<else> directive.
This follows the first block and delimits code to run when the conditional
expression does not evaluate to true (for C<if>) or false (for C<unless>):

=begin programlisting

    if ($name eq 'Bob')
    {
        say 'Hi, Bob!';
        greet_user();
    }
    else
    {
        say "I don't know you.";
        shun_user();
    }

=end programlisting

With C<else> blocks, you can rewrite C<if> and C<unless> conditionals in terms
of each other:

=begin programlisting

    B<unless> ($name eq 'Bob')
    {
        say "I don't know you.";
        shun_user();
    }
    else
    {
        say 'Hi, Bob!';
        greet_user();
    }

=end programlisting

If you read the previous example out loud, you may notice the awkward
pseudocode phrasing: "Unless this name is Bob, do this.  Otherwise, do
something else."  The implied double negative can be confusing.

For clarity, you may also rewrite conditional expressions to use different
operators:

=begin programlisting

    if ($name B<ne> 'Bob')
    {
        say "I don't know you.";
        shun_user();
    }
    else
    {
        say 'Hi, Bob!';
        greet_user();
    }

=end programlisting

Again, the double negative implied by the presence of the C<else> block argues
for the first example again.

X<elsif>
X<control flow directives; elsif>

If you need to check more than one condition, the C<elsif> directive can follow
the C<if> block form.  An C<else> block may follow.  You may use as many
C<elsif> blocks as you like; you may not change the order in which the block
types appear:

=begin programlisting

    if ($name eq 'Bob')
    {
        say 'Hi, Bob!';
        greet_user();
    }
    elsif ($name eq 'Jim')
    {
        say 'Hi, Jim!';
        greet_user();
    }
    else
    {
        say "I don't know you.";
        shun_user();
    }

=end programlisting

You may also use the C<elsif> block with an C<unless> chain, but the resulting
code may be unclear.

=head4 The Ternary Conditional Operators

X<ternary conditional>
X<control flow directives; ternary conditional>

The I<ternary conditional> operator offers an alternate approach to control
flow.  It evaluates a conditional expression and evaluates to one of two
different results:

=begin programlisting

    my $time_suffix = after_noon($time) ? 'morning' : 'afternoon';

=end programlisting

The conditional expression precedes the question mark character (C<?>); the
colon character (C<:>) separates the alternatives.  You can use arbitrarily
complex expressions, if you parenthesize them .  Similarly, the alternatives
can be arbitrarily complex expressions, or even other ternary conditional
expressions.  Readability often argues against this strategy.

X<short circuiting behavior>
X<short circuiting>

Perl performs a type of behavior known as I<short-circuiting> when it
encounters complex expressions -- expressions composed of multiple evaluated
expressions.  If Perl can determine that a complex expression would succeed or
fail as a whole without evaluating every subexpression, it will not evaluate
subsequent subexpressions.  This is most obvious with an example:

=begin programlisting

    say "Both true!" if ok(1, 'first subexpression')
                     && ok(1, 'second subexpression' );

=end programlisting

=begin sidebar

Remember that the return value of C<ok()> is the boolean value obtained by
evaluating the first argument.

=end sidebar

This example prints:

=begin screen

    ok 1 - first subexpression
    ok 2 - first subexpression
    Both true!

=end screen

When the first subexpression -- the first call to C<ok> -- evaluates to true,
Perl must evaluate the second subexpression.  When the first subexpression
evaluates to false, the entire expression cannot succeed:

=begin programlisting

    say "Both true!" if ok(0, 'first subexpression')
                     && ok(1, 'second subexpression' );

=end programlisting

This example prints:

=begin screen

    not ok 1 - first subexpression
    Both true!

=end screen

Even though the second subexpression would obviously succeed, Perl never evaluates it.

The logic is similar for a complex conditional expression where either
subexpression must be true for the conditional as a whole to succeed:

=begin programlisting

    say "Either true!" if ok(1, 'first subexpression')
                       || ok(1, 'second subexpression' );

=end programlisting

This example prints:

=begin screen

    ok 1 - first subexpression
    Either true!

=end screen

Again, with the success of the first subexpression, Perl can skip evaluation of
the second subexpression.  If the first subexpression were false, the result
evaluating the second subexpression would dictate the result of evaluating the
entire expression.

=head4 Context for Conditional Directives

X<context; conditional>

The conditional directives -- C<if>, C<unless>, and the ternary conditional
operator -- all evaluate an expression in boolean context.  (See L<context>.)
While comparison operators such as C<eq>, C<==>, C<ne>, and C<!=> all produce
boolean results when evaluated, Perl coerces the results of other expressions
-- including variables and values -- into boolean forms.

Thus these operators provide a boolean context.  Empty hashes and arrays
evaluate to false.  Scalars containing C<undef>, the values 0 and 0.0, and the
empty string evaluate to false.  Everything else is true, in the absence of
deeper magic.

=for author

Review the rules on truthiness of scalars again.

=end for

=begin sidebar

The C<Want> module available from the CPAN allows you to detect boolean context
within your own subroutines.  The core C<overload> module allows you to specify
what your own data types produce when evaluated in a boolean context.

=end sidebar

=head4 Looping Directives

Z<looping_directives>

Perl also provides several directives devoted to looping and iteration.

C<foreach>
C<for>
C<looping directives; for>
C<looping directives; foreach>

The I<foreach> style loop evaluates an expression and executes a statement or
block until the expression evaluates to a false value:

=begin programlisting

    foreach (1 .. 10)
    {
        say "$_ * $_ = ", $_ * $_;
    }

=end programlisting

This example uses the C<range> operator to produce a list of integers from one
to ten inclusive.  The C<foreach> directive loops over them, setting the topic
variable (C<$_>) to each in turn.  Perl executes the block for each integer,
printing the squares of the integers.

=begin sidebar

Though this is a I<foreach>-style loop, Perl treats the keywords C<foreach> and
C<for> interchangeably.  As the type of the loop governs its behavior, there
are no drawbacks to using the shorter C<for> keyword.

=end sidebar

Like C<if> and C<unless>, there is a postfix form of this loop:

=begin programlisting

    say "$_ * $_ = ", $_ * $_ for 1 .. 10;

=end programlisting

Similar suggestions apply for clarity and complexity.

You may provide a variable to which to assign the values of the expression in
place of the topic variable:

=begin programlisting

    for my $i (1 .. 10)
    {
        say "$i * $i = ", $i * $i;
    }

=end programlisting

Note that Perl will not set the topic variable C(<$_>) to the iterated values
in this case.  Note also that the scope of the variable C<$i> is only valid
I<within> the loop.  If you have declared a lexical C<$i> in an outer scope,
that value will remain outside the loop:

=begin programlisting

    my $i = 'cow';

    for my $i (1 .. 10)
    {
        say "$i * $i = ", $i * $i;
    }

    is( $i, 'cow', 'Lexical variable not overwritten in outer scope' );

=end programlisting

=head4 Iteration and Aliasing

X<iteration aliasing>
X<aliasing>
X<aliasing; foreach>
X<aliasing; iteration>

This type of iteration performs I<aliasing> of the iterator variable to the
values in the iteration.  Thus you can modify modifiable values during
iteration:

=begin programlisting

    my @nums = 1 .. 10;

    $_ **= 2 for @nums;

    is( $nums[0],   1, '1 * 1 is 1' );
    is( $nums[1],   4, '2 * 2 is 4' );

    ...

    is( $nums[9], 100, '10 * 10 is 100' );

=end programlisting

This aliasing also works with the block style foreach loop:

=begin programlisting

    for my $num (@nums)
    {
        $num **= 2;
    }

=end programlisting

... as well as iteration with the topic variable:


=begin programlisting

    for (@nums)
    {
        $_ **= 2;
    }

=end programlisting

This aliasing occurs even if you do not redeclare the iteration variable as a
lexical:

=begin programlisting

    my $i = 'horse';

    for $i (1 .. 10)
    {
        say "$i * $i = ", $i * $i;
    }

    is( $i, 'horse', 'Lexical variable still not overwritten in outer scope' );

=end programlisting

=head4 Iteration and Scoping

X<iterator scoping>
X<scope; iterator>

Iterator scoping with the topic variable provides one common source of
confusion.  In this case, C<some_function()> modifies C<$_> on purpose.  If
C<some_function()> called other code which modified C<$_> without explicitly
localizing it, the iterated value in C<@values> would change.  Debugging this
can be troublesome:

=begin programlisting

    for (@values)
    {
        some_function();
    }

    sub some_function
    {
        s/foo/bar/;
    }

=end programlisting

To avoid this situation, you may lexicalize the topic variable with C<my $_>:

=begin programlisting

    sub some_function_called_later
    {
        # was $_ = shift;
        B<my> $_ = shift;

        s/foo/bar/;
        s/baz/quux/;

        return $_;
    }

=end programlisting

It's often better practice to use a named iteration variable however.

=head4 The C-Style For Loop

X<for loop>

The I<for-style loop> allows the programmer to manage iteration conditions
manually:

=begin programlisting

    for (my $i = 0; $i <= 10; ++$i)
    {
        say "$i * $i = ", $i * $i;
    }

=end programlisting

Note that you must assign to an iteration variable manually; there is no
default assignment to the topic variable.  This implies that there is no
implicit aliasing behavior either.  Though the scope of any declared lexical
variable is to the body of the block, a variable not declared explicitly in the
iteration control section of this construct will overwrite its contents:

=begin programlisting

    my $i = 'pig';

    for ($i = 0; $i <= 10; ++$i)
    {
        say "$i * $i = ", $i * $i;
    }

    isnt( $i, 'pig', '$i overwritten with a number' );

=end programlisting

This loop has three subexpressions in its looping construct; all three are
optional.  The first subexpression is an initialization section.  It executes
once, before the first execution of the loop body.  The second subexpression is
the conditional comparison subexpression.  Perl evaluates this subexpression
before each iteration of the loop body.  When the subexpression evaluates to a
true value, the loop iteration proceeds.  When the subexpression evaluates to a
false value, the loop iteration stops.  The final subexpression executes after
each iteration of the loop body.

This may be more obvious with an example:

=begin programlisting

    # declared outside to avoid declaration in conditional
    my $i;

    for (
        # loop initialization subexpression
        say 'Initializing' and $i = 0;

        # conditional comparison subexpression
        say "Iteration: $i" and $i < 10;

        # iteration ending subexpression
        say 'Incrementing $i' and $i++
    )
    {
        say "$i * $i = ", $i * $i;
    }

=end programlisting

=begin sidebar

Note the lack of a trailing semicolon at the iteration ending subexpression as
well as the use of the low-precedence C<and>; this syntax is surprisingly
finicky.

=end sidebar

When possible, prefer the C<foreach> style loop to the C<for> loop.

=head4 While and Until

X<while loop>
X<loops; while>

Iteration also evaluates the iteration condition in a boolean context.  This is
most obvious when using a I<while> loop; this style of loop continues until the
loop conditional expression evaluates to a boolean false value.  An infinite
loop is:

=begin programlisting

    while (1) { ... }

=end programlisting

This is different the iteration of a foreach-style loop, as this code is also
an infinite loop:

=begin programlisting

    while (@values)
    {
        say $values[0];
    }

=end programlisting

X<destructive update>

The closest equivalent of a C<while> loop to C<foreach> iteration is this
example.  Beware that it performs a I<destructive update> of the C<@values>
array; it modifies the array with each loop iteration:

=begin programlisting

    while (my $value = shift @values)
    {
        say $value;
    }

=end programlisting

X<until loop>
X<loops; until>

The I<until> loop performs the opposite test as the C<while> loop.  Iteration
continues while the loop conditional expression evaluates to false:

=begin programlisting

    until ($finished_running)
    {
        ...
    }

=end programlisting

Both C<while> and C<until> have postfix forms.

The canonical use of the C<while> loop is iterating over input from a
filehandle:

=begin programlisting

    open my $fh, '<', $file
        or die "Cannot read from '$file': $!\n";

    while (<$fh>)
    {
        ...
    }

=end programlisting

Perl 5 interprets this C<while> loop as if you had written:

=begin programlisting

    while (defined($_ = <$fh>))
    {
        ...
    }

=end programlisting

Otherwise, any line read from the filehandle which evaluated to false in a
scalar context -- a blank line, for example, or a line which contained only the
character C<0> -- would end the loop.  The C<readline> operator returns an
undefined value only when it has finished reading lines from the file.

=begin sidebar

One common mistake is to forget to remove the line-ending characters from each
line; use the C<chomp> keyword to do so.

=end sidebar

C<while> and C<until> have postfix forms as well.  An infinite loop in Perl 5
is:

=begin programlisting

    1 while 1;

=end programlisting

Any single expression is suitable for a postfix C<while> or C<until>, such as
the classic "Hello, world!" example from 8-bit computers of the early 1980s:

=begin programlisting

    print "Hello, world!  " while 1;

=end programlisting

A simple event loop for a GUI program or network server may be:

=begin programlisting

    $server->dispatch_results() until $should_shutdown;

=end programlisting

X<do; looping>
X<looping; do>

For more complex expressions, use a C<do> block:

=begin programlisting

    do
    {
        say 'What is your name?';
        my $name = <>;
        chomp $name;
        say "Hello, $name!" if $name;
    } until (eof);

=end programlisting

Perl considers the C<do> block itself a single expression, but it can contain
several expressions on its own.  Unlike the C<while> loop's block form, the
C<do> block with a postfix C<while> or C<until> will execute its body at least
once.  This characteristic can be useful, but this construct is less common
than the other loop forms.

=head4 Loops within Loops

X<nested loops>
X<loops; nested>

You may nest loops:

=begin programlisting

    for my $suit (@suits)
    {
        for my $values (@card_values)
        {
            ...
        }
    }

=end programlisting

In this case, explicitly declaring named variables is essential to
maintainability; the potential for confusion as to the scoping of iterator
variables is too great otherwise -- especially if one loop uses the topic
variable as its iteration variable.

A common mistake with nesting C<foreach> and C<while> loops is that it is easy
to exhaust a filehandle with a C<while> loop:

=begin programlisting

    open my $fh, '<', $some_file
        or die "Cannot read '$some_file': $!\n";

    for my $prefix (@prefixes)
    {
        # DO NOT USE; likely buggy code
        while (<$fh>)
        {
            say $prefix, $_;
        }
    }

=end programlisting

Opening the filehandle outside of the C<for> loop leaves the file position
unchanged between each completion of the C<while> loop.  You may re-open the
file inside the C<for> loop (simple to understand, but not always a good use of
system resources), slurp the entire file into memory (which may not work if the
file is large), or C<seek> the filehandle back to the beginning of the file for
each iteration (often the best solution).

=head4 Loop Control

X<loop control>
X<next>
X<break>
X<last>
X<labels>

Sometimes you need to break out of a loop before you have exhausted the
iteration condition.  You may use Perl 5's standard control flow -- exceptions
and C<return>.  You may also use I<loop control statements>.

The I<next> statement restarts the next iteration of the loop.  Use it when
you've done all you need to in the current iteration.  Thus to loop over lines
in a file but skip everything that looks like a comment -- that starts with the
comment character C<#> -- you might write:

=begin programlisting

    while (<$fh>)
    {
        next if /\A#/;
        ...
    }

=end programlisting

The I<last> statement ends the loop iteration immediately.  Thus to finish
processing a file once you've seen the ending delimiter, you might write:

=begin programlisting

    while (<$fh>)
    {
        next if /\A#/;
        last if /\A__END__/
        ...
    }

=end programlisting

X<labels>
X<loops; labels>

Nested loops can make the use of these loop control statements ambiguous.  In
those cases, a I<loop label> can disambiguate:

=begin programlisting

    OUTER:
    while (<$fh>)
    {
        chomp;

        INNER:
        for my $prefix (@prefixes)
        {
            next OUTER unless $prefix;
            say "$prefix: $_";
        }
    }

=end programlisting

There are often better options than complex nested loops, however; consider
extracting the inner loop into its own function for clarity.

=head4 Given/When

X<given>

The C<given> construct is a feature new to Perl 5.10.  It assigns the value of
an expression to the topic variable and introduces a block:

=begin programlisting

    given ($name)
    {
        ...
    }

=end programlisting

Unlike C<for>, it does not iterate over an aggregate; it evaluates its value in
scalar context.

Assignment to the topic variable always occurs:

=begin programlisting

    given (my $username = find_user())
    {
        is( $username, $_, 'topic assignment happens automatically' );
    }

=end programlisting

C<given> also lexicalizes the topic variable to prevent accidental
modification:

=begin programlisting

    given ('mouse')
    {
        say;
        mouse_to_man( $_ );
        say;
    }

    sub mouse_to_man
    {
        $_ = shift;
        s/mouse/man/;
    }

=end programlisting

X<when>

By itself, this feature may seem less than useful.  In combination with
C<when>, it is very useful.  C<given> topicalizes a value.  Within the
associated block, multiple C<when> statements match the topic against
expressions using I<smart-match> semantics.  Thus you might code a Rock, Paper, Scissors game:

=begin programlisting

    my @options = ( \&rock, \&paper, \&scissors );

    do
    {
        say "Rock, Paper, Scissors!  Pick one: ";
        chomp( my $user = <STDIN> );
        my $computer_match = $options[ rand @options ];
        $computer_match->( lc( $user ) );
    } until (eof);

    sub rock
    {
        print "I chose rock.  ";

        given (shift)
        {
            when (/paper/)    { say 'You win!' };
            when (/rock/)     { say 'We tie!'  };
            when (/scissors/) { say 'I win!'   };
            default           { say 'I don't understand your move' };
        }
    }

    sub paper
    {
        print "I chose paper.  ";

        given (shift)
        {
            when (/paper/)    { say 'We tie!'  };
            when (/rock/)     { say 'I win!'   };
            when (/scissors/) { say 'You win!' };
            default           { say 'I don't understand your move' };
        }
    }

    sub scissors
    {
        print "I chose scissors.  ";

        given (shift)
        {
            when (/paper/)    { say 'I win!'   };
            when (/rock/)     { say 'You win!' };
            when (/scissors/) { say 'We tie!'  };
            default           { say 'I don't understand your move' };
        }
    }

=end programlisting

Perl executes the C<default> rule when none of the other conditions match.

=begin sidebar

The CPAN module C<MooseX::MultiMethods> demonstrates another technique which
reduces this code further.

=end sidebar

The C<when> construct is even more powerful; it can match against many other
types of expressions including scalars, aggregates, references, arbitrary
comparison expressions, and even code references.  The "Smart matching in
detail" section of the I<perlsyn> perldoc provides a useful table of all
possible match types.  See the L<smart match> section for more details.

=head4 Tailcalls

X<tailcalls>
X<goto>
X<optimization; tailcalls>

A common optimization in certain programming language is optimizing tailcalls.
A tailcall occurs when the last expression within a subroutine is a call to
another subroutine -- the return value of the outer subroutine is the return
value of the inner subroutine:

=begin programlisting

    sub log_and_greet_person
    {
        my $name = shift;
        log( "Greeting $name" );

        return greet_person( $name );
    }

=end programlisting

In this circumstance, returning from C<greet_person()> directly to the caller
of C<log_and_greet_person()> is more efficient than returning to
C<log_and_greet_person()> and immediately returning I<from>
C<log_and_greet_person()>.  Returning directly from C<greet_person()> to the
caller of C<log_and_greet_person()> is a tailcall optimization.

Unfortunately, Perl 5 cannot perform this optimization automatically.

Fortunately, you can perform it manually.

=begin sidebar

Why would you want to do this?  Heavily recursive code, especially mutually
recursive code, can quickly consume a lot of memory.  Reducing the memory
needed for internal bookkeeping of control flow can make otherwise expensive
algorithms tractable.

=end sidebar

=for author

Check Ruslan Zakirov's tailcall module for maturity and applicability here; it
won't be core, but it may be worth mentioning.

=end for
