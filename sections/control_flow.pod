=head1 Control Flow

Z<control_flow>

X<control flow>

Perl's basic I<control flow> is straightforward.  Program execution starts at
the beginning (the first line of the file executed) and continues to the end:

=begin programlisting

    say 'At start';
    say 'In middle';
    say 'At end';

=end programlisting

X<control flow directives>

Most programs need more complex control flow.  Perl's I<control flow
directives> change the order of execution--what happens next in the
program--depending on the values of arbitrarily complex expressions.

=head2 Branching Directives

X<if>
X<control flow directives; if>
X<postfix if>
X<postfix expressions; if>

The C<if> directive evaluates a conditional expression and performs the
associated action only when the conditional expression evaluates to a true
value:

=begin programlisting

    say 'Hello, Bob!' if $name eq 'Bob';

=end programlisting

This postfix form is useful for simple expressions.  A block form groups
multiple expressions into a single unit:

=begin programlisting

    if ($name eq 'Bob')
    {
        say 'Hello, Bob!';
        found_bob();
    }

=end programlisting

Note that the postfix form does not I<require> parentheses around its
condition, while the block form does.  The conditional expression may also be
complex:

=begin programlisting

    if ($name eq 'Bob' && not greeted_bob())
    {
        say 'Hello, Bob!';
        found_bob();
    }

=end programlisting

... though in this case, parenthesization of the expression in postfix form may
add clarityN<It may also argue against using the postfix form.>:

=begin programlisting

    greet_bob() if ($name eq 'Bob' && not greeted_bob());

=end programlisting

X<unless>
X<control flow directives; unless>
X<postfix unless>
X<postfix expressions; unless>

The C<unless> directive is a negated form of C<if>.  Perl will perform the
requested action when the conditional expression evaluates to I<false>:

=begin programlisting

    say "You're no Bob!" unless $name eq 'Bob';

=end programlisting

Like C<if>, C<unless> also has a block form.  Unlike C<if>, the block form of
C<unless> is much rarer than its postfix form:

=begin programlisting

    unless (is_leap_year() and is_full_moon())
    {
        frolic();
        gambol();
    }

=end programlisting

C<unless> works very well for postfix conditionals, especially parameter
validation in functions (L<postfix_parameter_validation>):

=begin programlisting

    sub frolic
    {
        return unless @_;

        for my $chant (@_)
        {
            ...
        }
    }

=end programlisting

C<unless> can be difficult to read with multiple conditions; this is one reason
it appears rarely in its block form.

X<else>
X<control flow directives; else>

The block forms of C<if> and C<unless> both work with the C<else> directive,
which provides code to run when the conditional expression does not evaluate to
true (for C<if>) or false (for C<unless>):

=begin programlisting

    if ($name eq 'Bob')
    {
        say 'Hi, Bob!';
        greet_user();
    }
    else
    {
        say "I don't know you.";
        shun_user();
    }

=end programlisting

C<else> blocks allow you to rewrite C<if> and C<unless> conditionals in terms
of each other:

=begin programlisting

    B<unless> ($name eq 'Bob')
    {
        say "I don't know you.";
        shun_user();
    }
    else
    {
        say 'Hi, Bob!';
        greet_user();
    }

=end programlisting

If you read the previous example out loud, you may notice the awkward
pseudocode phrasing: "Unless this name is Bob, do this.  Otherwise, do
something else."  The implied double negative can be confusing.  Perl provides
both C<if> and C<unless> to allow you to phrase your conditionals in the most
natural and readable way.  Likewise, you can choose between positive and
negative assertions with regard to the comparison operators you use:

=begin programlisting

    if ($name B<ne> 'Bob')
    {
        say "I don't know you.";
        shun_user();
    }
    else
    {
        say 'Hi, Bob!';
        greet_user();
    }

=end programlisting

The double negative implied by the presence of the C<else> block argues against
this particular phrasing.

X<elsif>
X<control flow directives; elsif>

One or more C<elsif> directives may follow an C<if> block form and may precede
any single C<else>.  You may use as many C<elsif> blocks as you like, but you
may not change the order in which the block types appear:

=begin programlisting

    if ($name eq 'Bob')
    {
        say 'Hi, Bob!';
        greet_user();
    }
    elsif ($name eq 'Jim')
    {
        say 'Hi, Jim!';
        greet_user();
    }
    else
    {
        say "You're not my uncle.";
        shun_user();
    }

=end programlisting

You may also use the C<elsif> block with an C<unless> chain, but the resulting
code may be unclear.  There is no C<elseunless>.

There is no C<else if> constructN<Larry prefers C<elsif> for aesthetic reasons,
as well the prior art of the Ada programming language.>, so this code contains
a syntax error:

=begin programlisting

    if ($name eq 'Rick')
    {
        say 'Hi, cousin!';
    }

    # warning; syntax error
    else if ($name eq 'Kristen')
    {
        say 'Hi, cousin-in-law!';
    }

=end programlisting

=head2 The Ternary Conditional Operator

X<ternary conditional>
X<control flow directives; ternary conditional>

The I<ternary conditional> operator offers an alternate approach to control
flow.  It evaluates a conditional expression and evaluates to one of two
different results:

=begin programlisting

    my $time_suffix = after_noon($time) ? 'morning' : 'afternoon';

=end programlisting

The conditional expression precedes the question mark character (C<?>) and the
colon character (C<:>) separates the alternatives.  The alternatives are
literals or (parenthesized) expressions of arbitrary complexity, including
other ternary conditional expressions, though readability may suffer.

=begin sidebar

An interesting, though obscure, idiom is to use the ternary conditional to
select between alternative I<variables>, not only values:

=begin programlisting

    push @{ rand() > 0.5 ? \@red_team : \@blue_team }, Player->new();

=end programlisting

Again, weigh the benefits of clarity versus the benefits of conciseness.

=end sidebar

=head3 Short Circuiting

X<short circuiting behavior>
X<short circuiting>

Perl performs a type of behavior known as I<short-circuiting> when it
encounters complex expressions--expressions composed of multiple evaluated
expressions.  If Perl can determine that a complex expression would succeed or
fail as a whole without evaluating every subexpression, it will not evaluate
subsequent subexpressions.  This is most obvious with an example:

=begin programlisting

    say "Both true!" if ok(1, 'first subexpression')
                     && ok(1, 'second subexpression');

=end programlisting

=begin sidebar

The return value of C<ok()> (L<testing>) is the boolean value obtained by
evaluating the first argument.

=end sidebar

This example prints:

=begin screen

    ok 1 - first subexpression
    ok 2 - first subexpression
    Both true!

=end screen

When the first subexpression--the first call to C<ok>--evaluates to true, Perl
must evaluate the second subexpression.  When the first subexpression evaluates
to false, the entire expression cannot succeed, and there is no need to check
subsequent subexpressions:

=begin programlisting

    say "Both true!" if ok(0, 'first subexpression')
                     && ok(1, 'second subexpression');

=end programlisting

This example prints:

=begin screen

    not ok 1 - first subexpression

=end screen

Even though the second subexpression would obviously succeed, Perl never
evaluates it.  The logic is similar for a complex conditional expression where
either subexpression must be true for the conditional as a whole to succeed:

=begin programlisting

    say "Either true!" if ok(1, 'first subexpression')
                       || ok(1, 'second subexpression');

=end programlisting

This example prints:

=begin screen

    ok 1 - first subexpression
    Either true!

=end screen

Again, with the success of the first subexpression, Perl can avoid evaluating
the second subexpression.  If the first subexpression were false, the result of
evaluating the second subexpression would dictate the result of evaluating the
entire expression.

Besides allowing you to avoid potentially expensive computations, short
circuiting can help you to avoid errors and warnings:

=begin programlisting

    if (exists $barbeque{pork} and $barbeque{pork} eq 'shoulder') { ... }

=end programlisting


=head2 Context for Conditional Directives

X<context; conditional>
X<truth>
X<boolean truth>
X<true value>
X<false value>

The conditional directives--C<if>, C<unless>, and the ternary conditional
operator--all evaluate an expression in boolean context
(L<context_philosophy>).  As comparison operators such as C<eq>, C<==>, C<ne>,
and C<!=> all produce boolean results when evaluated, Perl coerces the results
of other expressions--including variables and values--into boolean forms.
Empty hashes and arrays evaluate to false.

Perl 5 has no single true value, nor a single false value.  Any number that
evaluates to 0 is false.  This includes C<0>, C<0.0>, C<0e0>, C<0x0>, and so
on.  The empty string (C<''>) and C<"0"> evaluate to false, but the strings
C<"0.0">, C<"0e0">, and so on do not.  The idiom C<"0 but true"> evaluates to 0
in numeric context but evaluates to true, thanks to its string contents.  Both
the empty list and C<undef> evaluate to false.  Empty arrays and hashes return
the number 0 in scalar context, so they evaluate to false in boolean context.

An array which contains a single element--even C<undef>--evaluates to true in
boolean context.  A hash which contains any elements--even a key and a value of
C<undef>--evaluates to true in boolean context.

=begin sidebar

The C<Want> module available from the CPAN allows you to detect boolean context
within your own functions.  The core C<overloading> pragma (L<overloading>,
L<pragmas>) allows you to specify what your own data types produce when
evaluated in a boolean context.

=end sidebar

=head2 Looping Directives

Z<looping_directives>

Perl also provides several directives for looping and iteration.

X<foreach>
X<for>
X<looping directives; for>
X<looping directives; foreach>

The I<foreach>-style loop evaluates an expression which produces a list and
executes a statement or block until it has consumed that list:

=begin programlisting

    foreach (1 .. 10)
    {
        say "$_ * $_ = ", $_ * $_;
    }

=end programlisting

This example uses the range operator to produce a list of integers from one to
ten inclusive.  The C<foreach> directive loops over them, setting the topic
variable (C<$_>; see L<default_scalar_variable>) to each in turn.  Perl
executes the block for each integer and prints the squares of the integers.

=begin sidebar

Perl treats the keywords C<foreach> and C<for> interchangeably.  The remainder
of the syntax of the loop determines the behavior of the loop.  Though
experienced Perl programmers tend to refer to the loop with automatic iteration
as a C<foreach> loop, you can use C<for> safely and clearly any place you might
want to use C<foreach>.

=end sidebar

Like C<if> and C<unless>, the C<for> loop has a postfix form:

=begin programlisting

    say "$_ * $_ = ", $_ * $_ for 1 .. 10;

=end programlisting

Similar suggestions apply for clarity and complexity.

You may provide a variable to which to assign the values of the expression in
place of the topic variable:

=begin programlisting

    for my $i (1 .. 10)
    {
        say "$i * $i = ", $i * $i;
    }

=end programlisting

If you do so, Perl will not set the topic variable (C<$_>) to the iterated
values.  Note also that the scope of the variable C<$i> is only valid I<within>
the loop.  If you have declared a lexical C<$i> in an outer scope, that value
will remain outside the loop:

=begin programlisting

    my $i = 'cow';

    for my $i (1 .. 10)
    {
        say "$i * $i = ", $i * $i;
    }

    is( $i, 'cow', 'Lexical variable not overwritten in outer scope' );

=end programlisting

This localization occurs even if you do not redeclare the iteration variable as
a lexical:

=begin programlisting

    my $i = 'horse';

    for $i (1 .. 10)
    {
        say "$i * $i = ", $i * $i;
    }

    is( $i, 'horse', 'Lexical variable still not overwritten in outer scope' );

=end programlisting

=head2 Iteration and Aliasing

X<iteration aliasing>
X<aliasing>
X<aliasing; foreach>
X<aliasing; iteration>

The C<for> loop performs I<aliasing> of the iterator variable to the values in
the iteration such that you can modify values in place during iteration:

=begin programlisting

    my @nums = 1 .. 10;

    $_ **= 2 for @nums;

    is( $nums[0], 1, '1 * 1 is 1' );
    is( $nums[1], 4, '2 * 2 is 4' );

    ...

    is( $nums[9], 100, '10 * 10 is 100' );

=end programlisting

This aliasing also works with the block style C<foreach> loop:

=begin programlisting

    for my $num (@nums)
    {
        $num **= 2;
    }

=end programlisting

... as well as iteration with the topic variable:

=begin programlisting

    for (@nums)
    {
        $_ **= 2;
    }

=end programlisting

You cannot use aliasing to modify I<constant> values, however:

=begin programlisting

    lc for qw( Huey Dewey Louie );

=end programlisting

... as this will throw an exception about modification of read-only values.
There's little point in doing so anyhow.

You may occasionally see the use of C<for> with a single scalar variable to
alias C<$_> to the variable:

=begin programlisting

    for ($user_input)
    {
        s/(\w)/\\$1/g;  # escape non-word characters
        s/^\s*|\s$/g;   # trim whitespace
    }

=end programlisting

=head2 Iteration and Scoping

X<iterator scoping>
X<scope; iterator>
X<my $_>
X<$_; lexical>

Iterator scoping with the topic variable provides one common source of
confusion.  In this case, C<some_function()> modifies C<$_> on purpose.  If
C<some_function()> called other code which modified C<$_> without explicitly
localizing C<$_>, the iterated value in C<@values> would change.  Debugging
this can be troublesome:

=begin programlisting

    for (@values)
    {
        some_function();
    }

    sub some_function
    {
        s/foo/bar/;
    }

=end programlisting

If you I<must> use C<$_> rather than a named variable, lexicalize the topic
variable with C<my $_>:

=begin programlisting

    sub some_function_called_later
    {
        # was $_ = shift;
        B<my> $_ = shift;

        s/foo/bar/;
        s/baz/quux/;

        return $_;
    }

=end programlisting

Using a named iteration variable also prevents undesired aliasing behavior
through C<$_>.

=head2 The C-Style For Loop

X<for loop>

The C-style I<for loop> allows the programmer to manage iteration manually:

=begin programlisting

    for (my $i = 0; $i <= 10; $i += 2)
    {
        say "$i * $i = ", $i * $i;
    }

=end programlisting

You must assign to an iteration variable manually, as there is no default
assignment to the topic variable.  Consequently there is no aliasing behavior
either.  Though the scope of any declared lexical variable is to the body of
the block, a variable I<not> declared explicitly in the iteration control
section of this construct I<will> overwrite its contents:

=begin programlisting

    my $i = 'pig';

    for ($i = 0; $i <= 10; $i += 2)
    {
        say "$i * $i = ", $i * $i;
    }

    isnt( $i, 'pig', '$i overwritten with a number' );

=end programlisting

This loop has three subexpressions in its looping construct.  The first
subexpression is an initialization section.  It executes once, before the first
execution of the loop body.  The second subexpression is the conditional
comparison subexpression.  Perl evaluates this subexpression before each
iteration of the loop body.  When the subexpression evaluates to a true value,
the loop iteration proceeds.  When the subexpression evaluates to a false
value, the loop iteration stops.  The final subexpression executes after each
iteration of the loop body.

This may be more obvious with an example:

=begin programlisting

    # declared outside to avoid declaration in conditional
    my $i;

    for (
        # loop initialization subexpression
        say 'Initializing' and $i = 0;

        # conditional comparison subexpression
        say "Iteration: $i" and $i < 10;

        # iteration ending subexpression
        say 'Incrementing $i' and $i++
    )
    {
        say "$i * $i = ", $i * $i;
    }

=end programlisting

Note the lack of a trailing semicolon at the iteration ending subexpression as
well as the use of the low-precedence C<and>; this syntax is surprisingly
finicky.  When possible, prefer the C<foreach> style loop to the C<for> loop.

All three subexpressions are optional.  You may write an infinite loop with:

=begin programlisting

    for (;;) { ... }

=end programlisting

=head2 While and Until

X<while loop>
X<loops; while>

A I<while> loop continues until the loop conditional expression evaluates to a
boolean false value.  An infinite loop is much clearer when written:

=begin programlisting

    while (1) { ... }

=end programlisting

The means of evaluating the end of iteration condition in a C<while> loop
differs from a C<foreach> loop in that the evaluation of the expression itself
does not produce any side effects.  If C<@values> has one or more elements,
this code is also an infinite loop:

=begin programlisting

    while (@values)
    {
        say $values[0];
    }

=end programlisting

X<destructive update>

To prevent such an infinite C<while> loop, you must perform a I<destructive
update> of the C<@values> array by modifying the array with each loop
iteration:

=begin programlisting

    while (my $value = shift @values)
    {
        say $value;
    }

=end programlisting

X<until loop>
X<loops; until>

The I<until> loop performs the opposite test as the C<while> loop.  Iteration
continues while the loop conditional expression evaluates to false:

=begin programlisting

    until ($finished_running)
    {
        ...
    }

=end programlisting

The canonical use of the C<while> loop is to iterate over input from a
filehandle:

=begin programlisting

    use autodie;

    open my $fh, '<', $file;

    while (<$fh>)
    {
        ...
    }

=end programlisting

Perl 5 interprets this C<while> loop as if you had written:

=begin programlisting

    while (defined($_ = <$fh>))
    {
        ...
    }

=end programlisting

Without the implicit C<defined>, any line read from the filehandle which
evaluated to false in a scalar context--a blank line or a line which contained
only the character C<0>--would end the loop.  The C<readline> (C<< <> >>)
operator returns an undefined value only when it has finished reading lines from
the file.

=begin sidebar

One common mistake is to forget to remove the line-ending characters from each
line; use the C<chomp> keyword to do so.

=end sidebar

Both C<while> and C<until> have postfix forms.  The simplest infinite loop in
Perl 5 is:

=begin programlisting

    1 while 1;

=end programlisting

Any single expression is suitable for a postfix C<while> or C<until>, such as
the classic "Hello, world!" example from 8-bit computers of the early 1980s:

=begin programlisting

    print "Hello, world!  " while 1;

=end programlisting

Infinite loops may seem silly, but they're actually quite useful.  A simple
event loop for a GUI program or network server may be:

=begin programlisting

    $server->dispatch_results() until $should_shutdown;

=end programlisting

X<do; looping>
X<looping; do>

For more complex expressions, use a C<do> block:

=begin programlisting

    do
    {
        say 'What is your name?';
        my $name = <>;
        chomp $name;
        say "Hello, $name!" if $name;
    } until (eof);

=end programlisting

For the purposes of parsing, a C<do> block is itself a single expression,
though it can contain several expressions.  Unlike the C<while> loop's block
form, the C<do> block with a postfix C<while> or C<until> will execute its body
at least once.  This construct is less common than the other loop forms, but no
less powerful.

=head2 Loops within Loops

X<nested loops>
X<loops; nested>

You may nest loops within other loops:

=begin programlisting

    for my $suit (@suits)
    {
        for my $values (@card_values)
        {
            ...
        }
    }

=end programlisting

In this case, explicitly declaring named variables is essential to
maintainability.  The potential for confusion as to the scoping of iterator
variables is too great when using the topic variable.

A common mistake with nesting C<foreach> and C<while> loops is that it is easy
to exhaust a filehandle with a C<while> loop:

=begin programlisting

    use autodie;

    open my $fh, '<', $some_file;

    for my $prefix (@prefixes)
    {
        # DO NOT USE; likely buggy code
        while (<$fh>)
        {
            say $prefix, $_;
        }
    }

=end programlisting

Opening the filehandle outside of the C<for> loop leaves the file position
unchanged between each iteration of the C<for> loop.  On its second iteration,
the C<while> loop will have nothing to read and will not execute.  To solve
this problem, you may re-open the file inside the C<for> loop (simple to
understand, but not always a good use of system resources), slurp the entire
file into memory (which may not work if the file is large), or C<seek> the
filehandle back to the beginning of the file for each iteration (an often
overlooked option):

=begin programlisting

    use autodie;

    open my $fh, '<', $some_file;

    for my $prefix (@prefixes)
    {
        while (<$fh>)
        {
            say $prefix, $_;
        }

        seek $fh, 0, 0;
    }

=end programlisting

=head2 Loop Control

X<loop control>

Sometimes you need to break out of a loop before you have exhausted the
iteration conditions.  Perl 5's standard control mechanisms--exceptions and
C<return>--work, but you may also use I<loop control> statements.

X<next>

The I<next> statement restarts the loop at its next iteration.  Use it when
you've done all you need to in the current iteration.  To loop over lines in a
file but skip everything that looks like a comment, one which starts with the
character C<#>, you might write:

=begin programlisting

    while (<$fh>)
    {
        B<next> if /\A#/;
        ...
    }

=end programlisting

X<last>

The I<last> statement ends the loop immediately.  To finish processing a file
once you've seen the ending delimiter, you might write:

=begin programlisting

    while (<$fh>)
    {
        next if /\A#/;
        B<last> if /\A__END__/
        ...
    }

=end programlisting

X<redo>

The I<redo> statement restarts the current iteration without evaluating the
conditional again.  This can be useful in those few cases where you want to
modify the line you've read in place, then start processing over from the
beginning without clobbering it with another line.  For example, you could
implement a silly file parser that joins lines which end with a backslash with:

=begin programlisting

    while (my $line = <$fh>)
    {
        chomp $line;

        # match backslash at the end of a line
        if ($line =~ s{\\$}{})
        {
            $line .= <$fh>;
            redo;
        }

        ...
    }

=end programlisting

... though that's a contrived example.

X<labels>
X<loops; labels>

Nested loops can make the use of these loop control statements ambiguous.  In
those cases, a I<loop label> can disambiguate:

=begin programlisting

    OUTER:
    while (<$fh>)
    {
        chomp;

        INNER:
        for my $prefix (@prefixes)
        {
            next OUTER unless $prefix;
            say "$prefix: $_";
        }
    }

=end programlisting

If you find yourself nesting loops such that you need labels to manage control
flow, consider simplifying your code: perhaps extracting inner loops into
functions for clarity.

=head2 Continue

X<continue>

The C<continue> construct behaves like the third subexpression of a C<for>
loop; Perl executes its block for each iteration of the loop, even when you
exit an iteration with C<next>.  You may use it with a C<while>, C<until>,
C<with>, or C<for> loop.  Examples of C<continue> are rare, but it's useful any
time you want to guarantee that something occurs for every iteration of the loop
regardless of how that iteration ends:

=begin programlisting

    while ($i < 10 )
    {
        next unless $i % 2;
        say $i;
    }
    continue
    {
        say 'Continuing...';
        $i++;
    }

=end programlisting

=head2 Given/When

Z<given_when>

X<given>

The C<given> construct is a feature new to Perl 5.10.  It assigns the value of
an expression to the topic variable and introduces a block:

=begin programlisting

    given ($name)
    {
        ...
    }

=end programlisting

Unlike C<for>, it does not iterate over an aggregate.  It evaluates its value
in scalar context, and always assigns to the topic variable:

=begin programlisting

    given (my $username = find_user())
    {
        is( $username, $_, 'topic assignment happens automatically' );
    }

=end programlisting

C<given> also lexicalizes the topic variable to prevent accidental
modification:

=begin programlisting

    given ('mouse')
    {
        say;
        mouse_to_man( $_ );
        say;
    }

    sub mouse_to_man
    {
        $_ = shift;
        s/mouse/man/;
    }

=end programlisting

X<when>

X<topicalization>
X<topicalize>

By itself, this feature may seem less than useful.  In combination with
C<when>, it is very useful.  Use C<given> to I<topicalize> a value.  Within the
associated block, multiple C<when> statements match the topic against
expressions using I<smart-match> semantics.  Thus you might code a Rock, Paper,
Scissors game:

=begin programlisting

    my @options = ( \&rock, \&paper, \&scissors );

    do
    {
        say "Rock, Paper, Scissors!  Pick one: ";
        chomp( my $user = <STDIN> );
        my $computer_match = $options[ rand @options ];
        $computer_match->( lc( $user ) );
    } until (eof);

    sub rock
    {
        print "I chose rock.  ";

        given (shift)
        {
            when (/paper/)    { say 'You win!' };
            when (/rock/)     { say 'We tie!'  };
            when (/scissors/) { say 'I win!'   };
            default           { say "I don't understand your move" };
        }
    }

    sub paper
    {
        print "I chose paper.  ";

        given (shift)
        {
            when (/paper/)    { say 'We tie!'  };
            when (/rock/)     { say 'I win!'   };
            when (/scissors/) { say 'You win!' };
            default           { say "I don't understand your move" };
        }
    }

    sub scissors
    {
        print "I chose scissors.  ";

        given (shift)
        {
            when (/paper/)    { say 'I win!'   };
            when (/rock/)     { say 'You win!' };
            when (/scissors/) { say 'We tie!'  };
            default           { say "I don't understand your move" };
        }
    }

=end programlisting

Perl executes the C<default> rule when none of the other conditions match.

=begin sidebar

The CPAN module C<MooseX::MultiMethods> allows another technique to reduce this
code further.

=end sidebar

The C<when> construct is even more powerful; it can match (L<smart_match>)
against many other types of expressions including scalars, aggregates,
references, arbitrary comparison expressions, and even code references.

=head2 Tailcalls

Z<tailcalls>
X<tailcalls>
X<goto>

A I<tailcall> occurs when the last expression within a function is a call to
another function--the return value of the outer function is the return
value of the inner function:

=begin programlisting

    sub log_and_greet_person
    {
        my $name = shift;
        log( "Greeting $name" );

        return greet_person( $name );
    }

=end programlisting

X<optimization; tailcalls>
X<tailcall optimization>

In this circumstance, returning from C<greet_person()> directly to the caller
of C<log_and_greet_person()> is more efficient than returning to
C<log_and_greet_person()> and immediately returning I<from>
C<log_and_greet_person()>.  Returning directly from C<greet_person()> to the
caller of C<log_and_greet_person()> is an optimization known as I<tailcall
optimization>.

Perl 5 will not detect cases where it could perform this optimization
automatically.

=begin sidebar

Heavily recursive code (L<recursion>), especially mutually recursive code, can
quickly consume a lot of memory.  Using tailcalls reduces the memory needed for
internal bookkeeping of control flow, which can make otherwise expensive
algorithms tractable.

=end sidebar
