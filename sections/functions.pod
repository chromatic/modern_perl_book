=head1 Declaring Functions

Z<functions>

X<functions; declaration>
X<builtins; C<sub>>

Use the C<sub> builtin to declare a function:

=begin programlisting

    B<sub> greet_me  { ... }

=end programlisting

Now you can invoke C<greet_me()> from anywhere within your program.

X<functions; forward declaration>

Just as you may I<declare> a lexical variable but leave its value undefined,
you may declare a function without defining it. A I<forward declaration> tells
Perl to record that a named function exists. You may define it later:

=begin programlisting

    sub greet_sun;

=end programlisting

=head1 Invoking Functions

X<functions; invoking>

Use postfix (L<fixity>) parentheses to invoke a named function. Any arguments
to the function may go within the parentheses:

=begin programlisting

    greet_me( 'Jack', 'Tuxie', 'Brad' );
    greet_me( 'Snowy' );
    greet_me();

=end programlisting

While these parentheses are not strictly necessary for these examples--even
with C<strict> enabled--they provide clarity to human readers as well as Perl's
parser. When in doubt, use them.

Function arguments can be arbitrary expressions--including variables and
function calls:

=begin programlisting

    greet_me( $name );
    greet_me( @authors );
    greet_me( %editors );
    greet_me( get_readers() );

=end programlisting

... though Perl's default parameter handling sometimes surprises novices.

=head1 Function Parameters

Z<function_parameters>

X<parameters>
X<functions; parameters>
X<C<@_>>
X<parameters; flattening>

A function receives its parameters in a single array, C<@_>
(L<default_array_variables>). When you invoke a function, Perl I<flattens> all
provided arguments into a single list. The function must either unpack its
parameters into variables or operate on C<@_> directly:

=begin programlisting

    sub greet_one {
        B<my ($name) = @_>;
        say "Hello, $name!";
    }

    sub greet_all {
        say "Hello, B<$_>!" for B<@_>;
    }

=end programlisting

C<@_> behaves as a normal array. Most Perl functions C<shift> off parameters or
use list assignment, but you may also access individual elements by index:

=begin programlisting

    sub greet_one_shift {
        B<my $name = shift>;
        say "Hello, $name!";
    }

    sub greet_two_list_assignment {
        my ($hero, $sidekick) = @_;
        say "Well if it isn't $hero and $sidekick. Welcome!";
    }

    sub greet_one_indexed {
        B<my $name = $_[0]>;
        say "Hello, $name!";

        # or, less clear
        say "Hello, $_[0]!";
    }

=end programlisting

You may also C<unshift>, C<push>, C<pop>, C<splice>, and slice C<@_>. Remember
that the array builtins use C<@_> as the default operand I<within functions>,
so that C<my $name = shift;> works. Take advantage of this idiom.

To access a single scalar parameter from C<@_>, use C<shift>, an index of
C<@_>, or lvalue list context parentheses. Otherwise, Perl will happily
evaluate C<@_> in scalar context for you and assign the number of parameters
passed:

=begin programlisting

    sub bad_greet_one {
        B<my $name = @_>;  # buggy
        say "Hello, $name; you look numeric today!"
    }

=end programlisting

List assignment of multiple parameters is often clearer than multiple lines of
C<shift>. Compare:

=begin programlisting

    my $left_value  = shift;
    my $operation   = shift;
    my $right_value = shift;

=end programlisting

... to:

=begin programlisting

    my ($left_value, $operation, $right_value) = @_;

=end programlisting

The latter is simpler to read. As a side benefit, it has better runtime
performance, though you're unlikely to notice.

Occasionally you may see code which extracts parameters from C<@_> and passes
the rest to another function:

=begin programlisting

    sub delegated_method {
        my $self = B<shift>;
        say 'Calling delegated_method()'

        $self->delegate->delegated_method( B<@_> );
    }

=end programlisting

Use C<shift> when your function needs only a single parameter. Use list
assignment when accessing multiple parameters.

=head2 Real Function Signatures

Perl 5.20 added built-in function signatures as an experimental feature.
"Experimental" means that they may change or even go away in future releases of
Perl, so you need to write two lines of code to enable them to signal that you
accept the possibility of rewriting code. (Neither C<Kavorka> nor
C<Method::Signatures> require this.)

=begin programlisting

    use feature 'signatures';
    no warnings 'experimental::signatures';

=end programlisting

Better yet, you can do both at once with the C<experimental> pragma

=begin programlisting

    use  experimental 'signatures';
    
=end programlisting

which is both shorter and clearer--- a win-win!

With that disclaimer in place, you can now write:

=begin programlisting

    sub greet_one(B<$name>) {
        say "Hello, $name!";
    }

=end programlisting

... which is equivalent to writing:

=begin programlisting

    sub greet_one {
        B<<die "Too many arguments for subroutine" if @_ < 1;>>
        B<<die "Too few arguments for subroutine" if @_ > 1;>>
        B<my $name = shift;>
        say "Hello, $name!";
    }

=end programlisting

You can make C<$name> an optional variable by assigning it a default value:

=begin programlisting

    sub greet_one(B<$name = 'Bruce'>) {
        say "Hello, $name!";
    }

=end programlisting

... in which case writing C<greet_one( 'Bruce' )> and C<greet_one()> will both
ignore Batman's crime-fighting identity.

You may use aggregate arguments at the end of a signature:

=begin programlisting

    sub greet_all(B<$leader, @everyone>) {
        say "Hello, $leader!";
        say "Hi also, $_." for @everyone;
    }

    sub make_nested_hash(B<$name, %pairs>) {
        return { $name => \%pairs };
    }

=end programlisting

... or indicate that a function expects I<no> arguments:

=begin programlisting

    sub no_gifts_please() {
        say 'I have too much stuff already.'
    }

=end programlisting

... which means that you'll get the C<Too many arguments for subroutine>
exception by calling that function with arguments.

These experimental signatures have more features than discussed here. As you
get beyond basic positional parameters, the possibility of incompatible changes
in future versions of Perl increases, however. See C<perldoc perlsub>'s
"Signatures" section for more details, especially in newer versions of Perl.

X<CPAN; C<Method::Signatures>>
X<CPAN; C<Kavorka>>

These experimental signatures aren't your only options. Several CPAN
distributions extend Perl's parameter handling with additional syntax and
options. C<Method::Signatures> works as far back as Perl 5.8. C<Kavorka> works
with Perl 5.14 and newer.

=begin tip Should You Use Signatures?

Despite the experimental nature of function signatures--or the additional
dependencies of the CPAN modules--all of these options can make your code a
little shorter and a little clearer both to read and to write. By all means
experiment with these options to find out what works best for you and your
team. Even sticking with simple positional parameters can improve your work.

=end tip

=head2 Flattening

List flattening into C<@_> happens on the caller side of a function call.
Passing a hash as an argument produces a list of key/value pairs:

=begin programlisting

    my %pet_names_and_types = (
        Lucky   => 'dog',
        Rodney  => 'dog',
        Tuxedo  => 'cat',
        Petunia => 'cat',
        Rosie   => 'dog',
    );

    show_pets( %pet_names_and_types );

    sub show_pets {
        my %pets = @_;

        while (my ($name, $type) = each %pets) {
            say "$name is a $type";
        }
    }

=end programlisting

When Perl flattens C<%pet_names_and_types> into a list, the order of the
key/value pairs from the hash will vary, but the list will always contain a key
immediately followed by its value. Hash assignment inside C<show_pets()> works
the same way as the explicit assignment to C<%pet_names_and_types>.

This flattening is often useful, but beware of mixing scalars with flattened
aggregates in parameter lists. To write a C<show_pets_of_type()> function,
where one parameter is the type of pet to display, pass that type as the
I<first> parameter (or use C<pop> to remove it from the end of C<@_>, if you
like to confuse people):

=begin programlisting

    sub show_pets_by_type {
        B<my ($type, %pets) = @_>;

        while (my ($name, $species) = each %pets) {
            B<next unless $species eq $type;>
            say "$name is a $species";
        }
    }

    my %pet_names_and_types = (
        Lucky   => 'dog',
        Rodney  => 'dog',
        Tuxedo  => 'cat',
        Petunia => 'cat',
        Rosie   => 'dog',
    );

    show_pets_by_type( 'dog',   %pet_names_and_types );
    show_pets_by_type( 'cat',   %pet_names_and_types );
    show_pets_by_type( 'moose', %pet_names_and_types );

=end programlisting

With experimental function signatures, you could write:

=begin programlisting

    sub show_pets_by_type($type, %pets) {
        ...
    }

=end programlisting

=head2 Slurping

Z<parameter_slurping>
X<parameters; slurping>

List assignment with an aggregate is always greedy, so assigning to C<%pets>
I<slurps> all of the remaining values from C<@_>. If the C<$type> parameter
came at the end of C<@_>, Perl would warn about assigning an odd number of
elements to the hash. You I<could> work around that:

=begin programlisting

    sub show_pets_by_type {
        B<my $type = pop;>
        B<my %pets = @_;>

        ...
    }

=end programlisting

... at the expense of clarity. The same principle applies when assigning to an
array as a parameter. Use references (L<references>) to avoid unwanted
aggregate flattening.

=head2 Aliasing

X<parameters; aliasing>
X<functions; aliasing parameters>

C<@_> contains a subtlety; it I<aliases> function arguments. In other words, if
you access C<@_> directly, you can modify the arguments passed to the function:

=begin programlisting

    sub modify_name {
        $_[0] = reverse $_[0];
    }

    my $name = 'Orange';
    modify_name( $name );
    say $name;

    # prints C<egnarO>

=end programlisting

Modify an element of C<@_> directly and you will modify the original argument.
Be cautious and unpack C<@_> rigorously--or document the modification
carefully.

=head1 Functions and Namespaces

Every function has a containing namespace (L<packages>). Functions in an
undeclared namespace--functions not declared within the scope of an explicit
C<package> statement--exist in the C<main> namespace. You may also declare a
function within another namespace by prefixing its name:

=begin programlisting

    sub B<Extensions::Math::>add { ... }

=end programlisting

This will create the namespace as necessary and then declare the function
within it.  Remember that Perl packages are open for modification at any
point--even while your program is running. Perl will issue a warning if you
declare multiple functions with the same name in a single namespace.

Refer to other functions within the same namespace with their short names. Use
a fully-qualified name to invoke a function in another namespace:

=begin programlisting

    package main;

    Extensions::Math::add( $scalar, $vector );

=end programlisting

Remember, functions are I<visible> outside of their own namespaces through
their fully-qualified names. Alternately, you may import names from other
namespaces.

=begin tip Lexical Functions

Perl 5.18 added an experimental feature to declare functions lexically. They're
visible only within lexical scopes after declaration. See the "Lexical
Subroutines" section of C<perldoc perlsub> for more details.

=end tip

=head2 Importing

Z<importing>

X<functions; importing>
X<builtins; C<use>>

When loading a module with the C<use> builtin (L<modules>), Perl automatically
calls a method named C<import()>. Modules can provide their own C<import()>
method which makes some or all defined symbols available to the calling
package. Any arguments after the name of the module in the C<use> statement get
passed to the module's C<import()> method. Thus:

=begin programlisting

    use strict;

=end programlisting

... loads the F<strict.pm> module and calls C<< strict->import() >> with no
arguments, while:

=begin programlisting

    use strict 'refs';
    use strict qw( subs vars );

=end programlisting

... loads the F<strict.pm> module, calls C<< strict->import( 'refs' ) >>, then
calls C<< strict->import( 'subs', vars' ) >>.

C<use> has special behavior with regard to C<import()>, but you may call
C<import()> directly. The C<use> example is equivalent to:

=begin programlisting

    BEGIN {
        require strict;
        strict->import( 'refs' );
        strict->import( qw( subs vars ) );
    }

=end programlisting

The C<use> builtin adds an implicit C<BEGIN> block around these statements so
that the C<import()> call happens I<immediately> after the parser has compiled
the entire C<use> statement. This ensures that the parser knows about any
symbols imported by C<strict> before it compiles the rest of the program.
Otherwise, any functions I<imported> from other modules but not I<declared> in
the current file would look like barewords, and would violate C<strict>, for
example.

Of course, C<strict> is a pragma (L<pragmas>), so it has other effects.

=head1 Reporting Errors

Z<reporting_errors>
X<builtins; C<caller>>

Almost every function is called by another function. Use the C<caller> builtin
to inspect a function's calling context. When passed no arguments, C<caller>
returns a list containing the name of the calling package, the name of the file
containing the call, and the line number of the file on which the call
occurred:

=begin programlisting

    package main;

    main();

    sub main {
        show_call_information();
    }

    sub show_call_information {
        my ($package, $file, $line) = caller();
        say "Called from $package in $file:$line";
    }

=end programlisting

The full call chain is available for inspection. Pass a single integer argument
I<n> to C<caller()> to inspect the caller of the caller of the caller I<n>
times back. Within C<show_call_information()>, C<caller(0)> returns information
about the call from C<main()>. C<caller(1)> returns information about the call
from the start of the program.

This optional argument also tells C<caller> to provide additional return
values, including the name of the function and the context of the call:

=begin programlisting

    sub show_call_information {
        my ($package, $file, $lineB<, $func>) = caller(B<0>);
        say "Called B<$func> from $package in $file:$line";
    }

=end programlisting

X<C<Carp>>
X<C<Carp>; C<croak()>>
X<C<Carp>; C<carp()>>

The standard C<Carp> module uses C<caller> to report errors and throwing
warnings in functions. When used in place of C<die> in library code, C<croak()>
throws an exception from the point of view of its caller. C<carp()> reports a
warning from the file and line number of its caller (L<producing_warnings>).

Use C<caller> (or C<Carp>) when validating parameters or preconditions of a
function to indicate that whatever called the function did so erroneously.

=head2 Validating Arguments

While Perl does its best to do what you mean, it offers few native ways to test
the validity of arguments provided to a function. Evaluate C<@_> in scalar
context to check that the I<number> of parameters passed to a function is
correct:

=begin programlisting

    sub add_numbers {
        croak 'Expected two numbers, received: ' . @_
            unless @_ == 2;

        ...
    }

=end programlisting

This validation reports any parameter count error from the point of view of its
caller, thanks to the use of C<croak>.

X<CPAN; C<Params::Validate>>

Type checking is more difficult, because of Perl's operator-oriented type
conversions (L<context_philosophy>). If you want additional safety of function
parameters, see CPAN modules such as C<Params::Validate> or C<Kavorka>.

=head1 Advanced Functions

Functions are the foundation of many advanced Perl features.

=head2 Context Awareness

X<context>
X<C<wantarray>>
X<builtins; C<wantarray>>

Perl's builtins know whether you've invoked them in void, scalar, or list
context. So too can your functions. The C<wantarray> builtin returns C<undef>
to signify void context, a false value to signify scalar context, and a true
value to signify list context. Yes, it's misnamed; see C<perldoc -f wantarray>
for proof.

=begin programlisting

    sub context_sensitive {
        my $context = wantarray();

        return qw( List context )   if         $context;
        say    'Void context'   unless defined $context;
        return 'Scalar context' unless         $context;
    }

    context_sensitive();
    say my $scalar = context_sensitive();
    say context_sensitive();

=end programlisting

This can be useful for functions which might produce expensive return values to
avoid doing so in void context. Some idiomatic functions return a list in list
context and the first element of the list or an array reference in scalar
context. However, there exists no single best recommendation for the use of
C<wantarray>. Sometimes it's clearer to write separate and unambiguous
functions, such as C<get_all_toppings()> and C<get_next_topping()>.

=begin tip Putting it in Context

X<C<Want>>
X<C<Contextual::Return>>

Robin Houston's C<Want> and Damian Conway's C<Contextual::Return> distributions
from the CPAN offer many possibilities for writing powerful context-aware
interfaces.

=end tip

=head2 Recursion

Z<recursion>
X<recursion>
X<call frame>
X<functions; call frame>

Suppose you want to find an element in a sorted array. You I<could> iterate
through every element of the array individually, looking for the target, but on
average, you'll have to examine half of the elements of the array. Another
approach is to halve the array, pick the element at the midpoint, compare, then
repeat with either the lower or upper half. Divide and conquer. When you run
out of elements to inspect or find the element, stop.

An automated test for this technique could be:

=begin programlisting

    use Test::More;

    my @elements = ( 1, 5, 6, 19, 48, 77, 997, 1025, 7777, 8192, 9999 );

    ok   elem_exists(     1, @elements ), 'found first element in array';
    ok   elem_exists(  9999, @elements ), 'found last element in array';
    ok ! elem_exists(   998, @elements ), 'did not find element not in array';
    ok ! elem_exists(    -1, @elements ), 'did not find element not in array';
    ok ! elem_exists( 10000, @elements ), 'did not find element not in array';

    ok   elem_exists(    77, @elements ), 'found midpoint element';
    ok   elem_exists(    48, @elements ), 'found end of lower half element';
    ok   elem_exists(   997, @elements ), 'found start of upper half element';

    done_testing();

=end programlisting

Recursion is a deceptively simple concept. Every call to a function in Perl
creates a new I<call frame>, an data structure internal to Perl itself which
represents the fact that you've called a function. This call frame includes the
lexical environment of the function's current invocation--the values of all
lexical variables within the function as invoked. Because the storage of the
values of the lexical variables is separate from the function itself, you can
have multiple calls to a function active at the same time. A function can even
call itself, or I<recur>.

To make the previous test pass, write the recursive function C<elem_exists()>:

=begin programlisting

    sub elem_exists {
        my ($item, @array) = @_;

        # break recursion with no elements to search
        return unless @array;

        # bias down with odd number of elements
        my $midpoint = int( (@array / 2) - 0.5 );
        my $miditem  = $array[ $midpoint ];

        # return true if found
        return 1 if $item  == $miditem;

        # return false with only one element
        return   if @array == 1;

        # split the array down and recurse
        return B<elem_exists>(
            $item, @array[0 .. $midpoint]
        ) if $item < $miditem;

        # split the array and recurse
        return B<elem_exists>(
             $item, @array[ $midpoint + 1 .. $#array ]
        );
    }

=end programlisting

Keep in mind that the arguments to the function will be I<different> for every
call, otherwise the function would always behave the same way (it would
continue recursing until the program crashes). That's why the termination
condition is so important.

Every recursive program can be written without recursion, but this
divide-and-conquer approach is an effective way to manage many similar types of
problems. For more information about recursion, iteration, and advanced
function use in Perl the free book I<Higher Order
Perl>N<U<http://hop.perl.plover.com/>> is an excellent reference.

=head2 Lexicals

Every invocation of a function creates its own I<instance> of a lexical scope
represented internally by a call frame. Even though the declaration of
C<elem_exists()> creates a single scope for the lexicals C<$item>, C<@array>,
C<$midpoint>, and C<$miditem>, every I<call> to C<elem_exists()>--even
recursively--stores the values of those lexicals separately.

Not only can C<elem_exists()> call itself, but the lexical variables of each
invocation are safe and separate:

=begin programlisting

    B<use Carp 'cluck';>

    sub elem_exists {
        my ($item, @array) = @_;

        B<cluck "[$item] (@array)";>
        ...
    }

=end programlisting

=head2 Tail Calls

Z<tail_calls>
X<recursion; guard conditions>

One I<drawback> of recursion is that it's easy to write a function which calls
itself infinitely. C<elem_exists()> function has several C<return> statements
for this reason.  Perl offers a helpful C<Deep recursion on subroutine> warning
when it suspects runaway recursion. The limit of 100 recursive calls is
arbitrary, but often useful. Disable this warning with C<no warnings
'recursion'>.

Because each call to a function requires a new call frame and lexical storage
space, highly-recursive code can use more memory than iterative code. I<Tail
call elimination> can help.

A I<tail call> is a call to a function which directly returns that function's
results. These recursive calls to C<elem_exists()>:

=begin programlisting

    # split the array down and recurse
    return B<elem_exists>(
        $item, @array[0 .. $midpoint]
    ) if $item < $miditem;

    # split the array and recurse
    return B<elem_exists>(
         $item, @array[ $midpoint + 1 .. $#array ]
    );

=end programlisting

... are candidates for tail call elimination. This optimization would avoid
returning to the current call and then returning to the parent call. Instead,
it returns to the parent call directly.

X<C<goto>>
X<functions; C<goto>>
X<builtins; C<goto>>
X<spaghetti code>

Perl does not eliminate tail calls automatically, but you can get the same
effect by using a special form of the C<goto> builtin. Unlike the form which
often produces spaghetti code, the C<goto> function form replaces the current
function call with a call to another function. You may use a function by name
or by reference. Manipulate C<@_> to modify the arguments passed to the
replacement function:

=begin programlisting

    # split the array down and recurse
    if ($item < $miditem) {
        @_ = ($item, @array[0 .. $midpoint]);
        B<goto &elem_exists;>
    }

    # split the array up and recurse
    else {
        @_ = ($item, @array[$midpoint + 1 .. $#array] );
        B<goto &elem_exists;>
    }

=end programlisting

Sometimes optimizations are ugly, but if the alternative is highly recursive
code which runs out of memory, embrace the ugly and rejoice in the practical.

=head1 Pitfalls and Misfeatures

X<functions; misfeatures>
X<functions; Perl 4>
X<functions; Perl 1>
X<C<&>; sigil>
X<sigils; C<&>>
X<builtins; C<do>>

Perl still supports old-style invocations of functions, carried over from
ancient versions of Perl. Previous versions of Perl required you to invoke
functions with a leading ampersand (C<&>) character:

=begin programlisting

    # outdated style; avoid
    my $result = B<&>calculate_result( 52 );

    # very outdated; truly avoid
    my $result = B<do &>calculate_result( 42 );

=end programlisting

While the vestigial syntax is visual clutter, the leading ampersand form has
other surprising behaviors. First, it disables any prototype checking. Second,
it I<implicitly> passes the contents of C<@_> unmodified, unless you've
explicitly passed arguments yourself. That unfortunate behavior can be
confusing invisible action at a distance.

A final pitfall comes from leaving the parentheses off of function calls. The
Perl parser uses several heuristics to resolve ambiguous barewords and the
number of parameters passed to a function. Heuristics can be wrong:

=begin programlisting

    # warning; contains a subtle bug
    ok elem_exists 1, @elements, 'found first element';

=end programlisting

The call to C<elem_exists()> will gobble up the test description intended as
the second argument to C<ok()>. Because C<elem_exists()> uses a slurpy second
parameter, this may go unnoticed until Perl produces warnings about comparing a
non-number (the test description, which it cannot convert into a number) with
the element in the array.

While extraneous parentheses can hamper readability, thoughtful use of
parentheses can clarify code to readers and to Perl itself.
