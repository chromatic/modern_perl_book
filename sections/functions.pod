=head1 Declaring Functions

Z<functions>

X<functions; declaration>
X<builtins; C<sub>>

Use the C<sub> builtin to declare a function:

=begin programlisting

    B<sub> greet_me  { ... }

=end programlisting

Now C<greet_me()> is available for invocation anywhere else within the program,
provided that the symbol--the function's name--is visible.

X<functions; forward declaration>

You do not have to I<define> a function at the point you declare it.  You may
use a I<forward declaration> to tell Perl that you intend for the function to
exist, then delay its definition:

=begin programlisting

    sub greet_sun;

=end programlisting


=begin sidebar

You do not have to declare Perl 5 functions before you use them, except in the
special case where they modify I<how> the parser parses them (L<attributes>).

=end sidebar

=head1 Invoking Functions

X<functions; invoking>

To invoke a function, mention its name and pass an optional list of arguments:

=begin programlisting

    greet_me( 'Jack', 'Brad' );
    greet_me( 'Snowy' );
    greet_me();

=end programlisting

=begin sidebar

You can I<often> omit parameter-grouping parentheses if your program runs
correctly with the C<strict> pragma enabled, but they provide clarity to the
parser and, more importantly, human readers.

=end sidebar

You can, of course, pass multiple I<types> of arguments to a function:

=begin programlisting

    greet_me( $name );
    greet_me( @authors );
    greet_me( %editors );

=end programlisting

... though Perl 5's default parameter handling sometimes surprises novices.

=head1 Function Parameters

Z<function_parameters>

X<parameters>
X<functions; parameters>
X<C<@_>>
X<parameters; flattening>

Inside the function, all parameters exist in a single array, C<@_>.  If C<$_>
corresponds to the English word I<it>, C<@_> corresponds to the word I<them>.
Perl I<flattens> all incoming parameters into a single list.  The function
itself either must unpack all parameters into any variables it wishes to use or
operate on C<@_> directly:

=begin programlisting

    sub greet_one
    {
        B<my ($name) = @_>;
        say "Hello, $name!";
    }

    sub greet_all
    {
        say "Hello, B<$_!" for @_>;
    }

=end programlisting

C<@_> behaves as does any other array in Perl.  You may refer to individual
elements by index:

=begin programlisting

    sub greet_one_indexed
    {
        B<my $name = $_[0]>;
        say "Hello, $name!";

        # or, less clear
        say "Hello, $_[0]!";
    }

=end programlisting

You may also C<shift>, C<unshift>, C<push>, C<pop>, C<splice>, and slice C<@_>.
Inside a function, the C<shift> and C<pop> operators operate on C<@_>
implicitly in the same way that they operate on C<@ARGV> outside of any
function:

=begin programlisting

    sub greet_one_shift
    {
        B<my $name = shift>;
        say "Hello, $name!";
    }

=end programlisting

=begin sidebar

While writing C<shift @_> may seem clearer initially, taking advantage of the
implicit operand to C<shift> is idiomatic in Perl 5.

=end sidebar

Take care that assigning a scalar parameter from C<@_> requires C<shift>,
indexed access to C<@_>, or lvalue list context parentheses.  Otherwise, Perl 5
will happily evaluate C<@_> in scalar context for you and assign the number of
parameters passed:

=begin programlisting

    sub bad_greet_one
    {
        B<my $name = @_>;  # buggy
        say "Hello, $name; you're looking quite numeric today!"
    }

=end programlisting

List assignment of multiple parameters is often clearer than multiple lines of
C<shift>.  Compare:

=begin programlisting

    sub calculate_value
    {
        # multiple shifts
        my $left_value  = shift;
        my $operation   = shift;
        my $right_value = shift;
        ...
    }

=end programlisting

... to:

=begin programlisting

    sub calculate_value
    {
        B<my ($left_value, $operation, $right_value) = @_;>
        ...
    }

=end programlisting

Occasionally it's necessary to extract a few parameters from C<@_> and pass the
rest to another function:

=begin programlisting

    sub delegated_method
    {
        my $self = B<shift>;
        say 'Calling delegated_method()'

        $self->delegate->delegated_method( B<@_> );
    }

=end programlisting

The dominant practice seems to be to use C<shift> only when your function must
access a single parameter and list assignment when accessing multiple
parameters.

=begin sidebar

See the C<signatures>, C<Method::Signatures>, and C<MooseX::Method::Signatures>
modules on the CPAN for declarative parameter handling.

=end sidebar

=head2 Flattening

The flattening of parameters into C<@_> happens on the caller side.  Passing a
hash as an argument produces a list of key/value pairs:

=begin programlisting

    sub show_pets
    {
        my %pets = @_;
        while (my ($name, $type) = each %pets)
        {
            say "$name is a $type";
        }
    }

    my %pet_names_and_types = (
        Lucky   => 'dog',
        Rodney  => 'dog',
        Tuxedo  => 'cat',
        Petunia => 'cat',
    );

    show_pets( %pet_names_and_types );

=end programlisting

The C<show_pets()> function works because the C<%pet_names_and_types> hash
flattens into a list.  The order of the pairs within that flattened list will
vary, but pairs will always appear in that list with the key first immediately
followed by the value.  The hash assignment inside the function C<show_pets()>
works essentially as the more explicit assignment to C<%pet_names_and_types>
does.

This is often useful, but you must be clear about your intentions if you pass
some arguments as scalars and others as flattened lists.  If you wish to make a
C<show_pets_of_type()> function, where one parameter is the type of pet to
display, you must pass that type as the I<first> parameter (or use C<pop> to
remove it from the end of C<@_>):

=begin programlisting

    sub show_pets_by_type
    {
        B<my ($type, %pets) = @_>;

        while (my ($name, $species) = each %pets)
        {
            B<next unless $species eq $type;>
            say "$name is a $species";
        }
    }

    my %pet_names_and_types = (
        Lucky   => 'dog',
        Rodney  => 'dog',
        Tuxedo  => 'cat',
        Petunia => 'cat',
    );

    show_pets_by_type( 'dog',   %pet_names_and_types );
    show_pets_by_type( 'cat',   %pet_names_and_types );
    show_pets_by_type( 'moose', %pet_names_and_types );

=end programlisting

=head2 Slurping

Z<parameter_slurping>
X<parameters; slurping>

As with any lvalue assignment to an aggregate, assigning to C<%pets> within the
function I<slurps> all of the remaining values from C<@_>.  If the C<$type>
parameter came at the end of C<@_>, Perl would attempt to assign an odd number
of elements to the hash and would produce a warning.  You I<could> work around
that:

=begin programlisting

    sub show_pets_by_type
    {
        B<my $type = pop;>
        B<my %pets = @_;>

        ...
    }

=end programlisting

... at the expense of some clarity.  The same principle applies when assigning
to an array as a parameter, of course.  Use references (L<references>) to avoid
flattening and slurping when passing aggregate parameters.

=head2 Aliasing

X<parameters; aliasing>
X<functions; aliasing parameters>

One useful feature of C<@_> can surprise the unwary: it contains aliases to the
passed-in parameters, until you unpack C<@_> into its own variables.  This
behavior is easiest to demonstrate with an example:

=begin programlisting

    sub modify_name
    {
        $_[0] = reverse $_[0];
    }

    my $name = 'Orange';
    modify_name( $name );
    say $name;

    # prints C<egnarO>

=end programlisting

If you modify an element of C<@_> directly, you will modify the original
parameter directly.  Be cautious.

=head1 Functions and Namespaces

Every function lives in a namespace.  Functions in an undeclared
namespace--that is, functions not declared after an explicit C<package ...>
statement--live in the C<main> namespace.  You may specify a function's
namespace outside of the current package at the point of declaration:

=begin programlisting

    sub B<Extensions::Math::>add {
        ...
    }

=end programlisting

Any prefix on the function's name which follows the package naming format
creates the function and inserts the function into the appropriate namespace,
but not the current namespace.  Because Perl 5 packages are open for
modification at any point, you may do this even if the namespace does not yet
exist, or if you have already declared functions in that namespace.

You may only declare one function of the same name per namespace. Otherwise
Perl 5 will warn you about subroutine redefinition.  If you're certain you want
to I<replace> an existing function, disable this warning with C<no warnings
'redefine'>.

You may call functions in other namespaces by using their fully-qualified
names:

=begin programlisting

    package main;

    Extensions::Math::add( $scalar, $vector );

=end programlisting

Functions in namespaces are I<visible> outside of those namespaces in the sense
that you can refer to them directly, but they are only I<callable> by their
short names from within the namespace in which they are declared--unless you
have somehow made them available to the current namespace through the processes
of importing and exporting (L<exporting>).

=head2 Importing

Z<importing>

X<functions; importing>
X<builtins; C<use>>

When loading a module with the C<use> builtin (L<modules>), Perl automatically
calls a method named C<import()> on the provided package name.  Modules with
procedural interfaces can provide their own C<import()> which makes some or all
defined symbols available in the calling package's namespace.  Any arguments
after the name of the module in the C<use> statement get passed to the module's
C<import()> method.  Thus:

=begin programlisting

    use strict;

=end programlisting

... loads the F<strict.pm> module and calls C<< strict->import() >> with no
arguments, while:

=begin programlisting

    use strict 'refs';
    use strict qw( subs vars );

=end programlisting

... loads the F<strict.pm> module, calls C<< strict->import( 'refs' ) >>, then
calls C<< strict->import( 'subs', vars' ) >>.

You may call a module's C<import()> method directly.  The previous code example
is equivalent to:

=begin programlisting

    BEGIN
    {
        require strict;
        strict->import( 'refs' );
        strict->import( qw( subs vars ) );
    }

=end programlisting

Be aware that the C<use> builtin adds an implicit C<BEGIN> block around these
statements so that the C<import()> call happens I<immediately> after the parser
has compiled the entire statement.  This ensures that any imported symbols are
visible when compiling the rest of the program.  Otherwise, any functions
imported from other modules but not declared in the current file would look
like undeclared barewords and C<strict> would complain.

=head1 Reporting Errors

Z<reporting_errors>
X<builtins; C<caller>>

Within a function, you can get information about the context of the call with
the C<caller> operator.  If passed no arguments, it returns a three element
list containing the name of the calling package, the name of the file
containing the call, and the line number of the package on which the call
occurred:

=begin programlisting

    package main;

    main();

    sub main
    {
        show_call_information();
    }

    sub show_call_information
    {
        my ($package, $file, $line) = caller();
        say "Called from $package in $file at $line";
    }

=end programlisting

You may pass a single, optional integer argument to C<caller()>.  If provided,
Perl will look back through the caller of the caller of the caller that many
times and provide information about that particular call.  In other words, if
C<show_call_information()> used C<caller(0)>, it would receive information
about the call from C<main()>.  If it used C<caller(1)>, it would receive
information about the call from the start of the program.

While providing this optional parameter lets you inspect the callers of
callers, it also provides more return values, including the name of the
function and the context of the call:

=begin programlisting

    sub show_call_information
    {
        my ($package, $file, $lineB<, $func>) = caller(B<0>);
        say "Called B<$func> from $package in $file at $line";
    }

=end programlisting

X<C<Carp>>
X<C<Carp>; C<croak()>>
X<C<Carp>; C<carp()>>

The standard C<Carp> module uses this technique to great effect for reporting
errors and throwing warnings in functions; its C<croak()> throws an exception
reported from the file and line number of its caller.  When used in place of
C<die> in library code, C<croak()> can throw an exception due to incorrect
usage from the point of use.  C<Carp>'s C<carp()> function reports a warning
from the file and line number of its caller (L<producing_warnings>).

This behavior is most useful when validating parameters or preconditions of a
function, when you want to indicate that the calling code is wrong somehow:

=begin programlisting

    use Carp 'croak';

    sub add_two_numbers
    {
        croak 'add_two_numbers() takes two and only two arguments'
            unless @_ == 2;

        ...
    }

=end programlisting

=head2 Validating Arguments

Defensive programming often benefits from checking types and values of
arguments for appropriateness before further execution.  By default, Perl 5
provides few built-in mechanisms for doing so.  To check that the I<number> of
parameters passed to a function is correct, evaluate C<@_> in scalar context:

=begin programlisting

    sub add_numbers
    {
        croak "Expected two numbers, but received: " . @_
            unless @_ == 2;

        ...
    }

=end programlisting

Type checking is more difficult, because of Perl's operator-oriented type
conversions (L<context_philosophy>).  In cases where you need more strictness,
consider the CPAN module C<Params::Validate>.

=head1 Advanced Functions

Functions may seem simple, but you can do much, much more with them.

=head2 Context Awareness

X<context>
X<C<wantarray>>
X<builtins; C<wantarray>>

Perl 5's builtins know whether you've invoked them in void, scalar, or list
context.  So too can your functions know their calling contexts.  The
misnamedN<See C<perldoc -f wantarray> to verify.> C<wantarray> builtin returns
C<undef> to signify void context, a false value to signify scalar context, and
a true value to signify list context.

=begin programlisting

    sub context_sensitive
    {
        my $context = wantarray();
        return qw( Called in list context )  if             $context;
        say       'Called in void context'   unless defined $context;
        return    'Called in scalar context' unless         $context;
    }

    context_sensitive();
    say my $scalar = context_sensitive();
    say context_sensitive();

=end programlisting

This can be useful for functions which might produce expensive return values to
avoid doing so in void context.  Some idiomatic functions return a list in list
context and an array reference in scalar context (or the first element of the
list).  Even so, there's no single best recommendation for the use or avoidance
of C<wantarray>; sometimes it's clearer to write separate functions which
clearly indicate their expected uses and return values.

=begin sidebar

X<C<Want>>
X<C<Contextual::Return>>

With that said, Robin Houston's C<Want> and Damian Conway's
C<Contextual::Return> distributions from the CPAN offer many possibilities for
writing powerful and usable interfaces.

=end sidebar

=head2 Recursion

Z<recursion>
X<recursion>
X<call frame>
X<functions; call frame>

Every call to a function in Perl creates a new I<call frame>.  This is an
internal data structure which represents the data for the call itself: incoming
parameters, the point to which to return, and all of the other call frames up
to the current point.  It also captures the lexical environment of the specific
and current invocation of the function.  This means that a function can
I<recur>; it can call itself.

Recursion is a deceptively simple concept, but it can seem daunting if you
haven't encountered it before.  Suppose you want to find an element in a sorted
array.  You I<could> iterate through every element of the array individually,
looking for the target, but on average, you'll have to examine half of the
elements of the array.

Another approach is to halve the array, pick the element at the midpoint,
compare, then repeated with either the lower or upper half.  You can write this
in a loop yourself or you could let Perl manage all of the state and tracking
necessary with a recursive function something like:

=begin programlisting

    use Test::More tests => 8;

    my @elements = ( 1, 5, 6, 19, 48, 77, 997, 1025, 7777, 8192, 9999 );

    ok   elem_exists(     1, @elements ), 'found first element in array';
    ok   elem_exists(  9999, @elements ), 'found last element in array';
    ok ! elem_exists(   998, @elements ), 'did not find element not in array';
    ok ! elem_exists(    -1, @elements ), 'did not find element not in array';
    ok ! elem_exists( 10000, @elements ), 'did not find element not in array';

    ok   elem_exists(    77, @elements ), 'found midpoint element';
    ok   elem_exists(    48, @elements ), 'found end of lower half element';
    ok   elem_exists(   997, @elements ), 'found start of upper half element';

    sub elem_exists
    {
        my ($item, @array) = @_;

        # break recursion if there are no elements to search
        return unless @array;

        # bias down, if there are an odd number of elements
        my $midpoint = int( (@array / 2) - 0.5 );
        my $miditem  = $array[ $midpoint ];

        # return true if the current element is the target
        return 1 if $item  == $miditem;

        # return false if the current element is the only element
        return   if @array == 1;

        # split the array down and recurse
        return B<elem_exists>( $item, @array[0 .. $midpoint] )
            if $item < $miditem;

        # split the array up and recurse
        return B<elem_exists>( $item, @array[$midpoint + 1 .. $#array] );
    }

=end programlisting

This isn't necessarily the best algorithm for searching a sorted list, but it
demonstrates recursion.  Again, you I<can> write this code in a procedural way,
but some algorithms are much clearer when written recursively.

=head2 Lexicals

Every new invocation of a function creates its own I<instance> of a lexical
scope.  In the case of the recursive example, even though the declaration of
C<elem_exists()> creates a single scope for the lexicals C<$item>, C<@array>,
C<$midpoint>, and C<$miditem>, every I<call> to C<elem_exists()>, even
recursively, has separate storage for the values of those lexical variables.
You can demonstrate that by adding debugging code to the function:

=begin programlisting

    B<use Carp 'cluck';>

    sub elem_exists
    {
        my ($item, @array) = @_;

        B<cluck "[$item] (@array)";>

        # other code follows
        ...
    }

=end programlisting

The output demonstrates that not only can C<elem_exists()> call itself safely,
but the lexical variables do not interfere with each other.

=head2 Tail Calls

Z<tail_calls>
X<recursion; guard conditions>

One I<drawback> of recursion is that you must get your return conditions
correct, or else your function will call itself an infinite number of times.
This is why the C<elem_exists()> function has several C<return> statements.

Perl offers a helpful warning when it detects what might be runaway recursion:
C<Deep recursion on subroutine>.  The limit is 100 recursive calls, which can
be too few in certain circumstances but too many in others.  Disable this
warning with C<no warnings 'recursion'> in the scope of the recursive call.

Because each call to a function requires a new call frame, as well as space for
the call to store its own lexical values, highly-recursive code can use more
memory than iterative code.  A feature called I<tail call elimination> can
help.

=begin sidebar

Tail call elimination may be most obvious when writing recursive code, but it
can be useful in any case of a tail call.  Many programming language
implementations support automatic tail call elimination.

=end sidebar

X<tailcalls>
X<functions; tailcall>

A I<tail call> is a call to a function which directly returns that function's
results.  The lines:

=begin programlisting

        # split the array down and recurse
        return elem_exists( $item, @array[0 .. $midpoint] )
            if $item < $miditem;

        # split the array up and recurse
        return elem_exists( $item, @array[$midpoint + 1 .. $#array] );

=end programlisting

... which return the results of the recursive C<elem_exists()> calls directly,
are candidates for tail call elimination.  This elimination avoids returning to
the current call and then returning to the parent call.  Instead, it returns to
the parent call directly.

X<C<Sub::Call::Tail>>

Perl 5 supports manual tail call elimination, but Yuval Kogman's
C<Sub::Call::Tail> is worth exploring if you find yourself with highly
recursive code or code that could benefit from tail call elimination.
C<Sub::Call::Tail> is appropriate for tail calls of non-recursive code:

=begin programlisting

    use Sub::Call::Tail;

    sub log_and_dispatch
    {
        my ($dispatcher, $request) = @_;
        warn "Dispatching with $dispatcher\n";

        return dispatch( $dispatcher, $request );
    }

=end programlisting

In this example, you can replace the C<return> with the new C<tail> keyword
with no functional changes (yet more clarity and improved performance):

=begin programlisting

        B<tail> dispatch( $dispatcher, $request );

=end programlisting

X<C<goto>>
X<functions; C<goto>>
X<builtins; C<goto>>

If you really I<must> eliminate tail calls, use a special form of the C<goto>
builtin.  Unlike the form which can often lead to spaghetti code, the C<goto>
function form replaces the current function call with a call to another
function.  You may use a function by name or by reference.  You must always set
C<@_> yourself manually, if you want to pass different arguments:

=begin programlisting

        # split the array down and recurse
        if ($item < $miditem)
        {
            @_ = ($item, @array[0 .. $midpoint]);
            B<goto &elem_exists;>
        }

        # split the array up and recurse
        else
        {
            @_ = ($item, @array[$midpoint + 1 .. $#array] );
            B<goto &elem_exists;>
        }

=end programlisting

The comparative cleanliness of the CPAN versions is obvious.

=head1 Pitfalls and Misfeatures

X<functions; misfeatures>

Not all features of Perl 5 functions are always helpful.  In particular,
prototypes (L<prototypes>) rarely do what you mean.  They have their uses, but
you can avoid them outside of a few cases.

X<functions; Perl 4>
X<functions; Perl 1>
X<C<&>; sigil>
X<sigils; C<&>>
X<builtins; C<do>>

Perl 5 still supports old-style invocations of functions, carried over from
older versions of Perl.  While you may now invoke Perl functions by name,
previous versions of Perl required you to invoke them with a leading ampersand
(C<&>) character.  Perl 1 required you to use the C<do> builtin:

=begin programlisting

    # outdated style; avoid
    my $result = &calculate_result( 52 );

    # Perl 1 style
    my $result = do calculate_result( 42 );

    # crazy mishmash; really truly avoid
    my $result = do &calculate_result( 42 );

=end programlisting

While the vestigial syntax is visual clutter, the leading ampersand form has
other surprising behaviors.  First, it disables prototype checking (as if that
often mattered).  Second, if you do not pass arguments explicitly, it
I<implicitly> passes the contents of C<@_> unmodified.  Both can lead to
surprising behavior.

A final pitfall comes from leaving the parentheses off of function calls.  The
Perl 5 parser uses several heuristics to resolve ambiguity of barewords and the
number of parameters passed to a function, but occasionally those heuristics
guess wrong.  While it's often wise to remove extraneous parentheses, compare
the readability of these two lines of code:

=begin programlisting

    ok( elem_exists( 1, @elements ), 'found first element in array' );

    # warning; contains a subtle bug
    ok elem_exists 1, @elements, 'found first element in array';

=end programlisting

The subtle bug in the second form is that the call to C<elem_exists()> will
gobble up the test description intended as the second argument to C<ok()>.
Because C<elem_exists()> uses a slurpy second parameter, this may go unnoticed
until Perl produces warnings about comparing a non-number (the test
description, which it cannot convert into a number) with the element in the
array.

This is admittedly an extreme case, but it is a case where proper use of
parentheses can clarify code and make subtle bugs obvious to the reader.
