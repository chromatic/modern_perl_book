=head1 Coercion

Z<coercion>
X<coercion>

Unlike other languages, where a variable can hold only a particular type of
value (a string, a floating-point number, an object), Perl relies on the
context of operators to determine how to interpret values (L<value_contexts>).
If you treat a number as a string, Perl will do its best to convert that number
into a string (and vice versa).  This process is I<coercion>.

X<DWIM>

By design, Perl attempts to do what you mean (I<DWIM> stands for I<do what I
mean>), though you must be specific about your intentions.

=head2 Boolean Coercion

Z<boolean_coercion>
X<coercion; boolean>
X<truthiness>

Boolean coercion occurs when you test the I<truthiness> of a valueN<Truthiness
is like truthfulness if you squint and say "Yeah, that's true, but....">, such
as in a C<if> or C<while> condition.  Numeric 0 is false.  The undefined value
is false.  The empty string is false, and so is the string C<'0'>.  The strings
C<'0.0'> and C<'0e'> are I<true>, however.

All other values are true, including the idiomatic string C<'0 but true'>.  In
the case of a scalar with both string and numeric portions (L<dualvars>), Perl
5 prefers to check the string component for boolean truth.  C<'0 but true'>
does evaluate to zero numerically, but is not the empty string, so it evaluates
to true in boolean context.

=head2 String Coercion

X<coercion; string>
X<stringify>

String coercion occurs when using string operators such as comparisons (C<eq>
and C<cmp>, for example), concatenation, C<split>, C<substr>, and regular
expressions.  It also occurs when using a value as a hash key.  The undefined
value stringifies to an empty string, but it produces a "use of uninitialized
value" warning.  Numbers I<stringify> to strings containing their values.  That
is, the value C<10> stringifies to the string C<10>, such that you can C<split>
a number into individual digits:

=begin programlisting

    my @digits = split '', 1234567890;

=end programlisting

=head2 Numeric Coercion

Z<numeric_coercion>
X<coercion; numeric>
X<numify>

Numeric coercion occurs when using numeric comparison operators (such as C<==>
and C<< <=> >>), when performing mathematic operations, and when using a value
as an array or list index.  The undefined value I<numifies> to zero, though it
produces a "Use of uninitialized value" warning.  Strings which do not begin
with numeric portions also numify to zero, and they produce an "Argument isn't
numeric" warning.  Strings which begin with characters allowed in numeric
literals numify to those values; that is, C<10 leptons leaping> numifies to
C<10> the same way that C<6.022e23 moles marauding> numifies to C<6.022e23>.

X<Scalar::Util>
X<Scalar::Util; looks_like_number>

The core module C<Scalar::Util> contains a C<looks_like_number()> function
which uses the same parsing rules as the Perl 5 grammar to extract a number
from a string.

=begin sidebar

The strings C<Inf> and C<Infinity> represent the infinite value and behave as
numbers, in the sense that numifying them does not produce the "Argument isn't
numeric" warning.  The string C<NaN> represents the concept "not a number".
Unless you're a mathemetician, you may not care.

=end sidebar

=head2 Reference Coercion

X<coercion; reference>
X<autovivification>

In certain circumstances, treating a value as a reference turns that value
I<into> a reference.  This process of autovivification (L<autovivification>)
can be useful for nested data structures.  It occurs when you use a
dereferencing operation on a non-reference:

=begin programlisting

    my %users;

    $users{Bradley}{id} = 228;
    $users{Jack}{id}    = 229;

=end programlisting

Although the hash never contained values for C<Bradley> and C<Jack>, Perl 5
helpfully created hash references for those values, then assigned them each a
key/value pair keyed on C<id>.

=head2 Cached Coercions

Z<cached_coercions>

X<coercion; cached>

Perl 5's internal storage mechanism for values allows each value to have a
stringification and a numificationN<This is a simplification, but the gory
details are truly gory.>.  Stringifying a numeric value does not replace the
numeric value with a string.  Instead, it I<attaches> a stringified value to
the value in addition to the numeric value.  The same sort of operation happens
when numifying a string value.

You almost never need to know that this happens--perhaps once or twice a
decade, if anecdotal evidence is admissible.

Perl 5 may prefer one form over another.  If a value has a cached
representation in a form you do not expect, relying on an implicit conversion
may produce surprising results.  You almost never need to be explicit about
what you expect, but know that caching does occur and you may be able to
diagnose an odd situation when it occurs.

=head2 Dualvars

Z<dualvars>

X<coercion; dualvars>
X<dualvar()>
X<Scalar::Util>
X<dualvar>

The caching of string and numeric values allows for the use of a
rare-but-useful feature known as a I<dualvar>, or a value that has divergent
numeric and string values.  The core module C<Scalar::Util> provides a function
C<dualvar()> which allows you to create a value which has specified and
divergent numeric and string values:

=begin programlisting

    use Scalar::Util 'dualvar';
    my $false_name = dualvar 0, 'Sparkles & Blue';

    say 'Boolean true!'  if        !! $false_name;
    say 'Numeric false!' unless  0  + $false_name;
    say 'String true!'   if     ''  . $false_name;

=end programlisting
