=head2 Values

Z<values>

Effective Perl programs depend on the accurate representation and manipulation
of values.

X<variables>
X<variables>

Computer programs contain I<variables>: containers which hold I<values>.
Values are the actual data the programs manipulate.  While it's easy to explain
what that data might be--your aunt's name and address, the distance between
your office and a golf course on the moon, or the weight of all cookies you've
eaten in the past year--the rules regarding the format of that data are often
strict.  Writing an effective program often means understanding the best
(simplest, fastest, most compact, or easiest) way of representing that data.

While the structure of a program depends heavily on the means by which you
model your data with appropriate variables, these variables would be
meaningless if they couldn't accurately contain the data itself--the values.

=head3 Strings

X<strings>

A I<string> is a piece of data with no particular formatting, no particular
contents, and no semantic meaning beyond the fact that it's a string.  It could
be your name.  It could be the contents of an image file read from your hard
drive.  It could be the Perl program itself.  A string has no meaning to the
program until you give it meaning.  A string is a fixed amount of data
delineated by quotes of some form.  Most strings use either single or double
quotes:

=begin programlisting

    my $name    = B<'Donner Odinson, Bringer of Despair'>;
    my $address = B<"Room 539, Bilskirnir, Valhalla">;

=end programlisting

X<strings; single-quoted>

Characters in a I<single-quoted string> represent themselves literally, with
one exception.  You may embed a single quote inside a single-quoted string by
escaping the quote with a leading backlash:

=begin programlisting

    my $reminder = 'DonB<\'>t forget to escape the single quote!';

=end programlisting

X<strings; double-quoted>

A I<double-quoted string> has more complex (and often, more useful) behavior.
You may escape control and non-printable characters in the string:

=begin programlisting

    my $newline  = "B<\n>";
    my $tab      = "B<\t>";
    my $carriage = "B<\r>";

=end programlisting

=begin sidebar

You may also embed these control characters themselves directly into the
string--a string declaration may cross lines and run as long as you want, but
it's often more maintainable to use the escapes.  Whitespace can be difficult
to read precisely in a text editor.

=end sidebar

=for author

Should I include a table of escapes here?  It's the same as in regexes.

=end for

X<interpolation>
X<strings; interpolation>

You may also I<interpolate> the value of a scalar variable or the values of an
array within a double-quoted string directly:

=begin programlisting

    my $factoid = "Did you know that B<$name> lives at B<$address>?";

=end programlisting

You may include a literal double-quote inside a double-quoted string by
escaping it with a leading backslash:

=begin programlisting

    my $quote = "\"Ouch,\", he cried.  \"That I<hurt>!\"";

=end programlisting

X<quoting operators>
X<q>
X<operators; q>
X<qq>
X<operators; qq>

If you find that hideously ugly, you may use an alternate I<quoting operator>.
The C<q> operator performs single quoting, while the C<qq> operator performs
double quoting.  In each case, you may choose your own delimiter for the
string.  The character immediately following the operator determines the
beginning and end of the string.  If the character is the opening character of
a balanced pair--such as opening and closing braces--the closing character will
be the final delimiter.  Otherwise, the character itself will be both the
starting and ending delimiter.

=begin programlisting

    my $quote     = B<qq{>"Ouch", he said.  "That I<hurt>!"B<}>;
    my $reminder  = B<q|>Don't forget to escape the single quote!B<|>;
    my $complaint = B<q{>It's too early to be awake.B<}>;

=end programlisting

X<heredocs>
X<strings; heredocs>

Even though you can declare a complex string with a series of embedded escape
characters, sometimes it's easier to declare a multi-line string on multiple
lines.  The I<heredoc> syntax lets you assign one or more lines of a string
with a different syntax:

=begin programlisting

    my $blurb =<<'END_BLURB';

    He looked up.  "Time is never on our side, my child.  Do you see the irony?
    All they know is change.  Change is the constant on which they all can
    agree.  Whereas we, born out of time to remain perfect and perfectly
    self-aware, can only suffer change if we pursue it.  It is against our
    nature.  We rebel against that change.  Shall we consider them greater
    for it?"
    END_BLURB

=end programlisting

The C<< <<'END_BLURB' >> syntax has three parts.  The double angle-brackets
introduce the heredoc.  The quotes determine whether the heredoc obeys
single-quoted or double-quoted behavior with regard to variable and escape
character interpolation.  They're optional; the default behavior is
double-quoted interpolation.  The C<END_BLURB> itself is an arbitrary
identifier which the Perl 5 parser uses as the ending delimiter.

Be careful; regardless of the indentation of the heredoc declaration itself,
the ending delimiter must begin in the first column of the program.

=begin sidebar

If the identifier begins with whitespace, that spaces must be present exactly
in the ending delimiter.  Even if you do indent the identifier, Perl 5 will
I<not> remove equivalent whitespace from the start of each line of the heredoc.

=end sidebar

You may use a string in other contexts, such as boolean or numeric; its
contents will determine the resulting value (L<coercion>).

=head3 Unicode and Strings

Z<unicode>
X<unicode>

Unicode is a system for representing characters in the world's written
languages.  While most English text uses a character set of only 127 characters
(which requires seven bits of storage and fits nicely into eight-bit bytes),
it's naE<iuml>ve to believe that you won't someday need an umlaut, for example.

Perl 5 handles Unicode internally.  For the most part, you can ignore this,
except that there are several representations for I<how> to store Unicode.  You
don't have to understand what happens after you have the data within your
program, but you have to know what kind of data you receive from the external
world and what kind of data you want to emit to the external world.  As long as
you do not assume that a character in a Perl 5 string requires a byte of
storage, all of the Perl 5 string operations perform correctly on Unicode and
ASCII strings.

For far more detail what Unicode is, encodings, and how to manage incoming and
outgoing data in a Unicode world, see C<perldoc perluniintro>.

=head4 Unicode in Your Data

X<Encode>
X<Encode; decode()>
X<Encode; encode()>

Perl 5's internal encoding shields you from most of the details of Unicode and
character sets and representations, but you have to meet it part way.  In
particular, the sooner you can ask Perl to convert from data that you have to
its own internal format, the fewer odd conversions and mismatches you will
suffer.  The core module C<Encode> provides a function named C<decode()> to
convert a scalar containing data in a known format to the internal encoding.
For example, if you have UTF-8 data:

=begin programlisting

    my $string = decode('utf8', $data);

=end programlisting

The corresponding C<encode()> function converts from Perl's internal encoding
to the desired output encoding:

=begin programlisting

    my $latin1 = encode('iso-8859-1', $string);

=end programlisting

If you always convert at the inputs and outputs of your program, you will avoid
many problems.

=for author

Probably need C<binmode> here.

=end for

=head4 Unicode in Your Programs

X<pragmas; utf8>
X<utf8>
X<encoding>

You may include Unicode characters in your programs in three ways.  The easiest
is to use the C<utf8> pragma (L<pragmas>), which tells the Perl parser to
interpret the rest of the source code file with the UTF-8 I<encoding> (an
arrangement and representation of Unicode characters).  This allows you to use
Unicode characters in strings as well in identifiers:

=begin programlisting

    use utf8;

    sub E<pound>_to_E<yen> { ... }

    my $pounds = E<pound>_to_E<yen>('1000E<pound>');

=end programlisting

You will need to use a text editor which understands the UTF-8 encoding, and
you will need to save your file appropriately.

X<escapes; \x{}>
X<\x{}>

You may also use the Unicode escape sequence to represent character encodings.
The syntax C<\x{}> represents a single character; place the hex form of the
character's Unicode number within the curly brackets:

=begin programlisting

    my $escaped_thorn = "\x{00FE}";

=end programlisting

=begin sidebar

Note that these escapes interpolate only within double-quoted strings.

=end sidebar

X<charnames pragma>
X<pragmas; charnames>
X<escapes; \N{}>
X<\N{}>

Some Unicode characters have names.  Though these are more verbose, they can be
clearer to read than Unicode numbers.  You must use the C<charnames> pragma to
enable them.  Use the C<\N{}> escape to refer to them:

=begin programlisting

    use charnames ':full';
    use Test::More tests => 1;

    my $escaped_thorn = "\x{00FE}";
    my $named_thorn   = "\N{LATIN SMALL LETTER THORN}";

    is( $escaped_thorn, $named_thorn, 'Thorn equivalence check' );

=end programlisting

You may use the C<\x{}> and C<\N{}> forms within regular expressions as well as
anywhere else you may legitimately use a string or a character.

=head3 Numbers

X<numbers>
X<integers>
X<floating-point values>

Perl also supports numbers, both integers and floating-point values.  They
support scientific notation as well as binary, octal, and hexadecimal
representations:

=begin programlisting

    my $integer   = 42;
    my $float     = 0.007;
    my $sci_float = 1.02e14;
    my $binary    = B<0b>101010;
    my $octal     = B<0>52;
    my $hex       = B<0x>20;

=end programlisting

The emboldened characters are the numeric prefixes for binary, octal, and hex
notation respectively.  Be aware that the leading zero always indicates octal
mode; this can occasionally produce unanticipated confusion.

X<numbers; underscore separator>
X<underscore>

=begin sidebar

Even though you can represent floating-point values explicitly in Perl 5 with
perfect accuracy, Perl 5 stores them internally in a binary format.  Comparing
floating-point values is sometimes imprecise in specific ways; consult
C<perldoc perlnumber> for more details.

=end sidebar

You may not use commas to separate thousands in numeric literals because the
parser will interpret the commas as comma operators.  You I<can> use
underscores in other places within the number, however.  The parser will treat
them as invisible characters.  Your readers may not.  These are equivalent:

=begin programlisting

    my $billion = 1000000000;
    my $billion = 1_000_000_000;
    my $billion = 10_0_00_00_0_0_0;

=end programlisting

Consider the most readable alternative, however.

X<Scalar::Util>
X<looks_like_number>
X<Scalar::Util; looks_like_number>

Because of coercion (L<coercion>), Perl programmers rarely have to worry about
converting text read from outside the program to numbers.  Perl will treat
anything which looks like a number as a number in numeric contexts.  Even
though it almost always does so correctly, occasionally it's useful to know if
something really does look like a number.  The core module C<Scalar::Util>
contains a function named C<looks_like_number> which returns true if Perl will
consider the given argument numeric.

X<Regexp::Common>

The C<Regexp::Common> module from the CPAN also provides several well-tested
regular expressions to identify valid I<types> (whole number, integer,
floating-point value) of numeric values.

=head3 Undef

X<undef>

Perl 5 has a value which represents an unassigned, undefined, and unknown
value: C<undef>.  Declared but undefined scalar variables contain C<undef>:

=begin programlisting

    my $name = undef;   # unnecessary assignment
    my $rank;           # also contains undef

=end programlisting

X<undef; coercions>

C<undef> evaluates to false in boolean context.  Be aware that an array
containing a single element which is itself C<undef> evaluates to true in a
boolean context.  Interpolating C<undef> into a string--or evaluating it in a
string context--produces an C<uninitialized value> warning, if you have
C<warnings> enabled.

=head3 The Empty List

X<empty list>
X<()>

When used on the right-hand side of an assignment, the C<()> construct
represents an empty list.  When evaluated in scalar context, this evaluates to
C<undef>.  In list context, it is effectively an empty list.

When used on the left-hand side of an assignment, the C<()> construct enforces
list context.  To count the number of elements returned from an expression in
list context without using a temporary variable, you use the idiom (L<idioms>):

=begin programlisting

    my $count = B<()> = get_all_clown_hats();

=end programlisting

Because of the right associativity (L<associativity>) of the assignment
operator, Perl first evaluates the second assignment by calling
C<get_all_clown_hats()> in list context.  This produces a list.  Even though
that list never gets assigned to anything, the return value of the second
assignment is that list.  Perl next evaluates that list in scalar context, due
to the scalar assignment to C<$count> in the first assignment.  As a result,
C<$count> contains the number of elements in the list returned from
C<get_all_clown_hats()>.

You don't have to understand all of the implications of this code right now,
but it does demonstrate how a few of Perl's fundamental design features can
combine to produce interesting and useful behavior.

=head3 Lists

X<lists>

Lists and arrays are not interchangeable in Perl.  You may store a list in an
array and you may coerce an array to a list, but they are separate entities.
Lists may occur verbatim in source code as values:

=begin programlisting

    my @first_fibs = (1, 1, 2, 3, 5, 8, 13, 21);

=end programlisting

... as targets of assignments:

=begin programlisting

    my ($package, $filename, $line) = caller();

=end programlisting

... or as lists of expressions:

=begin programlisting

    say name(), ' => ', age();

=end programlisting

Note that you do not need parentheses to I<create> lists; where present, the
parentheses in these examples group expressions to change the I<precedence> of
those expressions (L<precedence>).

X<operators; range>
X<operators; ..>
X<..>
X<range operator>

You may use the range operator to create lists of literals in a compact form:

=begin programlisting

    my @chars = 'a' .. 'z';
    my @count = 13 .. 27;

=end programlisting

X<qw()>
X<operators; qw()>
X<qw() operator>

... and you may use the C<qw()> operator to split a literal string on
whitespace to produce a list of strings:

=begin programlisting

    my @stooges = qw( Larry Curly Moe Shemp Joey Kenny );

=end programlisting

=begin sidebar

Perl will produce a warning if a C<qw()> contains a comma or the comment
character (C<#>), because not only are such characters rarely included in a
C<qw()>, their presence usually indicates an oversight.

=end sidebar

Lists can (and often do) occur as the results of expressions, but these lists
do not appear literally in source code.
