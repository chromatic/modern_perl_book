=head1 Values

Z<values>

X<variables>
X<values>

New programmers spend a lot of time thinking about I<what> their programs must
do. Mature programmers spend their time designing a model for the data their
programs must understand.

Variables allow you to manipulate data in the abstract. The values held in
variables make programs concrete and useful. These values are your aunt's name
and address, the distance between your office and a golf course on the moon, or
the sum of the masses of all of the cookies you've eaten in the past year.
Within your program, the rules regarding the format of that data are often
strict.

Effective programs need effective (simple, fast, efficient, easy) ways to
represent their data.

=head2 Strings

X<strings>

A I<string> is a piece of textual or binary data with no particular formatting
or contents. It could be your name, an image read from disk, or the source code
of the program itself. A string has meaning in the program only when you give
it meaning.

X<strings; delimiters>

A literal string appears in your program surrounded by a pair of quoting
characters. The most common I<string delimiters> are single and double quotes:

=begin programlisting

    my $name    = B<'Donner Odinson, Bringer of Despair'>;
    my $address = B<"Room 539, Bilskirnir, Valhalla">;

=end programlisting

X<strings; single-quoted>

Characters in a I<single-quoted string> are exactly and only ever what they
appear to be, with two exceptions. To include a single quote inside a
single-quoted string, you must escape it with a leading backslash:

=begin programlisting

    my $reminder = 'DonB<\'>t forget to escape '
                 . 'the single quote!';

=end programlisting

To include a backslash at the I<end> of a string, escape it with another
leading backslash. Otherwise Perl will think you're trying to escape the
closing delimiter:

=begin programlisting

    my $exception = 'This string ends with a '
                  . 'backslash, not a quote: B<\\>';

=end programlisting

Any other backslash will be part of the string as it appears, unless you have
two adjacent backslashes, in which case Perl will believe that you intended to
escape the second:

=begin programlisting

    use Test::More;

    is 'Modern B<\> Perl', 'Modern B<\\> Perl',
       'single quotes backslash escaping';

    done_testing();

=end programlisting

=begin tip Testing Examples

This example uses C<Test::More> to prove the assertion that Perl considers
these two lines equivalent. See L<testing> for details on how that works.

=end tip

X<strings; double-quoted>

A I<double-quoted string> gives you more options, such as encoding otherwise
invisible whitespace characters in the string:

=begin programlisting

    my $tab       = "B<\t>";
    my $newline   = "B<\n>";
    my $carriage  = "B<\r>";
    my $formfeed  = "B<\f>";
    my $backspace = "B<\b>";

=end programlisting

You may have inferred from this that you can represent the same logical string
in multiple ways. You can include a tab within a string by typing the C<\t>
escape sequence or by hitting the Tab key on your keyboard. Both strings look
and behave the same to Perl, even though the representation of the string may
differ in the source code.

A string declaration may cross (and include) newlines, so these two
declarations are equivalent:

=begin programlisting

    my $escaped = "two\nlines";
    my $literal = "two
    lines";
    is $escaped, $literal, 'equivalent \n and newline';

=end programlisting

... but the escape sequences are easier for humans to read.

X<concatenation>
X<strings; concatenation>
X<operators; C<.>>

Perl strings have variable--not fixed--lengths. Perl will change their sizes
for you as you modify and manipulate them. Use the I<concatenation> operator
C<.> to combine multiple strings together:

=begin programlisting

    my $kitten = 'Choco' . ' ' . 'Spidermonkey';

=end programlisting

... though concatenating three literal strings like this is ultimate the same
to Perl as writing a single string.

X<interpolation>
X<strings; interpolation>

When you I<interpolate> the value of a scalar variable or the values of an
array within a double-quoted string, the I<current> contents of the variable
become part of the string as if you'd concatenated them:

=begin programlisting

    my $factoid = "B<$name> lives at B<$address>!";

    # equivalent to
    my $factoid = $name . ' lives at ' . $address . '!';

=end programlisting

X<escaping>

Include a literal double-quote inside a double-quoted string by I<escaping> it
with a leading backslash:

=begin programlisting

    my $quote = "\"Ouch,\", he cried. \"That I<hurt>!\"";

=end programlisting

X<operators; quoting>
X<C<q>; single quoting operator>
X<operators; C<q>>
X<C<qq>; double quoting operator>
X<operators; C<qq>>

Repeated backslashing sometimes becomes unwieldy. A I<quoting operator> allows
you to choose an alternate string delimiter. The C<q> operator indicates single
quoting (no interpolation), while the C<qq> operator provides double quoting
behavior (interpolation). The character immediately following the operator
determines the characters used as delimiters. If the character is the opening
character of a balanced pair--such as opening and closing braces--the closing
character will be the final delimiter. Otherwise, the character itself will be
both the starting and ending delimiter.

=begin programlisting

    my $quote     = B<qq{>"Ouch", he said. "That I<hurt>!"B<}>;
    my $reminder  =  B<q^>Don't escape the single quote!B<^>;
    my $complaint =  B<q{>It's too early to be awake.B<}>;

=end programlisting

X<heredocs>
X<strings; heredocs>

Use the I<heredoc> syntax to assign multiple lines to a string:

=begin programlisting

    my $blurb =<<'END_BLURB';

    He looked up. "Change is the constant on which they all
    can agree.  We instead, born out of time, remain perfect
    and perfectly self-aware. We only suffer change as we
    pursue it. It is against our nature. We rebel against
    that change. Shall we consider them greater for it?"
    END_BLURB

=end programlisting

This syntax has three parts. The double angle-brackets introduce the heredoc.
The quotes determine whether the heredoc follows single- or double-quoted
behavior; double-quoted behavior is the default. C<END_BLURB> is an arbitrary
identifier, chosen by the programmer, used as the ending delimiter.

Regardless of the indentation of the heredoc declaration itself, the ending
delimiter must I<start> at the beginning of the line:

=begin programlisting

    sub some_function {
        my $ingredients =<<'END_INGREDIENTS';
        Two eggs
        One cup flour
        Two ounces butter
        One-quarter teaspoon salt
        One cup milk
        One drop vanilla
        Season to taste
    B<END_INGREDIENTS>
    }

=end programlisting

=begin sidebar Heredocs and Indentation

If the identifier I<begins> with whitespace, that same whitespace must be
present before the ending delimiter--that is, C<<< <<' END_HEREDOC'>> >>> needs
a leading space before C<END_HEREDOC>. Yet if you indent the identifier, Perl
will I<not> remove equivalent whitespace from the start of each line of the
heredoc. Keep that design wart in mind; it'll eventually surprise you.

=end sidebar

Using a string in a non-string context will induce coercion (L<coercion>).

=head2 Unicode and Strings

Z<unicode>

X<Unicode>

I<Unicode> is a system used to represent the characters of the world's written
languages. Most English text uses a character set of only 127 characters (which
requires seven bits of storage and fits nicely into eight-bit bytes), but it's
naE<iuml>ve to believe that you won't someday need an umlaut.

Perl strings can represent either of two separate but related data types:

X<codepoint>

=over 4

=item Sequences of Unicode characters

Each character has a I<codepoint>, a unique number which identifies it in the
Unicode character set.

=item Sequences of octets

X<octet>

Binary data in a sequence of I<octets>--8 bit numbers, each of which can
represent a number between 0 and 255.

=back

=begin tip Words Matter

Why I<octet> and not I<byte>? An octet is unambiguously eight bits. A byte can
be fewer or more bits, depending on esoteric hardware. Assuming that one
character fits in one byte will cause you no end of Unicode grief. Separate the
idea of memory storage from character representation. Forget that you ever
heard of bytes.

=end tip

Unicode strings and binary strings look superficially similar. Each has a
C<length()>. Each supports standard string operations such as concatenation,
splicing, and regular expression processing (L<regex>). Any string which is
not purely binary data is textual data, and thus should be a sequence of
Unicode characters.

However, because of how your operating system represents data on disk or from
users or over the network--as sequences of octets--Perl can't know if the data
you read is an image file or a text document or anything else. By default, Perl
treats all incoming data as sequences of octets. It's up to you to give that
data meaning.

=head3 Character Encodings

X<encoding>
X<Unicode; encoding>
X<UTF-8>
X<ASCII>
X<Latin-1>

A Unicode string is a sequence of octets which represents a sequence of
characters. A I<Unicode encoding> maps octet sequences to characters. Some
encodings, such as UTF-8, can encode all of the characters in the Unicode
character set. Other encodings represent only a subset of Unicode characters.
For example, ASCII encodes plain English text (no accented characters allowed),
while Latin-1 can represent text in most languages which use the Latin alphabet
(umlauts, grave and circumflex accents, et cetera).

=begin tip An Evolving Standard

Perl 5.16 supports the Unicode 6.1 standard, 5.18 the 6.2 standard, 5.20 the
6.3 standard, and 5.22 the 7.0 standard. See U<http://unicode.org/versions/>.

=end tip

To avoid most Unicode problems, always decode to and from the appropriate
encoding at the inputs and outputs of your program. Read that sentence again.
Memorize it. You'll be glad of it later.

=head3 Unicode in Your Filehandles

X<C<open>>
X<builtins; C<open>>
X<IO layers>

When you tell Perl that a specific filehandle (L<files>) should interpret data
via specific Unicode encoding, Perl will use an I<IO layer> to convert between
octets and characters. The I<mode> operand of the C<open> builtin allows you to
request an IO layer by name. For example, the C<:utf8> layer decodes UTF-8
data:

=begin programlisting

    open my $fh, '<:utf8', $textfile;

    my $unicode_string = <$fh>;

=end programlisting

X<C<binmode>>
X<builtins; C<binmode>>

Use C<binmode> to apply an IO layer to an existing filehandle:

=begin programlisting

    binmode $fh, ':utf8';
    my $unicode_string = <$fh>;

    binmode STDOUT, ':utf8';
    say $unicode_string;

=end programlisting

If you want to write Unicode to files, you must specify the desired encoding.
Otherwise, Perl will warn you when you print Unicode characters that don't look
like octets; this is what C<Wide character in %s> means.

X<C<utf8::all>>

=begin tip Enable UTF-8 Everywhere

Use the C<utf8::all> module to add the UTF-8 IO layer to all filehandles
throughout your program. The module also enables all sorts of other Unicode
features. It's very handy, but it's a blunt instrument and no substitute for
understanding what your program needs to do.

=end tip

=head3 Unicode in Your Data

X<C<Encode>>
X<C<decode()>>
X<C<encode()>>

The core module C<Encode>'s C<decode()> function converts a sequence of octets
to Perl's internal Unicode representation. The corresponding C<encode()>
function converts from Perl's internal encoding to the desired encoding:

=begin programlisting

    my $from_utf8 = decode('utf8', $data);
    my $to_latin1 = encode('iso-8859-1', $string);

=end programlisting

To handle Unicode properly, you must always I<decode> incoming data via a known
encoding and I<encode> outgoing data to a known encoding. Again, you must know
what kind of data you expect to consume and to produce. Being specific will
help you avoid all kinds of trouble.

=head3 Unicode in Your Programs

X<pragmas; C<utf8>>
X<C<utf8> pragma>
X<encoding>

The easiest way to use Unicode characters in your source code us with the
C<utf8> pragma (L<pragmas>), which tells the Perl parser to decode the rest of
the file as UTF-8 characters. This allows you to use Unicode characters in
strings and identifiers:

=begin programlisting

    use utf8;

    sub E<pound>_to_E<yen> { ... }

    my $yen = E<pound>_to_E<yen>('1000E<pound>');

=end programlisting

To I<write> this code, your text editor must understand UTF-8 and you must save
the file with the appropriate encoding. Again, any two programs which
communicate with Unicode data must agree on the encoding of that data.

X<strings; C<\x{}>>
X<C<\x{}>; escape sequence for character encodings>

Within double-quoted strings, you may also use a Unicode escape sequence to
represent character encodings. The syntax C<\x{}> represents a single
character; place the hex form of the character's Unicode
numberN<U<http://unicode.org/charts/>> within the curly brackets:

=begin programlisting

    my $escaped_thorn = "\x{00FE}";

=end programlisting

X<C<charnames> pragma>
X<pragmas; C<charnames>>
X<strings; C<\N{}>>
X<C<\N{}>; escape sequence for named character encodings>

Some Unicode characters have names, which make them easier for other
programmers to read. Use the C<charnames> pragma to enable named characters via
the C<\N{}> escape syntax:

=begin programlisting

    use charnames ':full';
    use Test::More tests => 1;

    my $escaped_thorn = "\x{00FE}";
    my $named_thorn   = "\N{LATIN SMALL LETTER THORN}";

    is $escaped_thorn, $named_thorn,
        'Thorn equivalence check';

=end programlisting

You may use the C<\x{}> and C<\N{}> forms within regular expressions as well as
anywhere else you may legitimately use a string or a character.

=head3 Implicit Conversion

Most Unicode problems in Perl arise from the fact that a string could be
I<either> a sequence of octets I<or> a sequence of characters. Perl allows you
to combine these types through the use of implicit conversions. When these
conversions are wrong, they're rarely I<obviously> wrong but they're also often
I<spectacularly> wrong in ways that are difficult to debug.

When Perl concatenates a sequence of octets with a sequence of Unicode
characters, it implicitly decodes the octet sequence using the Latin-1
encoding. The resulting string will contain Unicode characters. When you print
Unicode characters, Perl will encode the string using UTF-8, because Latin-1
cannot represent the entire set of Unicode characters--because Latin-1 is a
subset of UTF-8.

The asymmetry between encodings and octets can lead to Unicode strings encoded
as UTF-8 for output and decoded as Latin-1 from input. Worse yet, when the text
contains only English characters with no accents, the bug stays hidden, because
both encodings use the same representation for every character.

You don't have to understand all of this right now; just know that this
behavior happens and that it's not what you want.

=begin programlisting

    my $hello    = "Hello, ";
    my $greeting = $hello . $name;

=end programlisting

If C<$name> contains I<Alice>, you will never notice any problem: because the
Latin-1 representation is the same as the UTF-8 representation. If C<$name>
contains I<JosE<eacute>>, C<$name> can contain several possible values:

=over 4

=item *

C<$name> contains four Unicode characters.

=item *

C<$name> contains four Latin-1 octets representing four Unicode characters.

=item *

C<$name> contains I<five> UTF-8 octets representing four Unicode characters.

=back

The string literal has several possible scenarios:

=over 4

=item * It is an ASCII string literal and contains octets: C<my $hello = "Hello, ";>

=item * It is a Latin-1 string literal with no explicit encoding and contains
octets: C<my $hello = "E<iexcl>Hola, ";>

=item * It is a non-ASCII string literal (the C<utf8> or C<encoding> pragma is
in effect) and contains Unicode characters: C<my $hello = "KuirabE<aacute>, ";>

=back

If both C<$hello> and C<$name> are Unicode strings, the concatenation will
produce another Unicode string.

If both strings are octet sequences, Perl will concatenate them into a new
octet sequence. If both values are octets of the same encoding--both Latin-1,
for example, the concatenation will work correctly. If the octets do not share
an encoding--for example, a concatenation appending UTF-8 data to Latin-1
data--then the resulting sequence of octets makes sense in I<neither> encoding.
This could happen if the user entered a name as UTF-8 data and the greeting
were a Latin-1 string literal, but the program decoded neither.

If only one of the values is a Unicode string, Perl will decode the other as
Latin-1 data. If this is not the correct encoding, the resulting Unicode
characters will be wrong. For example, if the user input were UTF-8 data and
the string literal were a Unicode string, the name would be incorrectly decoded
into five Unicode characters to form I<JosE<Atilde>E<copy>> (I<sic>) instead of
I<JosE<eacute>> because the UTF-8 data means something else when decoded as
Latin-1 data.

Again, you don't have to follow all of the details here if you remember this:
always decode on input and encode on output.

X<perl.com>

See C<perldoc perluniintro> for a far more detailed explanation of Unicode,
encodings, and how to manage incoming and outgoing data in a Unicode world. For
I<far> more detail about managing Unicode effectively throughout your programs,
see Tom Christiansen's answer to "Why does Modern Perl avoid UTF-8 by
default?"N<U<http://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/6163129#6163129>>
and his "Perl Unicode Cookbook"
seriesN<U<http://www.perl.com/pub/2012/04/perlunicook-standard-preamble.html>>.

=begin sidebar Unicode Strings

X<C<unicode_strings>>
X<pragmas; C<feature>>

If you work with Unicode in Perl, use at least Perl 5.18 (and ideally the
latest version). See also the C<feature> pragma for information on the
C<unicode_strings> feature.

=end sidebar

=head2 Numbers

X<numbers>
X<integers>
X<floating-point values>

Perl supports numbers as both integers and floating-point values. You may
represent them with scientific notation as well as in binary, octal, and
hexadecimal forms:

=begin programlisting

    my $integer   = 42;
    my $float     = 0.007;
    my $sci_float = 1.02e14;
    my $binary    = B<0b>101010;
    my $octal     = B<0>52;
    my $hex       = B<0x>20;

    # only in Perl 5.22
    my $hex_float = B<0x>1.0p-3;

=end programlisting

X<numbers; representation prefixes>
X<C<0b>>
X<C<0>>
X<C<0x>>

The numeric prefixes C<0b>, C<0>, and C<0x> specify binary, octal, and hex
notation respectively. Be aware that a leading zero on an integer I<always>
indicates octal mode.

X<numbers; underscore separator>
X<underscore>

=begin tip When 1.99 + 1.99 is 4

Even though you can write floating-point values explicitly with perfect
accuracy, Perl--like most programming languages--represents them internally in
a binary format. This representation is sometimes imprecise in specific ways;
consult C<perldoc perlnumber> for more details. Perl 5.22 allows you to use a
hexadecimal representation of floating point values, so as to keep maximum
precision. See "Scalar value constructors" in C<perldoc perldata> for more
information.

=end tip

You may I<not> use commas to separate thousands in numeric literals, as the
parser will interpret them as the comma operator. Instead, use underscores.
These three examples are equivalent, though the second might be the most
readable:

=begin programlisting

    my $billion = 1000000000;
    my $billion = 1_000_000_000;
    my $billion = 10_0_00_00_0_0_0;

=end programlisting

X<C<Scalar::Util>>
X<C<looks_like_number()>>

Because of coercion (L<coercion>), Perl programmers rarely have to worry about
converting incoming data to numbers. Perl will treat anything which looks like
a number I<as> a number when evaluated in a numeric context. In the rare
circumstances where I<you> need to know if something looks like a number
without evaluating it in a numeric context, use the C<looks_like_number>
function from the core module C<Scalar::Util>. This function returns a true
value if Perl will consider the given argument numeric.

X<C<Regexp::Common>>

The C<Regexp::Common> module from the CPAN provides several well-tested regular
expressions to identify more specific I<types> of numeric values such as whole
numbers, integers, and floating-point values.

X<C<Math::BigInt>>
X<C<Math::BigFloat>>

=begin tip Numeric Size Limits

What's the maximum size of a value you can represent in Perl? It depends;
you're probably using a 64-bit build, so the largest integer is C<(2**31) - 1>
and the smallest is C<-(2**31)>--though see C<perldoc perlnumber> for more
thorough details. Use C<Math::BigInt> and C<Math::BigFloat> to handle with
larger or smaller or more precise numbers.

=end tip

=head2 Undef

X<C<undef>>

Perl's C<undef> value represents an unassigned, undefined, and unknown value.
Declared but undefined scalar variables contain C<undef>:

=begin programlisting

    my $name = undef;   # unnecessary assignment
    my $rank;           # also contains undef

=end programlisting

X<C<undef>; coercions>

C<undef> evaluates to false in boolean a context. Evaluating C<undef> in a
string context--such as interpolating it into a string:

=begin programlisting

    my $undefined;
    my $defined = $undefined . '... and so forth';

=end programlisting

... produces an C<uninitialized value> warning:

=begin screen

    Use of uninitialized value $undefined in
    concatenation (.) or string...

=end screen

X<builtins; C<defined>>

The C<defined> builtin returns a true value if its operand evaluates to a
defined value (anything other than C<undef>):

=begin programlisting

    my $status = 'suffering from a cold';

    say B<defined> $status;  # 1, which is a true value
    say B<defined> undef;    # empty string; a false value

=end programlisting

=head2 The Empty List

X<empty list>
X<C<()>; empty list>

When used on the right-hand side of an assignment, the C<()> construct
represents an empty list. In scalar context, this evaluates to C<undef>. In
list context, it is an empty list. When used on the left-hand side of an
assignment, the C<()> construct imposes list context. Hence this idiom
(L<idioms>) to count the number of elements returned from an expression in list
context without using a temporary variable:

=begin programlisting

    my $count = B<()> = get_clown_hats();

=end programlisting

Because of the right associativity (L<associativity>) of the assignment
operator, Perl first evaluates the second assignment by calling
C<get_clown_hats()> in list context. This produces a list.

Assignment to the empty list throws away all of the values of the list, but
that assignment takes place in scalar context, which evaluates to the number of
items on the right hand side of the assignment. As a result, C<$count> contains
the number of elements in the list returned from C<get_clown_hats()>.

This idiom often confuses new programmers, but with practice, you'll understand
how Perl's fundamental design features fit together.

=head2 Lists

X<lists>

A list is a comma-separated group of one or more expressions. Lists may occur
verbatim in source code as values:

=begin programlisting

    my @first_fibs = B<(1, 1, 2, 3, 5, 8, 13, 21);>

=end programlisting

... as targets of assignments:

=begin programlisting

    my B<($package, $filename, $line)> = caller();

=end programlisting

... or as lists of expressions:

=begin programlisting

    say B<< name(), ' => ', age() >>;

=end programlisting

Parentheses do not I<create> lists. The comma operator creates lists. The
parentheses in these examples merely group expressions to change their
I<precedence> (L<precedence>).

X<operators; range>
X<operators; C<..>>
X<C<..>; range operator>

As an example of lists without parens, use the range operator to create lists
of literals in a compact form:

=begin programlisting

    my @chars = 'a' .. 'z';
    my @count = 13 .. 27;

=end programlisting

X<operators; C<qw()>>
X<C<qw()>; quote words operator>

Use the C<qw()> operator to split a literal string on whitespace to produce a
list of strings. As this is a quoting operator, you may choose any delimiters
you like:

=begin programlisting

    my @stooges = qw! Larry Curly Moe Shemp Joey Kenny !;

=end programlisting

=begin tip No Comment Please

Perl will emit a warning if a C<qw()> contains a comma or the comment character
(C<#>), because not only are such characters rare in a C<qw()>, their presence
is often a mistake.

=end tip

Lists can (and often do) occur as the results of expressions, but these lists
do not appear literally in source code.

Lists and arrays are not interchangeable in Perl. Lists are values. Arrays are
containers. You may store a list in an array and you may coerce an array to a
list, but they are separate entities. For example, indexing into a list always
occurs in list context. Indexing into an array can occur in scalar context (for
a single element) or list context (for a slice):

=begin programlisting

    # don't worry about the details right now
    sub context
    {
        my $context = wantarray();

        say defined $context
             ? $context
                 ? 'list'
                 : 'scalar'
             : 'void';
        return 0;
    }

    my @list_slice  = (1, 2, 3)[context()];
    my @array_slice = @list_slice[context()];
    my $array_index = $array_slice[context()];

    say context(); # list context
    context();     # void context

=end programlisting
