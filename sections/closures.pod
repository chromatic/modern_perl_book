=head1 Closures

Z<closures>
X<functions; higher order>
X<higher order functions>

Every time control flow enters a function, that function gets a new environment
representing that invocation's lexical scope (L<scope>). That applies equally
well to anonymous functions (L<anonymous_functions>). The implication is
powerful. The computer science term I<higher order functions> refers to
functions which manipulate other functions. Closures show off this power.

=head2 Creating Closures

X<closures>
X<functions; closures>

A I<closure> is a function that uses lexical variables from an outer scope.
You've probably already created and used closures without realizing it:

=begin programlisting

    package Invisible::Closure;

    my $filename = shift @ARGV;

    sub get_filename { return $filename }

=end programlisting

If this code seems straightforward to you, good! I<Of course> the
C<get_filename()> function can see the C<$filename> lexical. That's how scope
works!

Suppose you want to iterate over a list of items without managing the iterator
yourself.  You can create a function which returns a function that, when
invoked, will return the next item in the iteration:

=begin programlisting

    sub make_iterator
    {
        my @items = @_;
        my $count = 0;

        return sub
        {
            return if $count == @items;
            return $items[ $count++ ];
        }
    }

    my $cousins = make_iterator(
        qw( Rick Alex Kaycee Eric Corey Mandy Christine )
    );

    say $cousins->() for 1 .. 5;

=end programlisting

Even though C<make_iterator()> has returned, the anonymous function, stored in
C<$cousins>, has closed over the values of these variables as they existed
within the invocation of C<make_iterator()>. Their values persist
(L<reference_counts>).

Because every invocation of C<make_iterator()> creates a separate lexical
environment, the anonymous sub it creates and returns closes over a unique
lexical environment:

=begin programlisting

    my $aunts = make_iterator(
        qw( Carole Phyllis Wendy Sylvia Monica Lupe )
    );

    say $cousins->();
    say $aunts->();

=end programlisting

Because C<make_iterator()> does not return these lexicals by value or by
reference, no other Perl code besides the closure can access them. They're
encapsulated as effectively as any other lexical encapsulation, although any
code which shares a lexical environment can access these values. This idiom
provides better encapsulation of what would otherwise be a file or package
global variable:

=begin programlisting

    {
        my $private_variable;

        sub set_private { $private_variable = shift }
        sub get_private { $private_variable }
    }

=end programlisting

Be aware that you cannot I<nest> named functions. Named functions have package
global scope. Any lexical variables shared between nested functions will go
unshared when the outer function destroys its first lexical environmentN<If
that's confusing to you, imagine the implementation.>.

=begin tip Invasion of Privacy

X<CPAN; C<PadWalker>>

The CPAN module C<PadWalker> lets you violate lexical encapsulation, but anyone
who uses it and breaks your code earns the right to fix any concomitant bugs
without your help.

=end tip

=head2 Uses of Closures

Iterating over a fixed-sized list with a closure is interesting, but closures
can do much more, such as iterating over a list which is too expensive to
calculate or too large to maintain in memory all at once. Consider a function
to create the Fibonacci series as you need its elements. Instead of
recalculating the series recursively, use a cache and lazily create the
elements you need:

=begin programlisting

    sub gen_fib
    {
        my @fibs = (0, 1);

        return sub
        {
            my $item = shift;

            if ($item >= @fibs)
            {
                for my $calc (@fibs .. $item)
                {
                    $fibs[$calc] = $fibs[$calc - 2]
                                 + $fibs[$calc - 1];
                }
            }
            return $fibs[$item];
        }
    }

=end programlisting

Every call to the function returned by C<gen_fib()> takes one argument, the
I<n>th element of the Fibonacci series. The function generates all preceding
values in the series as necessary, caches them, and returns the requested
element--even delaying computation until absolutely necessary. Yet there's a
pattern specific to caching intertwined with the numeric series. What happens
if you extract the cache-specific code (initialize a cache, execute custom code
to populate cache elements, and return the calculated or cached value) to a
function C<generate_caching_closure()>?

=begin programlisting

    sub gen_caching_closure
    {
        my ($calc_element, @cache) = @_;

        return sub
        {
            my $item = shift;

            $calc_element->($item, \@cache)
                unless $item < @cache;

            return $cache[$item];
        };
    }

=end programlisting

=begin tip Fold, Apply, and Filter

The builtins C<map>, C<grep>, and C<sort> are themselves higher-order
functions.

=end tip

Now C<gen_fib()> can become:

=begin programlisting

    sub gen_fib
    {
        my @fibs = (0, 1, 1);

        return gen_caching_closure(
            sub
            {
                my ($item, $fibs) = @_;

                for my $calc ((@$fibs - 1) .. $item)
                {
                    $fibs->[$calc] = $fibs->[$calc - 2]
                                   + $fibs->[$calc - 1];
                }
            },
            @fibs
        );
    }

=end programlisting

The program behaves as it did before, but the use of function references and
closures separates the cache initialization behavior from the calculation of
the next number in the Fibonacci series. Customizing the behavior of code--in
this case, C<gen_caching_closure()>--by passing in a function allows tremendous
flexibility.

=head2 Closures and Partial Application

Z<partial_application>

Closures can also I<remove> unwanted genericity. Consider the case of a
function which takes several parameters:

=begin programlisting

    sub make_sundae
    {
        my %args = @_;

        my $ice_cream = get_ice_cream( $args{ice_cream} );
        my $banana    = get_banana( $args{banana} );
        my $syrup     = get_syrup( $args{syrup} );
        ...
    }

=end programlisting

Myriad customization possibilities might work very well in a full-sized ice
cream store, but for a drive-through ice cream cart where you only serve French
vanilla ice cream on Cavendish bananas, every call to C<make_sundae()> passes
arguments that never change.

X<partial application>

A technique called I<partial application> allows you to bind I<some> of the
arguments to a function so that you can provide the others later. Wrap the
function you intend to call in a closure and pass the bound arguments.

Consider an ice cream cart which only serves French Vanilla ice cream over
Cavendish bananas:

=begin programlisting

    my $make_cart_sundae = sub
    {
        return make_sundae( @_,
            ice_cream => 'French Vanilla',
            banana    => 'Cavendish',
        );
    };

=end programlisting

X<CPAN; C<Sub::Install>>

Instead of calling C<make_sundae()> directly, invoke the function reference in
C<$make_cart_sundae> and pass only the interesting arguments, without worrying
about forgetting the invariants or passing them incorrectlyN<You can even use
C<Sub::Install> from the CPAN to import this function into another namespace
directly.>.

X<I<Higher Order Perl>>

This is only the start of what you can do with higher order functions. Mark
Jason Dominus's I<Higher Order Perl> is the canonical reference on first-class
functions and closures in Perl. Read it online at
U<http://hop.perl.plover.com/>.
