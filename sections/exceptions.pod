=head1 Exceptions

Z<exceptions>

Programming would be simpler if everything always worked as intended.
Unfortunately, files you expect to exist don't.  Sometimes you run out of disk
space.  Your network connection vanishes.  The database stops accepting new
data.

X<exceptions>

Exceptional cases happen, and robust software must handle those exceptional
conditions.  If you can recover, great!  If you can't, sometimes the best you
can do is retry or at least log all of the relevant information for further
debugging.  Perl 5 handles exceptional conditions through the use of
I<exceptions>: a dynamically-scoped form of control flow that lets you handle
errors in the most appropriate place.

=head2 Throwing Exceptions

Z<throwing_exceptions>

Consider the case where you need to open a file for logging.  If you cannot
open the file, something has gone wrong.  Use C<die> to throw an exception:

=begin programlisting

    sub open_log_file
    {
        my $name = shift;
        open my $fh, '>>', $name
            B<or die "Can't open logging file '$name': $!";>
        return $fh;
    }

=end programlisting

X<builtins; C<die>>
X<exceptions; throwing>
X<exceptions; throwing strings>
X<exceptions; C<die>>
X<C<$@>>
X<exceptions; C<$@>>

C<die()> sets the global variable C<$@> to its argument and immediately exits
the current function I<without returning anything>.  If the calling function
does not explicitly handle this exception, the exception will propagate upwards
to every caller until something handles the exception or the program exits with
an error message.

=begin sidebar

This dynamic scoping of exception throwing and handling is the same as the
dynamic scoping of C<local> symbols (L<dynamic_scope>).

=end sidebar

=head2 Catching Exceptions

Z<catching_exceptions>

X<exceptions; catching>

Uncaught exceptions eventually terminate the program.  Sometimes this is
useful; a system administration program run from cron (a Unix jobs scheduler)
might throw an exception when the error logs have filled; this could page an
administrator that something has gone wrong.  Yet many other exceptions should
not be fatal; good programs can recover from them, or at least save their
state and exit more cleanly.

X<builtins; C<eval>>
X<C<eval>; block>

To catch an exception, use the block form of the C<eval> operator:

=begin programlisting

    # log file may not open
    my $fh = eval { open_log_file( 'monkeytown.log' ) };

=end programlisting

As with all blocks, the block argument to C<eval> introduces a new scope.  If
the file open succeeds, C<$fh> will contain the filehandle.  If it fails,
C<$fh> will remain undefined, and Perl will move on to the next statement in
the program.

If C<open_log_file()> called other functions which called other functions, and
if one of those functions threw its own exception, this C<eval> could catch it,
if nothing else did.  There is no requirement that your exception handlers
catch only those exceptions you expect.

To check which exception you've caught (or if you've caught an exception at
all), check the value of C<$@>:

=begin programlisting

    # log file may not open
    my $fh = eval { open_log_file( 'monkeytown.log' ) };

    # caught exception
    B<if ($@) { ... }>

=end programlisting

Of course, C<$@> is a I<global> variable.  For optimal safety, C<local>ize its
value before you attempt to catch an exception:

=begin programlisting

    B<local $@;>

    # log file may not open
    my $fh = eval { open_log_file( 'monkeytown.log' ) };

    # caught exception
    if ($@) { ... }

=end programlisting

X<exceptions; rethrowing>

You may check the string value of C<$@> against expected exceptions to see if
you can handle the exception or if you should throw it again:

=begin programlisting

    if (my $exception = $@)
    {
        die $exception unless $exception =~ /^Can't open logging file/;
        $fh = log_to_syslog();
    }

=end programlisting

=begin sidebar

Copy C<$@> to C<$exception> to avoid the possibility of subsequent code
clobbering the global variable C<$@>.  You never know what else has used
an C<eval> block elsewhere and reset C<$@>.

=end sidebar

Rethrow an exception by calling C<die()> again, passing C<$@>.

X<exceptions; throwing objects>

You may find the idea of using regular expressions against the value of C<$@>
distasteful; you can also use an I<object> with C<die>.  Admittedly, this is
rare.  C<$@> I<can> contain any arbitrary reference, but in practice it seems
to be 95% strings and 5% objects.

X<exceptions; custom classes with C<Exception::Class>>
X<C<Exception::Class>>

As an alternative to writing your own exception system, see the CPAN
distribution C<Exception::Class>.

=head2 Exception Caveats

Z<exception_caveats>

X<exceptions; caveats>

Using C<$@> correctly can be tricky; the global nature of the variable leaves
it open to several subtle flaws:

=over 4

=item * UnC<local>ized uses further down the dynamic scope may reset its value

=item * The destruction of any objects at scope exit from exception throwing
may call C<eval> and change its value

=item * It may contain an object which overrides its boolean value to return
false

=item * A signal handler (especially the C<DIE> signal handler) may change its
value when you do not expect it

=back

X<exceptions; handling safely with C<Try::Tiny>>
X<C<Try::Tiny>>

Writing a perfectly safe and sane exception handler is difficult.  The
C<Try::Tiny> distribution from the CPAN is short, easy to install, easy to
understand, and very easy to use:

=begin programlisting

    use Try::Tiny;

    my $fh = try   { open_log_file( 'monkeytown.log' ) }
             catch { ... };

=end programlisting

Not only is the syntax somewhat nicer than the Perl 5 default, but the module
handles all of those edge cases for you without your knowledge.

=head2 Built-in Exceptions

Z<builtin_exceptions>

X<exceptions; core>

Perl 5 has several exceptional conditions you can catch with an C<eval> block.
C<perldoc perldiag> lists them as "trappable fatal errors".  Most are syntax
errors thrown during compilation.  Others are runtime errors.  Some of these
may be worth catching; syntax errors rarely are.  The most interesting or
likely exceptions occur for:

=over 4

=item * Using a disallowed key in a locked hash (L<locked_hashes>)

=item * Blessing a non-reference (L<blessed_references>)

=item * Calling a method on an invalid invocant (L<moose>)

=item * Failing to find a method of the given name on the invocant

=item * Using a tainted value in an unsafe fashion (L<taint>)

=item * Modifying a read-only value

=item * Performing an invalid operation on a reference (L<references>)

=back

If you have enabled fatal lexical warnings (L<registering_warnings>), you can
catch the exceptions they throw.  The same goes for exceptions from C<autodie>
(L<autodie>).
