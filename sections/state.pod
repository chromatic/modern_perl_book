=head1 State versus Closures

Z<state>

Closures (L<closures>) take advantage of lexical scope (L<scope>) to mediate
access to semi-private variables. Even named functions can take advantage of
lexical bindings:

=begin programlisting

    {
        my $safety = 0;

        sub enable_safety  { $safety = 1 }
        sub disable_safety { $safety = 0 }

        sub do_something_awesome
        {
            return if $safety;
            ...
        }
    }

=end programlisting

The encapsulation of functions to toggle the safety allows all three functions
to share state without exposing the lexical variable directly to external code.
This idiom works well for cases where external code should be able to change
internal state, but it's clunkier when only one function needs to manage that
state.

Suppose every hundredth person at your ice cream parlor gets free sprinkles:

=begin programlisting

    my $cust_count = 0;

    sub serve_customer
    {
        $cust_count++;

        my $order = shift;

        add_sprinkles($order) if $cust_count % 100 == 0;

        ...
    }

=end programlisting

X<state>
X<builtins; C<state>>

This approach I<works>, but creating a new lexical scope for a single function
introduces more accidental complexity than is necessary. The C<state> builtin
allows you to declare a lexically scoped variable with a value that persists
between invocations:

=begin programlisting

    sub serve_customer
    {
        B<state $cust_count = 0;>
        $cust_count++;

        my $order = shift;
        add_sprinkles($order)
            if ($cust_count % 100 == 0);

        ...
    }

=end programlisting

X<C<feature>>
X<C<feature>; C<state>>

You must enable this feature explicitly by using a module such as
C<Modern::Perl>, the C<feature> pragma (L<pragmas>), or requiring a specific
version of Perl of 5.10 or newer (with C<use 5.010;> or C<use 5.012;>, for
example).

C<state> also works within anonymous functions:

=begin programlisting

    sub make_counter
    {
        return sub
        {
             B<state $count = 0;>
             return $count++;
         }
    }

=end programlisting

... though there are few obvious benefits to this approach.

=head1 State versus Pseudo-State

Perl 5.10 deprecated a technique from previous versions of Perl by which you
could effectively emulate C<state>. A named function could close over its
previous lexical scope by abusing a quirk of implementation. Using a postfix
conditional which evaluates to false with a C<my> declaration avoided
I<reinitializing> a lexical variable to C<undef> or its initialized value.

Any use of a postfix conditional expression modifying a lexical variable
declaration now produces a deprecation warning. It's too easy to write
inadvertently buggy code with this technique; use C<state> instead where
available, or a true closure otherwise. Rewrite this idiom when you encounter
it:

=begin programlisting

    sub inadvertent_state
    {
        # my $counter  = 1 if 0; # DEPRECATED; don't use
        state $counter = 1;      # use instead

        ...
    }

=end programlisting
