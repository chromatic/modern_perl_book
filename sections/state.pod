=head1 State versus Closures

Z<state>

Closures (L<closures>) are an easy, effective, and safe way to make data
persist between function invocations without using global variables.  If you
need to share variables between named functions, you can introduce a new scope
(L<scope>) for only those function declarations:

=begin programlisting

    {
        my $safety = 0;

        sub enable_safety  { $safety = 1 }
        sub disable_safety { $safety = 0 }

        sub do_something_awesome
        {
            return if $safety;
            ...
        }
    }

=end programlisting

The encapsulation of functions to toggle the safety allows all three functions
to share state without exposing the lexical variable directly to external code.
This idiom works well for cases where external code should be able to change
internal state, but it's clunkier when only one function needs to manage that
state.

Suppose that you want to count the number of customers at your ice cream
parlor.  Every hundredth person gets free sprinkles:

=begin programlisting

    {
        my $cust_count = 0;

        sub serve_customer
        {
            $cust_count++;

            my $order = shift;

            add_sprinkles($order) if $cust_count % 100 == 0)

            ...
        }
    }

=end programlisting

X<state>

This approach I<works>, but creating a new lexical scope for a single function
introduces more accidental complexity than is necessary.  The C<state> keyword
allows you to declare a lexically scoped variable with a value that persists
between invocations:

=begin programlisting

    sub serve_customer
    {
        B<state $cust_count = 0;>
        $cust_count++;

        my $order = shift;
        add_sprinkles($order) if $cust_count % 100 == 0)

        ...
    }

=end programlisting

X<feature>
X<feature; state>

You must enable this feature explicitly by using a module such as
C<Modern::Perl>, the C<feature> pragma, or requiring a specific version of Perl
of 5.10 or newer (with C<use 5.010;> or C<use 5.012;>, for example).

You may also use C<state> within anonymous functions, such as the canonical
counter example:

=begin programlisting

    sub make_counter
    {
        return sub
        {
             B<state $count = 0;>
             return $count++;
         }
    }

=end programlisting

... though there are few obvious benefits to this approach.

=begin sidebar

Perl 5.10 deprecated a technique from previous versions of Perl by which you
could effectively emulate C<state>.  Using a postfix conditional which evaluates
to false with a C<my> declaration avoids I<reinitializing> a lexical variable
to C<undef> or its initialized value.  In effect, a named function can close
over its previous lexical scope by abusing a quirk of implementation.


Any use of a postfix conditional expression modifying a lexical variable
declaration now produces a deprecation warning.  It's too easy to write
inadvertently buggy code with this technique; use C<state> instead where
available, or a true closure otherwise.  Avoid this idiom, but understand it if
you encounter it:

=begin programlisting

    sub inadvertent_state
    {
        # DEPRECATED; do not use
        my $counter = 1 if 0;

        ...
    }

=end programlisting

=end sidebar
