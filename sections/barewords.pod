=head1 Barewords

Z<barewords>

Perl is a malleable language. You can write programs in the most creative,
maintainable, obfuscated, or bizarre fashion you prefer. Maintainability is a
concern of good programmers, but Perl doesn't presume to dictate what I<you>
consider maintainable.

X<barewords>
X<C<strict> pragma>
X<pragmas; C<strict>>

Perl's parser understands Perl's builtins and operators. It uses sigils to
identify variables and other punctuation to recognize function and method
calls.  Yet sometimes the parser has to guess what you mean, especially when
you use a I<bareword>--an identifier without a sigil or other syntactically
significant punctuation.

=head2 Good Uses of Barewords

X<barewords; pros>

Though the C<strict> pragma (L<pragmas>) rightly forbids ambiguous barewords,
some barewords are acceptable.

=head3 Bareword hash keys

X<hashes; bareword keys>
X<C<+>; unary operator>

Hash keys in Perl 5 are usually I<not> ambiguous because the parser can
identify them as string keys; C<pinball> in C<$games{pinball}> is obviously a
string.

Occasionally this interpretation is not what you want, especially when you
intend to I<evaluate> a builtin or a function to produce the hash key. In this
case, disambiguate by providing arguments, using function argument parentheses,
or prepending unary plus to force the evaluation of the builtin:

=begin programlisting

    # the literal 'shift' is the key
    my $value = $items{B<shift>};

    # the value produced by shift is the key
    my $value = $items{B<shift @_>}

    # unary plus uses the builtin shift
    my $value = $items{B<+>shift};

=end programlisting

=head3 Bareword package names

X<packages; bareword names>

Package names in Perl 5 are also barewords. If you hew to naming conventions
where package names have initial capitals and functions do not, you'll rarely
encounter naming collisions, but the Perl 5 parser must determine how to parse
C<< Package->method() >>. Does it mean "call a function named C<Package()> and
call C<method()> on its return value?" or does it mean "Call a method named
C<method()> in the C<Package> namespace?" The answer varies depending on what
code the parser has already encountered in the current namespace.

Force the parser to treat C<Package> as a package name by appending the package
separator (C<::>)N<Even among people who understand why this works, very few
people do it.>:

=begin programlisting

    # probably a class method
    Package->method();

    # definitely a class method
    Package::->method();

=end programlisting

=head3 Bareword named code blocks

X<C<BEGIN>>
X<C<DESTROY>>
X<C<AUTOLOAD>>
X<C<INIT>>
X<C<UNITCHECK>>
X<C<CHECK>>
X<C<END>>

The special named code blocks C<AUTOLOAD>, C<BEGIN>, C<CHECK>, C<DESTROY>,
C<END>, C<INIT>, and C<UNITCHECK> are barewords which I<declare> functions
without the C<sub> builtin. You've seen this before (L<code_generation>):

=begin programlisting

    package Monkey::Butler;

    BEGIN { initialize_simians( __PACKAGE__ ) }

    sub AUTOLOAD { ... }

=end programlisting

While you I<can> elide C<sub> from C<AUTOLOAD()> declarations, few people do.

=head3 Bareword constants

X<constants; barewords>

Constants declared with the C<constant> pragma are usable as barewords:

=begin programlisting

    # don't use this for real authentication
    use constant NAME     => 'Bucky';
    use constant PASSWORD => '|38fish!head74|';

    return unless $name eq NAME && $pass eq PASSWORD;

=end programlisting

Note that these constants do I<not> interpolate in double-quoted strings.

X<prototypes; barewords>

Constants are a special case of prototyped functions (L<prototypes>). When you
predeclare a function with a prototype, the parser knows how to treat that
function and will warn about ambiguous parsing errors. All other drawbacks of
prototypes still apply.

=head2 Ill-Advised Uses of Barewords

X<barewords; cons>

No matter how cautiously you code, barewords still produce ambiguous code. You
can avoid most uses, but you will encounter several types of barewords in
legacy code.

=head3 Bareword function calls

X<barewords; function calls>
X<C<B::Deparse>>

Code written without C<strict 'subs'> may use bareword function names. Adding
parentheses makes the code pass strictures.  Use C<perl -MO=Deparse,-p> (see
C<perldoc B::Deparse>) to discover how Perl parses them, then parenthesize
accordingly.

=head3 Bareword hash values

X<barewords; hash values>

Some old code may not take pains to quote the I<values> of hash pairs:

=begin programlisting

    # poor style; do not use
    my %parents =
    (
        mother => Annette,
        father => Floyd,
    );

=end programlisting

When neither the C<Floyd()> nor C<Annette()> functions exist, Perl will
interpret these barewords as strings. C<strict 'subs'> will produce an error in
this situation.

=head3 Bareword filehandles

X<barewords; filehandles>

Prior to lexical filehandles (L<lexical_filehandles>), all file and directory
handles used barewords. You can almost always safely rewrite this code to use
lexical filehandles; the exceptions are C<STDIN>, C<STDOUT>, and C<STDERR>.
Fortunately, Perl's parser recognizes these.

=head3 Bareword sort functions

X<barewords; sort functions>
X<C<sort>>
X<builtins; C<sort>>

Finally, the C<sort> builtin can take as its second argument the I<name> of a
function to use for sorting. While this is rarely ambiguous to the parser, it
can confuse I<human> readers. The alternative of providing a function reference in a scalar is little better:

=begin programlisting

    # bareword style
    my @sorted = sort compare_lengths @unsorted;

    # function reference in scalar
    my $comparison = \&compare_lengths;
    my @sorted     = sort $comparison @unsorted;

=end programlisting

The second option avoids the use of a bareword, but the result is one line
longer. Unfortunately, Perl 5's parser I<does not> understand the single-line
version due to the special parsing of C<sort>; you cannot use an arbitrary
expression (such as taking a reference to a named function) where a block or a
scalar might otherwise go.

=begin programlisting

    # does not work
    my @sorted = sort \&compare_lengths @unsorted;

=end programlisting

In both cases, the way C<sort> invokes the function and provides arguments can
be confusing (see C<perldoc -f sort> for the details). Where possible, consider
using the block form of C<sort> instead. If you must use either function form,
consider adding an explanatory comment.
