=head0 *Preface

I<Modern Perl> is one way to describe the way the world's most effective Perl 5
programmers work. They use language idioms. They take advantage of the CPAN.
They show good taste and craft to write powerful, maintainable, scalable,
concise, and effective code. You can learn these skills too!

Perl first appeared in 1987 as a simple tool for system administration. Though
it began by declaring and occupying a comfortable niche between shell scripting
and C programming, it's become a powerful, general-purpose language family.
Perl 5 has a solid history of pragmatism and a bright future of polish and
enhancementN<Perl 6 is a reinvention of programming based on the solid
principles of Perl, but it's a subject of another book.>.

Over Perl's long history--especially the 17 years of Perl 5--our understanding
of what makes great Perl programs has changed. While you can write productive
programs which never take advantage of all the language has to offer, the
global Perl community has invented, borrowed, enhanced, and polished ideas and
made them available to anyone willing to learn them.

=head1 Running Modern Perl

=begin sidebar

The Modern::Perl module from the CPAN (L<cpan>) asks Perl to warn of dubious
constructs and typos and will enable new features introduced in modern releases
of Perl 5. Assume every example in this book begins with:

=begin programlisting

    use Modern::Perl;

=end programlisting

If you cannot yet install this module, you may start your programs with the
rough equivalent:

=begin programlisting

    use 5.012;
    use strict;
    use warnings;
    use autodie;

=end programlisting

=end sidebar

Unless otherwise mentioned, code snippets always assume the basic skeleton of a
program:

=begin programlisting

    #!/usr/bin/perl

    use Modern::Perl;

    # example code here
    ...

=end programlisting

Other code snippets use testing functions such as C<ok()>, C<like()>, and
C<is()> (L<testing>).  That skeleton program is:

=begin programlisting

    #!/usr/bin/perl

    use Modern::Perl;
    B<use Test::More;>

    # example code here
    ...
    done_testing();

=end programlisting

At the time of writing, the current stable Perl 5 release family is Perl 5.14.
The examples in this book work best with Perl 5.12.0 or newer. Many examples
will work on older versions of Perl 5 with modest changes, but you will have
more difficulty with anything older than 5.10.0.

X<Strawberry Perl>
X<ActivePerl>
X<perlbrew>
X<CPAN; C<App::perlbrew>>

If you have no Perl 5 installed (or if you have an old version installed), you
can install a newer release yourself. Windows users, download Strawberry Perl
from U<http://www.strawberryperl.com/> or ActivePerl from
U<http://www.activestate.com/activeperl>. Users of other operating systems with
Perl 5 already installed (and a C compiler and the other development tools),
start by installing the CPAN module C<App::perlbrew>N<See
U<http://search.cpan.org/perldoc?App::perlbrew> for installation
instructions.>.

C<perlbrew> allows you to install and manage multiple versions of Perl 5. This
allows you to switch between versions of Perl 5 as well as to install Perl 5
and CPAN modules in your home directory without affecting the system's version.
If you've ever had to beg your system administrator for permission to install
software, you know how much easier your life can be now.

=head1 Credits

This book would not have been possible without questions, comments,
suggestions, advice, wisdom, and encouragement from many, many people. In
particular, the author and editor thank:

John SJ Anderson, Peter Aronoff, Lee Aylward, Alex Balhatchet, Ævar Arnfjörð
Bjarmason, Matthias Bloch, John Bokma, Vasily Chekalkin, Dmitry Chestnykh, E.
Choroba, Paulo Custodio, Felipe, Shlomi Fish, Jeremiah Foster, Mark Fowler,
John Gabriele, Andrew Grangaard, Bruce Gray, Ask Bjørn Hansen, Tim Heaney,
Robert Hicks, Michael Hind, Mark Hindess, Yary Hluchan, Mike Huffman, Curtis
Jewell, Mohammed Arafat Kamaal, James E Keenan, Yuval Kogman, Jan Krynicky,
Jeff Lavallee, Moritz Lenz, Jean-Baptiste Mazon, Josh McAdams, Gareth
McCaughan, John McNamara, Shawn M Moore, Alex Muntada, Carl Mäsak, Chris
Niswander, Nelo Onyiah, Chas. Owens, ww from PerlMonks, Jess Robinson, Dave
Rolsky, Gabrielle Roth, Andrew Savige, Lorne Schachter, Dan Scott, Alexander
Scott-Johns, Phillip Smith, Christopher E. Stith, Mark A. Stratman, Bryan
Summersett, Audrey Tang, Scott Thomson, Ben Tilly, Sam Vilain, Larry Wall,
Colin Wetherbee, Frank Wiegand, Doug Wilson, Sawyer X, David Yingling, Marko
Zagozen, harleypig, hbm, and sunnavy.

Any remaining errors are the fault of the stubborn author.
