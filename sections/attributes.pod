=head1 Attributes

Z<attributes>

Named entities in Perl--variables and functions--can have additional metadata
attached to them in the form of I<attributes>.  Attributes are names (and,
often, values) which allow certain types of metaprogramming
(L<code_generation>).

=begin sidebar

Declaring attributes can be awkward, and using them effectively is more art
than science.  They're relatively rare in most programs for good reason, though
they I<can> offer compelling benefits of maintenance and clarity.

=end sidebar

=head2 Using Attributes

In its simplest form, an attribute is a colon-preceded identifier attached to a
variable or function declaration:

=begin programlisting

    my $fortress      B<:hidden>;

    sub erupt_volcano B<:ScienceProject> { ... }

=end programlisting

These declarations will cause the invocation of attribute handlers named
C<hidden> and C<ScienceProject>, if they exist for the appropriate type
(scalars and functions, respectively).  If the appropriate handlers do not
exist, Perl will throw a compile-time exception.  These handlers could do
I<anything>.

X<C<Test::Class>>

Attributes may include a list of parameters; Perl treats them as a list of
constant strings, even if they may resemble other values, such as numbers or
variables.  The C<Test::Class> module from the CPAN uses such parametric
arguments to good effect:

=begin programlisting

    sub setup_tests :Test(setup) { ... }

    sub test_monkey_creation :Test(10) { ... }

    sub shutdown_tests :Test(teardown) { ... }

=end programlisting

The C<Test> attribute identifies methods which include test assertions, and
optionally identifies the number of assertions the method intends to run.
While introspection (L<reflection>) of these classes could discover the
appropriate test methods, given well-designed solid heuristics, the C<:Test>
attribute makes the code and its intent unambiguous.

The C<setup> and C<teardown> parameters allow test classes to define their own
support methods without worrying about name clashes or other conflicts due to
inheritance or other class design concerns.  You I<could> enforce a design
where all test classes must override methods named C<setup()> and C<teardown()>
themselves, but the attribute approach gives more flexibility of
implementation.

=begin sidebar

X<Catalyst>

The Catalyst web framework also uses attributes to determine the visibility and behavior of methods within web applications.

=end sidebar

=head2 Drawbacks of Attributes

X<pragmas; C<attributes>>
X<C<attributes> pragma>
X<C<Attribute::Handlers>>

Attributes do have their drawbacks:

=over 4

=item * The canonical pragma for working with attributes (the C<attributes>
pragma) has listed its interface as experimental for many years.  Damian
Conway's core module C<Attribute::Handlers> simplifies their implementation.
Prefer it to C<attributes> whenever possible.

=item * Modules which declare attribute handlers must I<inherit> from
C<Attribute::Handlers> to make the handlers visible to all packages which use
themN<You I<could> also store them in C<UNIVERSAL>, but that is global
pollution and worse design.>.  This is due to the implementation of attributes
in Perl 5 itself.

=item * Attribute handlers take effect during C<CHECK> blocks, making them
inopportune for projects which themselves manipulate the order of parsing and
compilation, such as mod_perl.

=item * Arguments provided to attributes are only strings.
C<Attribute::Handlers> performs some data conversion, but you may have to
disable it occasionally.

=back

X<C<Memoize>>

The worst feature of attributes is their propensity to produce weird syntactic
action at a distance.  Given a snippet of code with attributes, can you predict
their effect?  Good and accurate documentation helps, but if an
innocent-looking declaration on a lexical variable stores a reference to that
variable somewhere, your expectations of the destruction of its contents may be
wrong, unless you read the documentation very carefully.  Likewise, a handler
may wrap a function in another function and replace it in the symbol table
without your knowledge--consider a C<:memoize> attribute which automatically
invokes the core C<Memoize> module.

Complex features can produce compact and idiomatic code.  Perl allows
developers to experiment with multiple designs to find the best representation
for their ideas.  Attributes and other advanced Perl features can help you
solve complex problems, but they can also obfuscate the intent of code that
could otherwise be simple.

Most programs never need this feature.
