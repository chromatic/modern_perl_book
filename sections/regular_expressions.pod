Z<regular_expressions>

=head1 Literals

The simplest regexes are simple substring patterns:

=begin programlisting

    my $name = 'Chatfield';
    say "Found a hat!" if $name =~ B</hat/>;

=end programlisting

X<operators; match>
X<operators; C<//>>
X<operators; C<m//>>
X<operators; C<=~>>
X<C<=~>; regex bind>
X<operators; C<!~>>
X<C<!~>; negated regex bind>
X<regex; atom>
X<atom>

The match operator (C<//> or, more formally, C<m//>) contains a regular
expression--in this example, C<hat>.  Even though that reads like a word, it
means "the C<h> character, followed by the C<a> character, followed by the C<t>
character, appearing anywhere in the string."  Each character in C<hat> is an
I<atom> in the regex: an indivisible unit of the pattern.  The regex binding
operator (C<=~>) is an infix operator (L<fixity>) which applies the regular
expression on its right to the string produced by the expression on its left.
When evaluated in scalar context, a match evaluates to a true value if it
succeeds.

The negated form of the binding operator (C<!~>) evaluates to a false value if
the match succeeds.

=head1 The qr// Operator and Regex Combinations

X<operators; C<qr//>>
X<C<qr//>; compile regex operator>
X<regex; C<qr//>>
X<regex; first-class>

Regexes are first-class entities in modern Perl when created with the C<qr//>
operator:

=begin programlisting

    my $hat = B<qr/hat/>;
    say 'Found a hat!' if $name =~ /$hat/;

=end programlisting

=begin sidebar

The C<like()> function from C<Test::More> works much like C<is()>, except that
its second argument is a regular expression object produced by C<qr//>.

=end sidebar

You may interpolate and combine them into larger and more complex patterns:

=begin programlisting

    my $hat   = qr/hat/;
    my $field = qr/field/;

    say 'Found a hat in a field!' if $name =~ /B<$hat$field>/;

    # or

    like( $name, qr/B<$hat$field>/, 'Found a hat in a field!' );

=end programlisting

=head1 Quantifiers

X<regex; quantifiers>
X<builtins; C<index>>

Regular expressions are far more powerful than previous examples have
demonstrated; you can search for a literal substring within a string with the
C<index> builtin.  Using the regex engine for that is like flying your
autonomous combat helicopter to the corner store to buy spare cheese.

X<regex; quantifiers>
X<regex; zero or one quantifier>
X<C<?>; zero or one regex quantifier>

Regular expressions get more powerful through the use of I<regex quantifiers>,
which allow you to specify how often a regex component may appear in a matching
string.  The simplest quantifier is the I<zero or one quantifier>, or C<?>:

=begin programlisting

    my $cat_or_ct = qr/caB<?>t/;

    like( 'cat', $cat_or_ct, "'cat' matches /ca?t/" );
    like( 'ct',  $cat_or_ct, "'ct' matches /ca?t/"  );

=end programlisting

Any atom in a regular expression followed by the C<?> character means "match
zero or one of this atom."  This regular expression matches if there are zero
or one C<a> characters immediately following a C<c> character and immediately
preceding a C<t> character I<and also> matches if there is one and only one
C<a> character between the C<c> and C<t> characters.

X<regex; one or more quantifier>
X<C<+>; one or more regex quantifier>

The I<one or more quantifier>, or C<+>, matches only if there is at least one
of the preceding atom in the appropriate place in the string to match:

=begin programlisting

    my $one_or_more_a = qr/caB<+>t/;

    like( 'cat',    $one_or_more_a, "'cat' matches /ca+t/"    );
    like( 'caat',   $one_or_more_a, "'caat' matches /ca+t/"   );
    like( 'caaat',  $one_or_more_a, "'caaat' matches /ca+t/"  );
    like( 'caaaat', $one_or_more_a, "'caaaat' matches /ca+t/" );

    unlike( 'ct',   $one_or_more_a, "'ct' does not match /ca+t/" );

=end programlisting

There is no theoretical limit to the number of quantified atoms which can
match.

X<quantifiers; zero or more>
X<C<*>; zero or more regex quantifier>

The I<zero or more quantifier> is C<*>; it matches if there are zero or more
instances of the quantified atom in the string to match:

=begin programlisting

    my $zero_or_more_a = qr/caB<*>t/;

    like( 'cat',    $zero_or_more_a, "'cat' matches /ca*t/"    );
    like( 'caat',   $zero_or_more_a, "'caat' matches /ca*t/"   );
    like( 'caaat',  $zero_or_more_a, "'caaat' matches /ca*t/"  );
    like( 'caaaat', $zero_or_more_a, "'caaaat' matches /ca*t/" );
    like( 'ct',     $zero_or_more_a, "'ct' matches /ca*t/"     );

=end programlisting

This may seem useless, but it combines nicely with other regex features to
indicate that you don't care about what may or may not be in that particular
position in the string to match.  Even so, I<most> regular expressions benefit
from using the C<?> and C<+> quantifiers far more than the C<*> quantifier, as
they avoid expensive backtracking and express your intent more clearly.

X<numeric quantifiers>
X<C<{}>; regex numeric quantifier>

Finally, you can specify the number of times an atom may match with I<numeric
quantifiers>. C<{n}> means that a match must occur exactly I<n> times.

=begin programlisting

    # equivalent to qr/cat/;
    my $only_one_a = qr/caB<{1}>t/;

    like( 'cat', $only_one_a, "'cat' matches /ca{1}t/" );

=end programlisting

C<{n,}> means that a match must occur at least I<n> times, but may occur more
times:

=begin programlisting

    # equivalent to qr/ca+t/;
    my $at_least_one_a = qr/caB<{1,}>t/;

    like( 'cat',    $at_least_one_a, "'cat' matches /ca{1,}t/"    );
    like( 'caat',   $at_least_one_a, "'caat' matches /ca{1,}t/"   );
    like( 'caaat',  $at_least_one_a, "'caaat' matches /ca{1,}t/"  );
    like( 'caaaat', $at_least_one_a, "'caaaat' matches /ca{1,}t/" );

=end programlisting

C<{n,m}> means that a match must occur at least I<n> times and cannot occur
more than I<m> times:

=begin programlisting

    my $one_to_three_a = qr/caB<{1,3}>t/;

    like(   'cat',    $one_to_three_a, "'cat' matches /ca{1,3}t/"           );
    like(   'caat',   $one_to_three_a, "'caat' matches /ca{1,3}t/"          );
    like(   'caaat',  $one_to_three_a, "'caaat' matches /ca{1,3}t/"         );
    unlike( 'caaaat', $one_to_three_a, "'caaaat' does not match /ca{1,3}t/" );

=end programlisting

=head1 Greediness

X<greedy quantifiers>
X<quantifiers; greedy>

The C<+> and C<*> quantifiers by themselves are I<greedy quantifiers>; they
match as much of the input string as possible.  This is particularly pernicious
when matching the "zero or more non-newline characters" pattern of C<.*>:

=begin programlisting

    # a poor regex
    my $hot_meal = qr/hot.*meal/;

    say 'Found a hot meal!' if 'I have a hot meal' =~ $hot_meal;
    say 'Found a hot meal!'
         if 'I did some one-shot, piecemeal work!' =~ $hot_meal;

=end programlisting

Greedy quantifiers always try to match as much of the input string as possible
I<first>, backing off only when it's obvious that the match will not succeed.
You may not be able to fit all of the results into the four boxes in 7 Down if
look for "loam" withN<Assume that C<$letters_only> is a regular expression
which matches only letter characters (L<character_classes>).>:

=begin programlisting

    my $seven_down   = qr/l$letters_only*m/;

=end programlisting

This will match C<Alabama>, C<Belgium>, and C<Bethlehem> before it reaches
C<loam>.  The soil might be nice there, but those words are all too long--and
the matches start in the middle of the words.

X<C<?>; zero or one regex quantifier>
X<C<*?>; non-greedy zero or one regex quantifier>

Turn a greedy quantifier into a non-greedy quantifier by appending the C<?>
quantifier:

=begin programlisting

    my $minimal_greedy_match = qr/hot.*?meal/;

=end programlisting

When given a non-greedy quantifier, the regular expression engine will prefer
the I<shortest> possible potential match, and will increase the number of
characters identified by the C<.*?> token combination only if the current
number fails to match.  Because C<*> matches zero or more times, the minimal
potential match for this token combination is zero characters:

=begin programlisting

    say 'Found a hot meal' if 'ilikeahotmeal' =~ /$minimal_greedy_match/;

=end programlisting

X<C<+?>; non-greedy one or more regex quantifier>

Use C<+?> to match one or more items non-greedily:

=begin programlisting

    my $minimal_greedy_at_least_one = qr/hot.+?meal/;

    unlike( 'ilikeahotmeal', $minimal_greedy_at_least_one );

    like( 'i like a hot meal', $minimal_greedy_at_least_one );

=end programlisting

X<C<??>; non-greedy zero or one regex quantifier>

The C<?> quantifier modifier also applies to the C<?> (zero or one matches)
quantifier as well as the range quantifiers.  In every case, it causes the
regex to match as little of the input as possible.

The greedy patterns C<.+> and C<.*> are tempting but dangerous.  If you write
regular expression with greedy matches, test them thoroughly with a
comprehensive and automated test suite with representative data to lessen the
possibility of unpleasant surprises.

=head1 Regex Anchors

X<regex; anchors>
X<anchors; start of string>
X<C<\A>; start of string regex metacharacter>

I<Regex anchors> force a match at a specific position in a string.  The I<start
of string anchor> (C<\A>) ensures that any match will start at the beginning of
the string:

=begin programlisting

    # also matches "lammed", "lawmaker", and "layman"
    my $seven_down = qr/\Al${letters_only}{2}m/;

=end programlisting

X<anchors; end of string>
X<C<\Z>; end of string regex metacharacter>

The I<end of line string anchor> (C<\Z>) ensures that any match will I<end> at
the end of the string.

=begin programlisting

    # also matches "loom", which is close enough
    my $seven_down = qr/\Al${letters_only}{2}m\Z/;

=end programlisting

X<word boundary metacharacter>
X<C<\b>; word boundary regex metacharacter>

The I<word boundary metacharacter> (C<\b>) matches only at the boundary between
a word character (C<\w>) and a non-word character (C<\W>).  Thus to find
C<loam> but not C<Belgium>, use the anchored regex:

=begin programlisting

    my $seven_down = qr/\bl${letters_only}{2}m\b/;

=end programlisting

=begin sidebar

Like Perl, there's more than one way to write a regular expression.  Consider
choosing the most expressive and maintainable one.

=end sidebar

=head1 Metacharacters

X<regex; metacharacters>
X<regex; C<.>>
X<C<.>; anything but newline regex metacharacter>

Regular expressions get more powerful as atoms get more general.  For example,
the C<.> character in a regular expression means "match any character except a
newline".  If you wanted to search a list of dictionary words for every word
which might match 7 Down ("Rich soil") in a crossword puzzle, you might write:

=begin programlisting

    for my $word (@words)
    {
        next unless length( $word ) == 4;
        next unless $word =~ /lB<..>m/;
        say "Possibility: $word";
    }

=end programlisting

X<regex; C<\w>>
X<C<\w>; alphanumeric regex metacharacter>

Of course, if your list of potential matches were anything other than a list of
words, this metacharacter could cause false positives, as it also matches
punctuation characters, whitespace, numbers, and many other characters besides
word characters.  The C<\w> metacharacter represents all alphanumeric
characters (in a Unicode sense--L<unicode>) and the underscore:

=begin programlisting

        next unless $word =~ /lB<\w\w>m/;

=end programlisting

X<regex; C<\d>>
X<C<\d>; digit regex metacharacter>

The C<\d> metacharacter matches digits--not just 0-9 as you expect, but any
Unicode digit:

=begin programlisting

    # not a robust phone number matcher
    next unless $potential_phone_number =~ /B<\d>{3}-B<\d>{3}-B<\d>{4}/;
    say "I have your number: $potential_phone_number";

=end programlisting

X<regex; C<\s>>
X<C<\s>; whitespace regex metacharacter>

Use the C<\s> metacharacter to match whitespace, whether a literal space, a tab
character, a carriage return, a form-feed, or a newline:

=begin programlisting

    my $two_three_letter_words = qr/\w{3}B<\s>\w{3}/;

=end programlisting

X<regex; C<\B>>
X<regex; C<\D>>
X<regex; C<\S>>
X<regex; C<\W>>
X<C<\B>; non-word boundary regex metacharacter>
X<C<\D>; non-digit regex metacharacter>
X<C<\S>; non-whitespace regex metacharacter>
X<C<\W>; non-alphanumeric regex metacharacter>

These metacharacters have negated forms.  To match any character I<except> a
word character, use C<\W>.  To match a non-digit character, use C<\D>.  To
match anything but whitespace, use C<\S>.  To match a non-word boundary, use
C<\B>.

The regex engine treats all metacharacters as atoms.

=head1 Character Classes

Z<character_classes>
X<character classes>
X<C<[]>; character class regex metacharacters>

If the range of allowed characters in these four groups isn't specific enough,
you can specify your own I<character classes> by enclosing them in square
brackets:

=begin programlisting

    my $vowels    = qr/B<[>aeiouB<]>/;
    my $maybe_cat = qr/c${vowels}t/;

=end programlisting

=begin sidebar

The curly braces around the name of the scalar variable C<$vowels> helps
disambiguate the variable name.  Without that, the parser would interpret the
variable name as C<$vowelst>, which either causes a compile-time error about an
unknown variable or interpolates the contents of an existing C<$vowelst> into
the regex.

=end sidebar

X<C<->; character class range regex metacharacter>

If the characters in your character set form a contiguous range, you can use
the hyphen character (C<->) as a shortcut to express that range.  Now it's
possible to define the C<$letters_only> regex:

=begin programlisting

    my $letters_only = qr/[a-zA-Z]/;

=end programlisting

Move the hyphen character to the start or end of the class to include it in the
class:

=begin programlisting

    my $interesting_punctuation = qr/[-!?]/;

=end programlisting

... or escape it:

=begin programlisting

    my $line_characters = qr/[|=\-_]/;

=end programlisting

X<C<^>; negation of character class regex metacharacter>

Just as the word and digit class metacharacters (C<\w> and C<\d>) have
negations, so too you can negate a character class.  Use the caret (C<^>) as
the first element of the character class to mean "anything I<except> these
characters":

=begin programlisting

    my $not_a_vowel = qr/[^aeiou]/;

=end programlisting

=begin sidebar

Use a caret anywhere but this position to make it a member of the character
class.  To include a hyphen in a negated character class, place it after the
caret or at the end of the class, or escape it.

=end sidebar

=head1 Capturing

It's often useful to match part of a string and use it later; perhaps you want
to extract an address or an American telephone number from a string:

=begin programlisting

    my $area_code    = qr/\(\d{3}\)/;
    my $local_number = qr/\d{3}-?\d{4}/;
    my $phone_number = qr/$area_code\s?$local_number/;

=end programlisting

Note the escaping of the parentheses within C<$area_code>; this will become
obvious in a moment.

=head2 Named Captures

Z<named_captures>
X<regex; captures>
X<regex; named captures>
X<<< C<< (?<>) >>; regex named capture >>>

Given a string, C<$contact_info>, which contains contact information, you can
apply the C<$phone_number> regular expression and I<capture> any matches into a
variable with I<named captures>:

=begin programlisting

    if ($contact_info =~ /(?<phone>$phone_number)/)
    {
        say "Found a number $+{phone}";
    }

=end programlisting

The capturing construct can look like a big wad of punctuation, but it's fairly
simple when you can recognize it as a single chunk:

=begin programlisting

    (?<capture name> ... )

=end programlisting

The parentheses enclose the entire capture.  The C<< ?< name > >> construct
provides a name for the capture buffer and must follow the left parenthesis.
The rest of the construct within the parentheses is a regular expression.  If
and when the regex matches this fragment, Perl stores the captured portion of
the string in the magic variable C<%+>: a hash where the key is the name of the
capture buffer and the value is the portion of the string which matched the
buffer's regex.

Parentheses are special to Perl 5 regular expressions; by default they exhibit
the same grouping behavior as parentheses do in regular Perl code.  They also
enclose one or more atoms to capture whatever portion of the matched string
they match.  To use literal parentheses in a regular expression, you must
preface them with a backslash, just as in the C<$area_code> variable.

=head2 Numbered Captures

X<regex; numbered captures>
X<regex; captures>

Named captures are new in Perl 5.10, but captures have existed in Perl for many
years.  You may encounter I<numbered captures> as well:

=begin programlisting

    if ($contact_info =~ /($phone_number)/)
    {
        say "Found a number $1";
    }

=end programlisting

C<regex; C<$1>>
C<regex; C<$2>>
X<C<$1>; regex metacharacter>
X<C<$2>; regex metacharacter>

The parentheses enclose the fragment to capture, but there is no regex
metacharacter giving the I<name> of the capture.  Instead, Perl stores the
captured substring in a series of magic variables starting with C<$1> and
continuing for as many capture groups are present in the regex.  The I<first>
matching capture that Perl finds goes into C<$1>, the second into C<$2>, and so
on.  Capture counts start at the I<opening> parenthesis of the capture; thus
the first left parenthesis begins the capture into C<$1>, the second into
C<$2>, and so on.

While the syntax for named captures is longer than for numbered captures, it
provides additional clarity.  You do not have to count the number of opening
parentheses to figure out whether a particular capture is C<$4> or C<$5>, and
composing regexes from smaller regexes is much easier, as they're less
sensitive to changes in position or the presence or absence of capturing in
individual atoms.

=begin sidebar

Name collisions are still possible with named captures, though that's less
frequent than number collisions with numbered captures.  Consider avoiding the
use of captures in regex fragments; save it for top-level regexes.

=end sidebar

Numbered captures are less frustrating when you evaluate a match in list
context:

=begin programlisting

    if (my ($number) = $contact_info =~ /($phone_number)/)
    {
        say "Found a number $number";
    }

=end programlisting

Perl will assign to the lvalues in order of the captures.

=head1 Grouping and Alternation

Previous examples have all applied quantifiers to simple atoms.  They can also
apply to more complex subpatterns as a whole:

=begin programlisting

    my $pork  = qr/pork/;
    my $beans = qr/beans/;

    like( 'pork and beans', qr/\A$pork?.*?$beans/,
         'maybe pork, definitely beans' );

=end programlisting

If you expand the regex manually, the results may surprise you:

=begin programlisting

    like( 'pork and beans', qr/\Apork?.*?beans/,
         'maybe pork, definitely beans' );

=end programlisting

This still matches, but consider a more specific pattern:

=begin programlisting

    my $pork  = qr/pork/;
    my $and   = qr/and/;
    my $beans = qr/beans/;

    like( 'pork and beans', qr/\A$pork? $and? $beans/,
        'maybe pork, maybe and, definitely beans' );

=end programlisting

X<regex; alternation>
X<C<|>; alternation regex metacharacter>

Some regexes need to match one thing or another.  Use the I<alternation>
metacharacter (C<|>) to do so:

=begin programlisting

    my $rice  = qr/rice/;
    my $beans = qr/beans/;

    like( 'rice',  qr/$rice|$beans/, 'Found some rice'  );
    like( 'beans', qr/$rice|$beans/, 'Found some beans' );

=end programlisting

The alternation metacharacter indicates that either preceding fragment may
match.  Be careful about what you interpret as a regex fragment, however:

=begin programlisting

    like(   'rice',  qr/rice|beans/, 'Found some rice'  );
    like(   'beans', qr/rice|beans/, 'Found some beans' );
    unlike( 'ricb',  qr/rice|beans/, 'Found some weird hybrid' );

=end programlisting

It's possible to interpret the pattern C<rice|beans> as meaning C<ric>,
followed by either C<e> or C<b>, followed by C<eans>--but alternations always
include the I<entire> fragment to the nearest regex delimiter, whether the
start or end of the pattern, an enclosing parenthesis, another alternation
character, or a square bracket.

X<regex; C<()>>
X<C<()>; capturing regex metacharacters>

To reduce confusion, use named fragments in variables (C<$rice|$beans>) or
grouping alternation candidates in I<non-capturing groups>:

=begin programlisting

    my $starches = qr/(?:pasta|potatoes|rice)/;

=end programlisting

X<C<(?:)>; non-capturing regex group>

The C<(?:)> sequence groups a series of atoms but suppresses capturing
behavior.  In this case, it groups three alternatives.

=begin sidebar

If you print a compiled regular expression, you'll see that its stringification
includes an enclosing non-capturing group; C<qr/rice|beans/> stringifies as
C<(?-xism:rice|beans)>.

=end sidebar

=head1 Other Escape Sequences

X<regex; metacharacters>
X<metacharacters; regex>

Perl interprets several characters in regular expressions as I<metacharacters>,
which represent something different than their literal characters.  Square
brackets always denote a character class and parentheses group and optionally
capture pattern fragments.

X<C<\>; regex escaping metacharacter>
X<escaping>
X<regex; escaping metacharacters>

To match a I<literal> instance of a metacharacter, I<escape> it with a backslash
(C<\>).  Thus C<\(> refers to a single left parenthesis and C<\]> refers to a
single right square bracket.  C<\.> refers to a literal period character
instead of the "match anything but an explicit newline character" atom.
X<C<\Q>; disable metacharacters regex metacharacter>

Other useful metacharacters that often need escaping are the pipe character
(C<|>) and the dollar sign (C<$>).  Don't forget about the quantifiers either:
C<*>, C<+>, and C<?> also qualify.

X<C<\Q>; disable metacharacters regex metacharacter>
X<C<\E>; reenable metacharacters regex metacharacter>
X<regex; disabling metacharacters>

To avoid escaping everything (and worrying about forgetting to escape
interpolated values), use the I<metacharacter disabling characters>.  The C<\Q>
metacharacter disables metacharacter processing until it reaches the C<\E>
sequence.  This is especially useful when taking match text from a source you
don't control when writing the program:

=begin programlisting

    my ($text, $literal_text) = @_;

    return $text =~ /\Q$literal_text\E/;

=end programlisting

The C<$literal_text> argument can contain anything--the string C<** ALERT **>,
for example.  With C<\Q> and C<\E>, Perl will not interpret the zero-or-more
quantifier as a quantifier.  Instead, it will parse the regex as C<\*\* ALERT
\*\*> and attempt to match literal asterisk characters.

=begin note

Be cautious when processing regular expressions from untrusted user input.
It's possible to craft a malicious regular expression which can produce an
effective denial-of-service attack against your program.

=end note

=head1 Assertions

X<regex; assertions>

The regex anchors (C<\A> and C<\Z>) are a form of I<regex assertion>, which
requires that a condition is present but doesn't actually match a character in
the string.  That is, the regex C<qr/\A/> will I<always> match, no matter what
the string contains.  The metacharacters C<\b> and C<\B> are also assertions.

X<regex; zero-width assertion>

I<Zero-width assertions> match a I<pattern>, not just a condition in the
string.  Most importantly, they do not consume the portion of the pattern that
they match.  For example, to find a cat on its own, you might use a word
boundary assertion:

=begin programlisting

    my $just_a_cat = qr/cat\b/;

=end programlisting

X<regex; zero-width negative look-ahead assertion>
X<C<(?!...)>; zero-width negative look-ahead regex assertion>

... but if you want to find a non-disastrous feline, you might use a
I<zero-width negative look-ahead assertion>:

=begin programlisting

    my $safe_feline = qr/cat(?!astrophe)/;

=end programlisting

The construct C<(?!...)> matches the phrase C<cat> only if the phrase
C<astrophe> does not immediately follow.

X<regex; zero-width positive look-ahead assertion>
X<C<(?=...)>; zero-width positive look-ahead regex assertion>

The I<zero-width positive look-ahead assertion>:

=begin programlisting

    my $disastrous_feline = qr/cat(?=astrophe)/;

=end programlisting

... matches the phrase C<cat> only if the phrase C<astrophe> immediately
follows.  This may seem useless, as a normal regular expression can accomplish
the same thing, but consider if you want to find all non-catastrophic words in
the dictionary which start with C<cat>.  One possibility is:

=begin programlisting

    my $disastrous_feline = qr/cat(?!astrophe)/;

    while (<$words>)
    {
        chomp;
        next unless /\A(?<some_cat>$disastrous_feline.*)\Z/;
        say "Found a non-catastrophe '$+{some_cat}'";
    }

=end programlisting

Because the assertion is zero-width, it consumes none of the source string.
Thus the anchored C<.*\Z> pattern fragment must be present; otherwise the
capture would only capture the C<cat> portion of the source string.

X<C<(?<!...)>; zero-width negative look-behind regex assertion>
X<C<(?<=...)>; zero-width positive look-behind regex assertion>
X<regex; zero-width positive look-behind assertion>
X<regex; zero-width negative look-behind assertion>

Zero-width look-behind assertions also exist.  Unlike the look-ahead
assertions, the patterns of these assertions must have fixed widths; you may
not use quantifiers in these patterns.

To assert that your feline never occurs at the start of a line, you might use
the I<zero-width negative look-behind assertion>:

=begin programlisting

    my $middle_cat = qr/(?<!^)cat/;

=end programlisting

... where the construct C<< (?<!...) >> contains the fixed-width pattern.
Otherwise you could express that the C<cat> must always occur immediately after
a space character with the I<zero-width positive look-behind assertion>:

=begin programlisting

    my $space_cat = qr/(?<=\s)cat/;

=end programlisting

... where the construct C<< (?<=...) >> contains the fixed-width pattern.  This
approach can be useful when combining a global regex match with the C<\G>
modifier, but it's an advanced feature you likely won't use often.

=head1 Regex Modifiers

X<regex; modifiers>
X<regex; C</i> modifier>
X<C</i>; case-insensitive regex modifier>
X<regex; case-insensitive>

The regular expression operators allow several modifiers to change the behavior
of matches.  These modifiers appear at the end of the match, substitution, and
C<qr//> operators.  For example, to enable case-insensitive matching:

=begin programlisting

    my $pet = 'CaMeLiA';

    like( $pet, qr/Camelia/,  'You have a nice butterfly there'       );
    like( $pet, qr/Camelia/i, 'Your butterfly has a broken shift key' );

=end programlisting

The first C<like()> will fail, because the strings contain different letters.
The second C<like()> will pass, because the C</i> modifier causes the regex to
ignore case distinctions.  C<M> and C<m> are equivalent in the second regex due
to the modifier.

You may also embed regex modifiers within a pattern:

=begin programlisting

    my $find_a_cat = qr/(?<feline>(?i)cat)/;

=end programlisting

The C<(?i)> syntax enables case-insensitive matching only for its enclosing
group: in this case, the entire C<feline> capture group.  You may use multiple
modifiers with this form (provided they make sense for a portion of a pattern).
You may also disable specific modifiers by preceding them with the minus
character (C<->):

=begin programlisting

    my $find_a_rational = qr/(?<number>(?-i)Rat)/;

=end programlisting

X<C</m>; multiline regex modifier>
X<regex; C</m> modifier>
X<regex; multiline>
X<C<^>; start of line regex metacharacter>
X<C<$>; end of line regex metacharacter>

The multiline operator, C</m>, allows the C<^> and C<$> anchors to match at any
start of line or end of line within the string.

X<C</s>; single line regex modifier>
X<regex; C</s> modifier>
X<regex; single line>

The C</s> modifier treats the source string as a single line such that the C<.>
metacharacter matches the newline character.  Damian Conway suggests the
mnemonic that C</m> modifies the behavior of I<multiple> regex metacharacters,
while C</s> modifies the behavior of a I<single> regex metacharacter.

X<C</x>; extended readability regex modifier>
X<regex; C</x> modifier>
X<regex; extended readability>

The C</x> modifier allows you to embed additional whitespace and comments
within patterns without changing their meaning.  With this modifier in effect,
the regex engine treats whitespace and the comment character (C<#>) and
everything following as comments; it ignores them.  This allows you to write
much more readable regular expressions:

=begin programlisting

    my $attr_re = qr{
        ^                     # start of line

        # miscellany
        (?:
          [;\n\s]*            # blank spaces and spurious semicolons
          (?:/\*.*?\*/)?      # C comments
        )*

        # attribute marker
        ATTR

        # type
        \s+
        (   U?INTVAL
          | FLOATVAL
          | STRING\s+\*
          | PMC\s+\*
          | \w*
        )
    }x;

=end programlisting

This regex isn't I<simple>, but comments and whitespace improve its
readability.  Even if you compose regexes together from compiled fragments, the
C</x> modifier can still improve your code.

X<C</g>; global match regex modifier>
X<regex; global match>
X<regex; C</g> modifier>

The C</g> modifier matches a regex globally throughout a string.  This makes
sense when used with a substitution:

=begin programlisting

    # appease the Mitchell estate
    my $contents = slurp( $file );
    $contents    =~ s/Scarlett O'Hara/Mauve Midway/g;

=end programlisting

X<C<\G>; global match anchor regex metacharacter>
X<regex; C<\G>>
X<regex; global match anchor>

When used with a match--not a substitution--the C<\G> metacharacter allows you
to process a string within a loop one chunk at a time.  C<\G> matches at the
position where the most recent match ended.  To process a poorly-encoded file
full of American telephone numbers in logical chunks, you might write:

=begin programlisting

    while ($contents =~ /\G(\w{3})(\w{3})(\w{4})/g)
    {
        push @numbers, "($1) $2-$3";
    }

=end programlisting

Be aware that the C<\G> anchor will take up at the last point in the string
where the previous iteration of the match occurred.  If the previous match
ended with a greedy match such as C<.*>, the next match will have less
available string to match.  The use of lookahead assertions can become very
important here, as they do not consume the available string to match.

X<C</e>; substitution evaluation regex modifier>
X<regex; C</e> modifier>
X<regex; substitution evaluation>

The C</e> modifier allows you to write arbitrary Perl 5 code on the right side
of a substitution operation.  If the match succeeds, the regex engine will run
the code, using its return value as the substitution value.  The earlier global
substitution example could be more robust about replacing some or all of an
unfortunate protagonist's name with:

=begin programlisting

    # appease the Mitchell estate
    my $contents = slurp( $file );
    $contents    =~ s{Scarlett( O'Hara)?}
                     { 'Mauve' . defined $1 ? ' Midway' : '' }ge;

=end programlisting

You may add as many C</e> modifiers as you like to a substitution.  Each
additional occurrence of this modifier will cause another evaluation of the
result of the expression, though only Perl golfers tend to use C</ee> or
anything more complex.
