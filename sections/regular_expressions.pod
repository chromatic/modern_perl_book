Z<regular_expressions>

=head2 Literals

The simplest regexes are simple substring patterns:

=begin programlisting

    my $name = 'Chatfield';
    say "Found a hat!" if $name =~ B</hat/>;

=end programlisting

X<operators; match>
X<operators; //>
X<operators; m//>
X<operators; regex bind>
X<operators; negated regex bind>
X<operators; =~>
X<operators; !~>
X<regular expressions; atom>
X<atom>

The match operator (C<//> or, more formally, C<m//>) contains a regular
expression--in this example, C<hat>.  Even though that reads like a word, it
means "the C<h> character, followed by the C<a> character, followed by the C<t>
character, appearing anywhere in the string."  Each character is an I<atom> in
the regex: an indivisible unit of the pattern.  The regex binding operator
(C<=~>) is an infix operator (L<fixity>) which applies the regular expression
on its right to the string produced by the expression on its left.  When
evaluated in scalar context, a match evaluates to a true value if it succeeds.

The negated form of the binding operator (C<!~>) evaluates to false if the match
succeeds.

=head2 The C<qr//> Operator and Regex Combinations

X<operators; qr//>
X<regular expressions; qr//>
X<regular expressions; first-class>

Regexes are first-class entities in modern Perl when created with the C<qr//>
operator:

=begin programlisting

    my $hat = B<qr/hat/>;
    say 'Found a hat!' if $name =~ /$hat/;

=end programlisting

=begin sidebar

The C<like()> function from C<Test::More> works much like C<is()>, except that
its second argument is a regular expression object produced by C<qr//>.

=end sidebar

You may interpolate and combine them into larger and more complex patterns:

=begin programlisting

    my $hat   = qr/hat/;
    my $field = qr/field/;

    say 'Found a hat in a field!' if $name =~ /B<$hat$field>/;

    # or

    like( $name, qr/B<$hat$field>/, 'Found a hat in a field!' );

=end programlisting

=head2 Quantifiers

X<regular expressions; quantifiers>
X<operators; index>

Regular expressions are far more powerful than previous examples have
demonstrated; you can search for a literal substring within a string with the
C<index> operator.  Using the regex engine for that is like flying your
autonomous combat helicopter to the corner store to buy spare cheese.

X<regex quantifiers>
X<regex quantifiers; zero or one>

Regular expressions get more powerful through the use of I<regex quantifiers>,
which allow you to specify how often a regex component may appear in a matching
string.  The simplest quantifier is the I<zero or one quantifier>, or C<?>:

=begin programlisting

    my $cat_or_ct = qr/caB<?>t/;

    like( 'cat', $cat_or_ct, "'cat' matches /ca?t/" );
    like( 'ct',  $cat_or_ct, "'ct' matches /ca?t/"  );

=end programlisting

Any atom in a regular expression followed by the C<?> character means "match
zero or one of this atom."  This regular expression matches if there are zero
C<a> characters immediately following a C<c> character and immediately
preceding a C<t> character.  It also matches if there is one and only one C<a>
character between the C<c> and C<t> characters.

X<regex quantifiers; one or more>

The I<one or more quantifier>, or C<+>, matches only if there is at least one
of the preceding atom in the appropriate place in the string to match:

=begin programlisting

    my $one_or_more_a = qr/caB<+>t/;

    like( 'cat',    $one_or_more_a, "'cat' matches /ca+t/"    );
    like( 'caat',   $one_or_more_a, "'caat' matches /ca+t/"   );
    like( 'caaat',  $one_or_more_a, "'caaat' matches /ca+t/"  );
    like( 'caaaat', $one_or_more_a, "'caaaat' matches /ca+t/" );

    unlike( 'ct',   $one_or_more_a, "'ct' does not match /ca+t/" );

=end programlisting

There is no theoretical limit to the number of quantified atoms which can
match.

X<quantifiers; zero or more>

The I<zero or more quantifier> is C<*>; it matches if there are zero or more
instances of the quantified atom in the string to match:

=begin programlisting

    my $zero_or_more_a = qr/caB<*>t/;

    like( 'cat',    $zero_or_more_a, "'cat' matches /ca*t/"    );
    like( 'caat',   $zero_or_more_a, "'caat' matches /ca*t/"   );
    like( 'caaat',  $zero_or_more_a, "'caaat' matches /ca*t/"  );
    like( 'caaaat', $zero_or_more_a, "'caaaat' matches /ca*t/" );
    like( 'ct',     $zero_or_more_a, "'ct' matches /ca*t/"     );

=end programlisting

This may seem useless, but it combines nicely with other regex features to
indicate that you don't care about what may or may not be in that particular
position in the string to match.  Even so, I<most> regular expressions benefit
from using the C<?> and C<+> quantifiers far more than the C<*>
quantifierN<Friedl's book explains why.>.

X<numeric quantifiers>

Finally, you can specify the number of times an atom may match with I<numeric
quantifiers>. C<{n}> means that a match must occur exactly I<n> times.

=begin programlisting

    # equivalent to qr/cat/;
    my $only_one_a = qr/caB<{1}>t/;

    like( 'cat', $only_one_a, "'cat' matches /ca{1}t/" );

=end programlisting

C<{n,}> means that a match must occur at least I<n> times, but may occur more
times:

=begin programlisting

    # equivalent to qr/ca+t/;
    my $at_least_one_a = qr/caB<{1,}>t/;

    like( 'cat',    $at_least_one_a, "'cat' matches /ca{1,}t/"    );
    like( 'caat',   $at_least_one_a, "'caat' matches /ca{1,}t/"   );
    like( 'caaat',  $at_least_one_a, "'caaat' matches /ca{1,}t/"  );
    like( 'caaaat', $at_least_one_a, "'caaaat' matches /ca{1,}t/" );

=end programlisting

C<{n,m}> means that a match must occur at least I<n> times and cannot occur
more than I<m> times:

=begin programlisting

    my $one_to_three_a = qr/caB<{1,3}>t/;

    like(   'cat',    $one_to_three_a, "'cat' matches /ca{1,3}t/"           );
    like(   'caat',   $one_to_three_a, "'caat' matches /ca{1,3}t/"          );
    like(   'caaat',  $one_to_three_a, "'caaat' matches /ca{1,3}t/"         );
    unlike( 'caaaat', $one_to_three_a, "'caaaat' does not match /ca{1,3}t/" );

=end programlisting

=head2 Metacharacters

X<regular expressions; metacharacters>
X<regular expressions; .>

Regular expressions get more powerful as atoms get more general.  For example,
the C<.> character in a regular expression means "match any character except a
newline".  If you wanted to search a list of dictionary words for every word
which might match 7 Down ("Rich soil") in a crossword puzzle, you might write:

=begin programlisting

    for my $word (@words)
    {
        next unless $word =~ /lB<..>m/;
        say "Possibility: $word";
    }

=end programlisting

X<regular expressions; \w>

Of course, if your list of potential matches were anything other than a list of
words, this metacharacter could cause false positives, as it also matches
punctuation characters, whitespace, numbers, and many other characters besides
word characters.  The C<\w> metacharacter represents all alphanumeric
characters and the underscore:

=begin programlisting

        next unless $word =~ B</lB<\w\w>m/>;

=end programlisting

X<regular expressions; \d>

Use the C<\d> metacharacter to match digits:

=begin programlisting

    # not a robust phone number matcher
    next unless $potential_phone_number =~ /B<\d>{3}-B<\d>{3}-B<\d>{4}/;
    say "I have your number: $potential_phone_number";

=end programlisting

X<regular expressions; \s>

Use the C<\s> metacharacter to match whitespace, whether a literal space, a tab
character, a carriage return, a form-feed, or a newline:

=begin programlisting

    my $two_three_letter_words = qr/\w{3}B<\s>\w{3}/;

=end programlisting

X<regular expressions; \W>
X<regular expressions; \D>
X<regular expressions; \S>

These three metacharacters have negated forms.  To match any character
I<except> a word character, use C<\W>.  To match a non-digit character, use
C<\D>.  To match anything but a space, use C<\S>.

X<character classes>

If the range of allowed characters in these four groups isn't specific enough,
you can specify your own I<character classes> by enclosing them in square
brackets:

=begin programlisting

    my $vowels    = qr/B<[>aeiouB<]>/;
    my $maybe_cat = qr/c${vowels}t/;

=end programlisting

=begin sidebar

The curly braces around the name of the scalar variable C<$vowels> helps
disambiguate the variable name.  Without that, the parser would interpret the
variable name as C<$vowelst>, which either causes a compile-time error about an
unknown variable or interpolates the contents of an existing C<$vowelst> into
the regex.

=end sidebar

If the characters in your character set form a contiguous range, you can use
the hyphen character (C<->) as a shortcut to express that range.

=begin programlisting

    my $letters_only = qr/[a-zA-Z]/;

=end programlisting

Move the hyphen character to the start of the class to include it in the class:

=begin programlisting

    my $interesting_punctuation = qr/[-!?]/;

=end programlisting

Just as the word and digit class metacharacters (C<\w> and C<\d>) have
negations, so too you can negate a character class.  Use the caret
(C<^>) as the first element of the character class to mean "anything
I<except> these characters":

=begin programlisting

    my $not_a_vowel = qr/[^aeiou]/;

=end programlisting

=begin sidebar

As you might expect, use a caret anywhere but this position to make it a member
of the character class.  A dash in a negated character class must I<follow> the
negating carat.

=end sidebar

=head2 Greediness

X<greedy quantifiers>
X<quantifiers; greedy>

The C<+> and C<*> quantifiers by themselves are I<greedy quantifiers>; they
match as many times as possible.  This is particularly pernicious when using
the tempting-but-troublesome "match any amount of anything" pattern C<.*>:

=begin programlisting

    # a poor regex
    my $hot_meal = qr/hot.*meal/;

    say 'Found a hot meal!' if 'I have a hot meal' =~ $hot_meal;
    say 'Found a hot meal!'
         if 'I did some one-shot, piecemeal work!' =~ $hot_meal;

=end programlisting

The problem is more obvious when you expect to match a short portion of a
string.  Greediness always tries to match as much of the input string as
possible I<first>, backing off only when it's obvious that the match will not
succeed.  Thus you may not be able to fit all of the results into the four
boxes in 7 Down if you go looking for "loam" with:

=begin programlisting

    my $seven_down = qr/l${letters_only}*m/;

=end programlisting

You'll get C<Alabama>, C<Belgium>, and C<Bethlehem> for starters.  The soil
might be nice there, but they're all too long--and the matches start in the
middle of the words.

X<regex anchors>
X<anchors; start of string>

I<Regex anchors> force a match at a specific position in a string.  The I<start
of string anchor> (C<\A>) ensures that any match will start at the beginning of
the string:

=begin programlisting

    # also matches "lammed", "lawmaker", and "layman"
    my $seven_down = qr/\Al${letters_only}{2}m/;

=end programlisting

X<anchors; end of string>

Similarly, the I<end of line string anchor> (C<\Z>) ensures that any match will
I<end> at the end of the string.

=begin programlisting

    # also matches "loom", which is close enough
    my $seven_down = qr/\Al${letters_only}{2}m\Z/;

=end programlisting

X<word boundary metacharacter>

If you're not fortunate enough to have a Unix word dictionary file available,
the I<word boundary metacharacter> (C<\b>) matches only at the boundary between
a word character (C<\w>) and a non-word character (C<\W>):

=begin programlisting

    my $seven_down = qr/\bl${letters_only}{2}m\b/;

=end programlisting

=begin sidebar

Like Perl, there's more than one way to write a regular expression.  Consider
choosing the most expressive and maintainable one.

=end sidebar

Sometimes you can't anchor a regular expression.  In those cases, you can turn
a greedy quantifier into a parsimonious quantifier by appending the C<?>
quantifier:

=begin programlisting

    my $minimal_greedy_match = qr/hot.*?meal/;

=end programlisting

In this case, the regular expression engine will prefer the I<shortest>
possible potential match, increasing the number of characters identified by the
C<.*?> token combination only if the current number fails to match.  Because
C<*> matches zero or more times, the minimal potential match for this token
combination is zero characters:

=begin programlisting

    say 'Found a hot meal' if 'ilikeahotmeal' =~ /$minimal_greedy_match/;

=end programlisting

If this isn't what you want, use the C<+> quantifier to match one or more
items:

=begin programlisting

    my $minimal_greedy_at_least_one = qr/hot.+?meal/;

    unlike( 'ilikeahotmeal', $minimal_greedy_at_least_one );

    like( 'i like a hot meal', $minimal_greedy_at_least_one );

=end programlisting

The C<?> quantifier modifier also applies to the C<?> (zero or one matches)
quantifier as well as the range quantifiers.  In every case, it causes the
regex to match as few times as possible.

In general, the greedy modifiers C<.+> and C<.*> are tempting but dangerous
tools.  For simple programs which need little maintenance, they may be quick
and easy to write, but non-greedy matching seems to match human expectations
better.  If you find yourself writing a lot of regular expression with greedy
matches, test them thoroughly with a comprehensive and automated test suite
with representative data to lessen the possibility of unpleasant surprises.

=head2 Capturing

It's often useful to match part of a string and use it later; perhaps you want
to extract an address or an American telephone number from a string:

=begin programlisting

    my $area_code    = qr/\(\d{3}\)/;
    my $local_number = qr/\d{3}-?\d{4}/;
    my $phone_number = qr/$area_code\s?$local_number/;

=end programlisting

=begin sidebar

Parentheses in regular expressions are metacharacters; C<$area_code> escapes
them.

=end sidebar

=head3 Named Captures

Z<named_captures>
X<captures>
X<named captures>
X<captures; named>

Given a string, C<$contact_info>, which contains contact information, you can
apply the C<$phone_number> regular expression and I<capture> any matches into a
variable with I<named captures>:

=begin programlisting

    if ($contact_info =~ /(?<phone>$phone_number)/)
    {
        say "Found a number $+{phone}";
    }

=end programlisting

The capturing construct can look like a big wad of punctuation, but it's fairly
simple when you can recognize as a single chunk:

=begin programlisting

    (?<capture name> ... )

=end programlisting

The parentheses enclose the entire capture.  The C<< ?< name > >> construct
must follow the left parenthesis.  It provides a name for the capture buffer.
The rest of the construct within the parentheses is a regular expression.  If
and when the regex matches this fragment, Perl stores the captured portion of
the string in the special variable C<%+>: a hash where the key is the name of
the capture buffer and the value is the portion of the string which matched the
buffer's regex.

Parentheses are special to Perl 5 regular expressions; by default they perform
the same grouping behavior as parentheses do in regular Perl code.  They also
enclose one or more atoms to capture whatever portion of the matched string
they match.  To use literal parentheses in a regular expression, you must
preface them with a backslash, just as in the C<$area_code> variable.

=head3 Anonymous Captures

X<anonymous captures>
X<captures; anonymous>

Named captures are new in Perl 5.10, but captures have existed in Perl for many
years.  You may encounter I<anonymous captures> as well:

=begin programlisting

    if ($contact_info =~ /($phone_number)/)
    {
        say "Found a number $1";
    }

=end programlisting

The parentheses enclose the fragment to capture, but there is no regex
directive giving the I<name> of the capture.  Instead, Perl stores the captured
substring in a series of magic variables starting with C<$1> and continuing for
as many capture groups are present in the regex.  The I<first> matching capture
that Perl finds goes into C<$1>, the second into C<$2>, and so on.  Capture
counts start at the I<opening> parenthesis of the capture; thus the first left
parenthesis begins the capture into C<$1>, the second into C<$2>, and so on.

While the syntax for named captures is longer than for anonymous captures, it
provides additional clarity.  You do not have to count the number of opening
parentheses to figure out whether a particular capture is C<$4> or C<$5>, and
composing regexes from smaller regexes is much easier, as they're less
sensitive to changes in position or the presence or absence of capturing in
individual atoms.

=begin sidebar

Name collisions are still possible with named captures, though that's less
frequent than number collisions with anonymous captures.  Consider avoiding the
use of captures in regex fragments; save it for top-level regexes.

=end sidebar

=head2 Grouping and Alternation

Previous examples have all applied quantifiers to simple atoms.  They can also
apply to more complex subpatterns as a whole:

=begin programlisting

    my $pork  = qr/pork/;
    my $beans = qr/beans/;

    like( 'pork and beans', qr/\A$pork?.*?$beans/,
         'maybe pork, definitely beans' );

=end programlisting

If you expand the regex manually, the results may surprise you:

=begin programlisting

    like( 'pork and beans', qr/\Apork?.*?beans/,
         'maybe pork, definitely beans' );

=end programlisting

This still matches, but consider a more specific pattern:

=begin programlisting

    my $pork  = qr/pork/;
    my $and   = qr/and/;
    my $beans = qr/beans/;

    like( 'pork and beans', qr/\A$pork? $and? $beans/,
        'maybe pork, maybe and, definitely beans' );

=end programlisting

X<alternation>
X<regex alternation>

Some regexes need to match one thing or another.  Use the I<alternation>
metacharacter (C<|>) to do so:

=begin programlisting

    my $rice  = qr/rice/;
    my $beans = qr/beans/;

    like( 'rice',  qr/$rice|$beans/, 'Found some rice'  );
    like( 'beans', qr/$rice|$beans/, 'Found some beans' );

=end programlisting

The alternation metacharacter indicates that either preceding fragment may
match.  Be careful about what you interpret as a regex fragment, however:

=begin programlisting

    like(   'rice',  qr/rice|beans/, 'Found some rice'  );
    like(   'beans', qr/rice|beans/, 'Found some beans' );
    unlike( 'ricb',  qr/rice|beans/, 'Found some weird hybrid' );

=end programlisting

It's possible to interpret the pattern C<rice|beans> as meaning C<ric>,
followed by either C<e> or C<b>, followed by C<eans>--but that's incorrect.
Alternations always include the I<entire> fragment to the nearest regex
delimiter, whether the start or end of the pattern, an enclosing parenthesis,
another alternation character, or a square bracket.

X<non-capturing groups>

To reduce confusion, use named fragments in variables (C<$rice|$beans>) or
grouping alternation candidates in I<non-capturing groups>:

=begin programlisting

    my $starches = qr/(?:pasta|potatoes|rice)/;

=end programlisting

The C<(?:)> sequence groups a series of atoms but suppresses capturing
behavior.  In this case, it groups three alternatives.

=begin sidebar

If you print a compiled regular expression, you'll see that its stringification
includes an enclosing non-capturing group; C<qr/rice|beans/> stringifies as
C<(?-xism:rice|beans)>.

=end sidebar

=head2 Other Escape Sequences

X<regex metacharacters>
X<metacharacters; regex>

Perl interprets several characters in regular expressions as I<metacharacters>,
which represent something different than their literal characters.  Square
brackets always denote a character class and parentheses group and optionally
capture pattern fragments.

X<escape>
X<metacharacters; escaping>

To a I<literal> instance of a metacharacter, I<escape> it with a backslash
(C<\>).  Thus C<\(> refers to a single left parenthesis and C<\]> refers to a
single right square bracket.  C<\.> refers to a literal period character
instead of the "match anything but an explicit newline character" atom.

Other useful metacharacters that often need escaping are the pipe character
(C<|>) and the dollar sign (C<$>).  Don't forget about the quantifiers either:
C<*>, C<+>, and C<?> also qualify.

X<metacharacters; disabling>

To avoid escaping everything (and worrying about forgetting to escape
interpolated values), use the I<metacharacter disabling characters>.  The C<\Q>
metacharacter disables metacharacter processing until it reaches the C<\E>
sequence.  This is especially useful when taking match text from a source you
don't control when writing the program:

=begin programlisting

    my ($text, $literal_text) = @_;

    return $text =~ /\Q$literal_text\E/;

=end programlisting

The C<$literal_text> argument can contain anything--the string C<** ALERT **>,
for example.  With C<\Q> and C<\E>, Perl will not interpret the zero-or-more
quantifier as a quantifier.  Instead, it will parse the regex as C<\*\* ALERT
\*\*> and attempt to match literal asterisk characters.

=begin note

Be cautious when processing regular expressions from untrusted user input.
It's possible to craft a malicious regular expression which can perform an
effective denial-of-service attack against your program.

=end note

=head2 Assertions

X<regex assertions>

The regex anchors (C<\A> and C<\Z>) are a form of I<regex assertion>, which
requires that a condition is present but doesn't actually match a character in
the string.  That is, the regex C<qr/\A/> will I<always> match, no matter what
the string contains.  The metacharacters C<\b> and C<\B> are also assertions.

X<regex assertions; zero-width>
X<zero-width assertions>

I<Zero-width assertions> match a I<pattern>, not just a condition in the
string.  Most importantly, they do not consume the portion of the pattern that
they match.  For example, to find a cat on its own, you might use a word
boundary assertion:

=begin programlisting

    my $just_a_cat = qr/cat\b/;

=end programlisting

X<regex assertions; zero-width negative look-ahead>
X<zero-width negative look-ahead assertion>

... but if you want to find a non-disastrous feline, you might use a
I<zero-width negative look-ahead assertion>:

=begin programlisting

    my $safe_feline = qr/cat(?!astrophe)/;

=end programlisting

The construct C<(?!...)> matches the phrase C<cat> only if the phrase
C<astrophe> does not immediately follow.

X<regex assertions; zero-width positive look-ahead>
X<zero-width positive look-ahead assertion>

The I<zero-width positive look-ahead assertion>:

=begin programlisting

    my $disastrous_feline = qr/cat(?=astrophe)/;

=end programlisting

... matches the phrase C<cat> only if the phrase C<astrophe> immediately
follows.  This may seem useless, as a normal regular expression can accomplish
the same thing, but consider if you want to find all non-catastrophic words in
the dictionary which start with C<cat>.  One possibility is:

=begin programlisting

    my $disastrous_feline = qr/cat(?!astrophe)/;

    while (<$words>)
    {
        chomp;
        next unless /\A(?<some_cat>$disastrous_feline.*)\Z/;
        say "Found a non-catastrophe '$+{some_cat}'";
    }

=end programlisting

Because the assertion is zero-width, it consumes none of the source string.
Thus the anchored C<.*\Z> pattern fragment must be present; otherwise the
capture would only capture the C<cat> portion of the source string.

=for author

Add section on Regex flags:

/i
/g
/s
/m
/x

=end for
