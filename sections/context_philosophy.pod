=head1 Context

Z<context_philosophy>

X<context>

Spoken languages have a notion of I<context> where the correct usage or meaning
of a word or phrase depends on its surroundings.  You may understand this in a
spoken language, where the inappropriate pluralization of "Please give me one
hamburgers!"N<The pluralization of the noun differs from the amount.> sounds
wrong or the incorrect gender of "la gato"N<The article is feminine, but the
noun is masculine.> makes native speakers chuckle.  Consider also the pronoun
"you" or the noun "sheep" which can be singular or plural depending on the
remainder of the sentence.

Context in Perl is similar; the language understands expectations of the amount
of data to provide as well as what kind of data to provide.  Perl will happily
attempt to provide exactly what you ask for--and you ask by choosing one
operator over another.

One type of context in Perl means that certain operators have different
behavior if you want zero, one, or many results.  It's possible that a specific
construct in Perl will do something different if you say "Fetch me zero
results; I don't care about any" than if you say "Fetch me one result" or
"Fetch me many results."

Likewise, certain contexts make it clear that you expect a numeric value, a
string value, or a value that's either true or false.

Context can be tricky if you try to write or read Perl code as a series of
single expressions which stand apart from their environments.  You may
find yourself slapping your forehead after a long debugging session when you
discover that your assumptions about context were incorrect.  However, if you're
cognizant of contexts, they can make your code clearer, more concise, and more
flexible.

=head2 Void, Scalar, and List Context

Z<amount_context>

X<context; amount>
X<amount context>

One of the aspects of context governs I<how many> items you expect.  This is
I<amount context>.  Compare this context to subject-verb number agreement in
English.  Even if you haven't learned the formal description of the rule, you
probably understand the error in the sentence "Perl are a fun language".  The
rule in Perl is that the number of items you request determines how many you
get.

X<void context>
X<context; void>

Suppose you have a function (L<functions>) called C<find_chores()> which sorts
all of your chores in order of their priority.  The means by which you call
this function determines what it will produce.  You may have no time to do
chores, in which case calling the function is an attempt to look industrious.
You may have enough time to do one task, or you could have a burst of energy
and a free weekend and the desire to do as much of the list as possible.

If you call the function on its own and never use its return value, you've
called the function in I<void context>:

=begin programlisting

    find_chores();

=end programlisting

X<context; scalar>
X<scalar context>

Assigning the function's return value to a single element evaluates the
function in I<scalar context>:

=begin programlisting

    my $single_result = find_chores();

=end programlisting

X<list context>
X<context; list>

Assigning the results of calling the function to an array (L<arrays>) or a
list, or using it in a list, evaluates the function in I<list context>:

=begin programlisting

    my @all_results        = find_chores();
    my B<(>$single_elementB<)>   = find_chores();
    process_list_of_results( find_chores() );

=end programlisting

The second line of the previous example may look confusing; the parentheses
there give a hint to the compiler that although there's only a scalar, this
assignment should occur in list context.  It's semantically equivalent to
assigning the first item in the list to a scalar and assigning the rest of the
list to a temporary array, and then throwing away the array--except that no
assignment to the array actually occurs:

=begin programlisting

    my ($single_element, @rest) = find_chores();

=end programlisting

Evaluating a function or expression--except for assignment--in list context can
produce confusion.  Lists propagate list context to the expressions they
contain.  Both calls to C<find_chores()> occur in list context:

=begin programlisting

    process_list_of_results( find_chores() );

    my %results =
    (
        cheap_operation     => $cheap_operation_results,
        expensive_operation => find_chores(), # OOPS!
    );

=end programlisting

The latter example often surprises novice programmers who expect scalar context
for the call.  C<expensive_operation> occurs is in list context, because its
results are assigned to a hash.  Hash assignments take a list of key/value
pairs, which causes any the evaluation of any expressions in that list to occur
in list context.

X<builtins; C<scalar>>

Use the C<scalar> operator to impose scalar context:

=begin programlisting

    my %results =
    (
        cheap_operation     => $cheap_operation_results,
        expensive_operation => B<scalar> find_chores(),
    );

=end programlisting

Why does context matter?  The function can examine its calling context and
decide how much work it needs to do before returning its results.  In void
context, C<find_chores()> can do nothing.  In scalar context, it can find only
the most important task.  In list context, it has to sort and return the entire
list.

=head2 Numeric, String, and Boolean Context

Z<value_contexts>

X<value context>
X<context; value>

Another type of context determines how Perl understands a piece of data--not
I<how many> pieces of data you want, but what the data means.  You've probably
already noticed that Perl's flexible about figuring out if you have a number or
a string and converting between the two as you want them.  This I<value
context> helps to explain how it does so.  In exchange for not having to
declare (or at least track) explicitly what I<type> of data a variable contains
or a function produces, Perl offers specific type contexts that tell the
compiler how to treat a given value during an operation.

Suppose you want to compare the contents of two strings.  The C<eq> operator
tells you if the strings contain the same information:

=begin programlisting

    say "Catastrophic crypto fail!" if $alice eq $bob;

=end programlisting

You may have had a baffling experience where you I<know> that the strings are
different, but they still compare the same:

=begin programlisting

    my $alice = 'alice';
    say "Catastrophic crypto fail!" if $alice == 'Bob';  # OOPS

=end programlisting

X<string context>
X<numeric context>
X<context; string>
X<context; numeric>

The C<eq> operator treats its operands as strings by enforcing I<string
context> on them.  The C<==> operator imposes I<numeric context>.  The example
code fails because the value of both strings when treated as numbers is C<0>
(L<numeric_coercion>).

X<boolean context>
X<context; boolean>

I<Boolean context> occurs when you use a value in a conditional statement.  In
the previous examples, the C<if> statement evaluated the results of the C<eq>
and C<==> operators in boolean context.

Perl will do its best to coerce values to the proper type (L<coercion>),
depending on the operators you use.  Be sure to use the proper operator for the
type of context you want.

In rare circumstances, you may need to force an explicit context where no
appropriately typed operator exists.  To force a numeric context, add zero to a
variable.  To force a string context, concatenate a variable with the empty
string.  To force a boolean context, double the negation operator:

=begin programlisting

    my $numeric_x =  0 + $x;  # forces numeric context
    my $stringy_x = '' . $x;  # forces string  context
    my $boolean_x =    !!$x;  # forces boolean context

=end programlisting

In general, type contexts are less difficult to understand and see than the
amount contexts.  Once you understand that they exist and know which operators
provide which contexts (L<operator_types>), you'll rarely make mistakes with
them.
