=head1 Scalars

Z<scalars>

X<scalars>
X<C<$>; sigil>
X<sigils; C<$>>

Perl 5's fundamental data type is the I<scalar>, a single, discrete value.
That value may be a string, an integer, a floating point value, a filehandle,
or a reference--but it is always a single value. Scalars may be lexical,
package, or global (L<globals>) variables. You may only declare lexical or
package variables. The names of scalar variables must conform to standard
variable naming guidelines (L<names>). Scalar variables always use the leading
dollar-sign (C<$>) sigil (L<sigils>).

=begin tip Variant Sigils and Context

Scalar values and scalar context have a deep connection; assigning to a scalar
provides scalar context. Using the scalar sigil with an aggregate variable
imposes scalar context to access a single element of the hash or array.

=end tip

=head2 Scalars and Types

A scalar variable can contain any type of scalar value without special
conversions or casts, and the type of value stored in a variable can change:

=begin programlisting

    my $value;
    $value = 123.456;
    $value = 77;
    $value = "I am Chuck's big toe.";
    $value = Store::IceCream->new();

=end programlisting

Even though this code is I<legal>, changing the type of data stored in a scalar
is a sign of confusion.

This flexibility of type often leads to value coercion (L<coercion>). For
example, you may treat the contents of a scalar as a string, even if you didn't
explicitly assign it a string:

=begin programlisting

    my $zip_code       = 97006;
    my $city_state_zip = 'Beaverton, Oregon' . ' ' . $zip_code;

=end programlisting

You may also use mathematical operations on strings:

=begin programlisting

    my $call_sign = 'KBMIU';

    # update sign in place and return new value
    my $next_sign = ++$call_sign;

    # return old value, I<then> update sign
    my $curr_sign = $call_sign++;

    # but I<does not work> as:
    my $new_sign  = $call_sign + 1;

=end programlisting

X<increment; string>

=begin tip One-Way Increment Magic

This magical string increment behavior has no corresponding magical decrement
behavior. You can't get the previous string value by writing C<$call_sign-->.

=end tip

This string increment operation turns C<a> into C<b> and C<z> into C<aa>,
respecting character set and case. While C<ZZ9> becomes C<AAA0>, C<ZZ09>
becomes C<ZZ10>--numbers wrap around while there are more significant places to
increment, as on a vehicle odometer.

X<stringification>
X<numification>

Evaluating a reference (L<references>) in string context produces a string.
Evaluating a reference in numeric context produces a number. Neither operation
modifies the reference in place, but you cannot recreate the reference from
either result:

=begin programlisting

    my $authors     = [qw( Pratchett Vinge Conway )];
    my $stringy_ref = '' . $authors;
    my $numeric_ref =  0 + $authors;

=end programlisting

C<$authors> is still useful as a reference, but C<$stringy_ref> is a string
with no connection to the reference and C<$numeric_ref> is a number with no
connection to the reference.

X<C<Scalar::Util>>
X<dualvars>
X<C<dualvar()>>

To allow coercion without data loss, Perl 5 scalars can contain both numeric
and string components. The internal data structure which represents a scalar in
Perl 5 has a numeric slot and a string slot. Accessing a string in a numeric
context produces a scalar with both string and numeric values. The C<dualvar()>
function within the core C<Scalar::Util> module allows you to manipulate both
values directly within a single scalar.

X<boolean>
X<scalars; boolean values>
X<boolean; true>
X<boolean; false>
X<strings; true>
X<strings; false>
X<numbers; true>
X<numbers; false>

Scalars do not contain a separate slot for boolean values. In boolean context,
the empty string (C<''>) and C<'0'> are false. All other strings are true. In
boolean context, numbers which evaluate to zero (C<0>, C<0.0>, and C<0e0>) are
false. All other numbers are true.

=begin tip What is Truth?

Be careful that the I<strings> C<'0.0'> and C<'0e0'> are true; this is one
place where Perl 5 makes a distinction between what looks like a number and
what really is a number.

=end tip

X<C<undef>>

One other value is always false: C<undef>. This is the value of uninitialized
variables as well as a value in its own right.
