=head1 Scalars

Z<scalars>

X<scalar>

Perl 5's fundamental data type is the I<scalar>, which represents a single,
discrete value.  That value may be a string, an integer, a floating point
value, a filehandle, or a reference--but it is always a single value.  Scalar
values and scalar context have a deep connection; assigning to a scalar
provides scalar context.

Scalars may be lexical, package, or global (L<globals>) variables.  You may
only declare lexical or package variables.  The names of scalar variables must
conform to the L<names> guidelines.  Scalar variables always use the leading
dollar-sign (C<$>) sigil (L<sigils>).

=begin sidebar

The converse is not I<universally> true; the scalar sigil applied to an
operation on an aggregate variable determines the amount type accessed through
that operation (L<arrays>, L<hashes>).

=end sidebar

=head2 Scalars and Types

Perl 5 scalars do not have static typing.  A scalar variable can contain any
type of scalar value without special conversions or casts, and the type of
value in a variable can change.  This code is legal:

=begin programlisting

    my $value;
    $value = 123.456;
    $value = 77;
    $value = "I am Chuck's big toe.";
    $value = Store::IceCream->new();

=end programlisting

Yet even though this is I<legal>, it can be confusing.  Choose descriptive and
unique names for your variables to avoid this confusion.

The type context of evaluation of a scalar may cause Perl to perform a coercion
of the value of that scalar (L<coercion>).  For example, you may treat the
contents of a scalar as a string, even if you didn't explicitly assign it a
string:

=begin programlisting

    my $zip_code        = 97006;
    my $city_state_zip  = 'Beaverton, Oregon' . ' ' . $zip_code;

=end programlisting

You may also perform mathematical operations on strings:

=begin programlisting

    my $call_sign = 'KBMIU';
    my $next_sign = $call_sign++;

    # also fine as
    $next_sign    = ++$call_sign;

    # but I<does not work> as:
    $next_sign    = $call_sign + 1;

=end programlisting

X<increment; string>

=begin sidebar

This magical string increment behavior does not have a corresponding magical
decrement behavior.  You can't get the previous string value by writing
C<$call_sign-->.

=end sidebar

This string increment operation turns C<a> into C<b> and C<z> into C<aa>,
respecting character set and case.  As well, C<ZZ9> becomes C<AA0>, but C<ZZ09>
becomes C<ZZ10>--numbers wrap around but do not carry to alphabetic components.

X<stringification>
X<numification>

Evaluating a reference (L<references>) in string context produces a string.
Evaluating a reference in numeric context produces a number.  Neither operation
modifies the reference in place, but you cannot recreate the reference from
either the string or numeric result:

=begin programlisting

    my $authors     = [qw( Pratchett Vinge Conway )];
    my $stringy_ref = '' . $authors;
    my $numeric_ref =  0 + $authors;

=end programlisting

C<$authors> is still useful as a reference, but C<$stringy_ref> is a string
with no connection to the reference and C<$numeric_ref> is a number with no
connection to the reference.


X<Scalar::Util>
X<dualvars>
X<dualvar(); Scalar::Util>
X<looks_like_number()>
X<looks_like_number;Scalar::Util>

All of these coercions and operations are possible because Perl 5 scalars can
contain numeric parts as well as string parts.  The internal data structure
which represents a scalar in Perl 5 has a numeric slot and a string slot.
Accessing a string in a numeric context eventually produces a scalar with both
string and numeric values.  The C<dualvar()> function within the core
C<Scalar::Util> module allows you to manipulate both values directly within a
single scalar.  Similarly, the module's C<looks_like_number()> function returns
true if the scalar value provided is something Perl 5 would interpret as a
number.

X<boolean>
X<scalars; boolean values>
X<boolean true>
X<boolean false>
X<strings; true>
X<strings; false>
X<numbers; true>
X<numbers; false>

Scalars do not have a separate slot for boolean values.  In boolean context,
the empty string (C<''>) and C<'0'> are false.  All other strings are true.  In
boolean context, numbers which evaluate to zero (C<0>, C<0.0>, and C<0e0>) are
false.  All other numbers are true.

Be careful that the I<strings> C<'0.0'> and C<'0e0'> are true; this is one
place where Perl 5 makes a distinction between what looks like a number and
what really is a number.

X<undef>

One other value is always false: C<undef>.  This is the value of uninitialized
variables as well as a value in its own right.
