=head1 Reflection

Z<reflection>

X<reflection>
X<introspection>

I<Reflection> (or I<introspection>) is the process of asking a program about
itself as it runs. By treating code as data you can manage code in the same way
that you manage data. This is a principle behind code generation
(L<code_generation>).

X<CPAN; C<Class::MOP>>

Moose's C<Class::MOP> (L<class_mop>) simplifies many reflection tasks for
object systems. If you use Moose, its metaprogramming system will help you. If
not, several other core Perl 5 idioms help you inspect and manipulate running
programs.

=head2 Checking that a Package Exists

To check that a package exists somewhere in your program--if some code
somewhere has executed a C<package> directive with a given name--check that the
package inherits from C<UNIVERSAL>. Anything which extends C<UNIVERSAL> must
somehow provide the C<can()> method. If no such package exists, Perl will throw
an exception about an invalid invocant, so wrap this call in an C<eval> block:

=begin programlisting

    say "$pkg exists" if eval { $pkg->can( 'can' ) };

=end programlisting

An alternate approach is groveling through Perl's symbol tables.

=head2 Checking that a Class Exists

Because Perl 5 makes no strong distinction between packages and classes, the
best you can do without Moose is to check that a package of the expected class
name exists. You I<can> check that the package C<can()> provide C<new()>, but
there is no guarantee that any C<new()> found is either a method or a
constructor.

=head2 Checking that a Module Has Loaded

X<C<%INC>>

If you know the name of a module, you can check that Perl believes it has
loaded that module by looking in the C<%INC> hash. When Perl 5 loads code with
C<use> or C<require>, it stores an entry in C<%INC> where the key is the file
path of the module to load and the value is the full path on disk to that
module. In other words, loading C<Modern::Perl> effectively does:

=begin programlisting

    $INC{'Modern/Perl.pm'} =
        '/path/to/perl/lib/site_perl/5.12.1/Modern/Perl.pm';

=end programlisting

The details of the path will vary depending on your installation. To test that
Perl has successfully loaded a module, convert the name of the module into the
canonical file form and test for that key's existence within C<%INC>:

=begin programlisting

    sub module_loaded
    {
        (my $modname = shift) =~ s!::!/!g;
        return exists $INC{ $modname . '.pm' };
    }

=end programlisting

X<C<@INC>>
X<CPAN; C<Test::MockObject>>
X<CPAN; C<Test::MockModule>>

As with C<@INC>, any code anywhere may manipulate C<%INC>. Some modules (such
as C<Test::MockObject> or C<Test::MockModule>) manipulate C<%INC> for good
reasons. Depending on your paranoia level, you may check the path and the
expected contents of the package yourself.

X<CPAN; C<Class::Load>>

The C<Class::Load> CPAN module's C<is_class_loaded()> function encapsulates
this C<%INC> check.

=head2 Checking a Module Version Number

Modules do not have to provide version numbers, but all package extend
C<UNIVERSAL> (L<universal>) and respond to its C<VERSION()> method:

=begin programlisting

    my $mod_ver = $module->VERSION();

=end programlisting

C<VERSION()> returns the given module's version number, if defined. Otherwise
it returns C<undef>. If the module does not exist, the method will likewise
return C<undef>.

=head2 Checking that a Function Exists

To check whether a function exists in a package, call C<can()> as a class
method on the package name:

=begin programlisting

    say "$func() exists" if $pkg->can( $func );

=end programlisting

Perl will throw an exception unless C<$pkg> is a valid invocant; wrap the
method call in an C<eval> block if you have any doubts about its validity.
Beware that a function implemented in terms of C<AUTOLOAD()> (L<autoload>) may
report the wrong answer if the function's package has not predeclared the
function or overridden C<can()> correctly. This is a bug in the other package.

Use this technique to determine if a module's C<import()> has imported a
function into the current namespace:

=begin programlisting

    say "$func() imported!" if __PACKAGE__->can( $func );

=end programlisting

As with checking for the existence of a package, you I<can> root around in
symbol tables yourself, if you have the patience for it.

=head2 Checking that a Method Exists

There is no foolproof way for reflection to distinguish between a function or a
method.

=head2 Rooting Around in Symbol Tables

X<symbol tables>
X<typeglobs>

A Perl 5 symbol table is a special type of hash, where the keys are the names
of package global symbols and the values are typeglobs. A I<typeglob> is an
internal data structure which can contain any or all of a scalar, an array, a
hash, a filehandle, and a function.

Access a symbol table as a hash by appending double-colons to the name of the
package. For example, the symbol table for the C<MonkeyGrinder> package is
available as C<%MonkeyGrinder::>.

You I<can> test the existence of specific symbol names within a symbol table
with the C<exists> operator (or manipulate the symbol table to I<add> or
I<remove> symbols, if you like). Yet be aware that certain changes to the Perl
5 core have modified the details of what typeglobs store and when and why.

X<CPAN; C<Package::Stash>>

See the "Symbol Tables" section in C<perldoc perlmod> for more details, then
prefer the other techniques in this section for reflection. If you really must
manipulate symbol tables and typeglobs, consider using the C<Package::Stash>
CPAN module instead.
