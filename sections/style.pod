Z<style>

=head1 Writing Maintainable Perl

X<maintainability>

The easier your program is to understand and to modify, the better.  This is
I<maintainability>.  Set aside your current program for six months, then try to
fix a bug or add a feature.  The more maintainable the code, the less
artificial complexity you will encounter making changes.

To write maintainable Perl you must:

=over 4

=item * I<Remove duplication.>  Perl offers many opportunities to use
abstraction to reduce and remove duplication.  Functions, objects, roles, and
modules, for example, allow you to define models of the problem and your
solution.

The more duplication in your system, the more work it is to make a necessary
change, and the more likely you will forget to make a change in every place
necessary.  The less duplication in your system, the more likely you've found
an effective design for your problem.  The best designs allow you to add
features while removing code overall.

=item * I<Name entities well.>  Everything you can name in your
system--functions, classes, methods, variables, modules--can aid or hinder
clarity.  The ease with which you can name these entities reveals your
understanding of the problem and the cohesion of your design.  Your design
tells a story, and every word you use effectively can help you remember that
story when you must later maintain the code.

=item * I<Avoid unnecessary cleverness.>  Novices sometimes mistake cleverness
for concision.  Concise code avoids unnecessary complexity.  Clever code
sometimes prefers its own cleverness to simplicity.  Perl offers many
approaches to solve similar problems.  One form may be more readable to your
team.  Another may be faster.  A third may be simpler.  Where possible,
optimize for obviousness first.

You can't always avoid the dark corners of Perl, and some problems require
cleverness to solve effectively.  Only good taste and experience will help you
evaluate the appropriate level of cleverness.  As a rule of thumb, if you're
prouder of explaining your solution to your coworkers than you are of solving a
problem, your code may have unnecessary complexity.

If you I<do> need clever code, encapsulate it behind a simple interface and
document your cleverness very well.

=item * I<Embrace simplicity.>  Given two programs which solve the same
problem, the simplest is almost always easier to maintain.  Simplicity doesn't
require you to eschew advanced Perl knowledge, or to avoid using libraries, or
to pound out hundreds of lines of procedural code.

Simplicity means that you've solved the problem at hand effectively without
adding anything you don't need.  This is no excuse to avoid error checking or
verification or validation or security.  Instead it's a reminder to think about
what's really important.  Sometimes you don't need frameworks, or objects, or
complex data structures.  Sometimes you do.  Simplicity means knowing the
difference.

=back

=head1 Writing Idiomatic Perl

X<idioms>

Perl steals ideas from other languages as well as from the wild world outside
of programming.  Perl tends to claim these ideas by making them Perlish.  To
write Perl well, you must know how experienced Perl programmers write it.

=over 4

=item * I<Understand community wisdom.>  The Perl community often debates
techniques, sometimes fiercely.  Yet even these disagreements offer
enlightenment on specific design tradeoffs and styles.  You know your specific
needs, but CPAN authors, CPAN developers, your local Perl Mongers group, and
other programmers have experience solving similar problems.  Talk to them.
Read their public code.  Ask questions.  Learn from them and let them learn
from you.

=item * I<Follow community norms.>  The Perl community isn't always right,
especially if your needs are very specific or unique, but it works continually
to solve problems as broadly as possible.  Perl's testing and packaging tools
work best when you organize your code as if you were to distribute it on the
CPAN.  Adopt the standard approaches to writing, documenting, packaging,
testing, and distributing your code, to take advantage of these tools.

X<C<Perl::Critic>>
X<C<Perl::Tidy>>
X<C<CPAN::Mini>>

Similarly, CPAN distributions such as C<Perl::Critic> and C<Perl::Tidy> and
C<CPAN::Mini> can make your work simpler and easier.

=item * I<Read code.>  Join in a mailing list such as the Perl Beginners list
(U<http://learn.perl.org/faq/beginners.html>), browse PerlMonks
(U<http://perlmonks.org/>), and otherwise immerse yourself in the Perl
CommunityN<See U<http://www.perl.org/community.html> for more links.>.  You'll
have plenty of opportunities to see how other people solve their problems, good
and bad.  Learn from the good (it's often obvious) and the bad (to see what to
avoid).

Writing a few lines of code to solve a problem someone else posted is a great
way to learn.

=back

=head1 Writing Effective Perl

X<efficacy>

Knowing Perl's syntax and semantics is only the beginning.  You can only
achieve good design if you follow habits to I<encourage> good design.

=over 4

=item * I<Write testable code.>  Perhaps the best way to ensure that you can
maintain code is to write an effective test suite.  Writing test code well
exercises the same design skills as designing programs well; never forget that
test code is still code.  Even so, a good test suite will give you confidence
that you can modify a program and not break existing behaviors you care about.

=item * I<Modularize.>  Break your code into individual modules to enforce
encapsulation and abstraction boundaries.  Make a habit of this and you'll
recognize individual units of code which do too many things.  You'll identify
multiple units that work too tightly together.

Modularity also forces you to manage different levels of abstraction; you must
consider how the entities of your system work together.  There's no better way
to learn the value of abstraction than having to revise systems into effective
abstractions.

=item * I<Take advantage of the CPAN.>  The single best force multiplier for
any Perl 5 program is the amazing library of reusable code available for anyone
to use.  Thousands of developers have written tens of thousands of modules to
solve more problems than you can imagine, and the CPAN only continues to grow.
Community standards for documentation, for packaging, for installation, and for
testing contribute to the quality of the code, and the CPAN's centrality in
modern Perl has helped the Perl community grow in knowledge, in wisdom, and in
efficacy.

Whenever possible, search the CPAN first--and ask your fellow community
members--for advice on solving your problems.  You may even report a bug, or
submit a patch, or produce your own distribution on the CPAN.  Nothing
demonstrates you're an effective Perl programmer more than helping other people
solve their problems.

=item * I<Establish sensible coding standards.>  Effective guidelines establish
policies for error handling, security, encapsulation, API design, project
layout, and other maintainability concerns.  Excellent guidelines evolve as you
and your team understand each other and your projects better.  The goal of
programming is to solve problems, and the goal of coding standards is to help
you communicate your intentions clearly.

=back
