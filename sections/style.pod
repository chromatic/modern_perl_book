Z<style>

=head1 Writing Maintainable Perl

X<maintainability>

I<Maintainability> is the nebulous measurement of the ease of understanding and
modifying an existing program. Set aside some code for six months, then return
to it anew. Maintainability measures the difficulty you face making changes.

Maintainability is neither a syntactic concern nor a measurement of how a
non-programmer might view your code. Assume a competent programmer who
understands the nature of the problem the code must solve. What problems get in
the way of fixing a bug or adding an enhancement correctly?

The ability to write maintainable code comes from hard-won experience and
comfort with idioms and techniques and the dominant style of the language. Yet
even novices can improve the maintainability of their code by adhering to a few
principles:

=over 4

=item * I<Remove duplication.> Bugs lurk in sections of repeated and similar
code--when you fix a bug on one section, did you fix it in others? When you
update one section, did you update the others?

Well-designed systems have little duplication. They use functions, modules,
objects, and roles to extract duplicate code into reusable components which
accurately model the domain of the problem. The best designs allow you to add
features by I<removing> code.

=item * I<Name entities well.> Your code tells a story. Every named
symbol--variables, functions, models, classes--allows you to clarify or
obfuscate your intent. The ease of choosing names reveals your understanding of
the problem and your design. Choose your names carefully.

=item * I<Avoid unnecessary cleverness.> Concise code is good, when it reveals
the intention of the code. Clever code hides your intent behind flashy tricks.
Perl allows you to write the right code at the right time. Where possible,
choose the most obvious solution. Experience, good taste, and knowing what
really matters will guide you.

Some problems require clever solutions. Encapsulate this code behind a simple
interface and document your cleverness.

=item * I<Embrace simplicity.> All else being equal, a simpler program is
easier to maintain than its more complex workalike. Simplicity means knowing
what's most important and doing just that.

This is no excuse to avoid error checking or modularity or validation or
security. Simple code can use advanced features. Simple code can use great
piles of CPAN modules. Simple code may require work to understand. Yet simple
code solves problems effectively, without unnecessary work.

Sometimes you need powerful, robust code. Sometimes you need a one-liner.
Simplicity means knowing the difference and building only what you need.

=back

=head1 Writing Idiomatic Perl

X<idioms>

Perl borrows liberally from other languages. Perl lets you write the code you
want to write. C programmers often write C-style Perl, just as Java programmers
write Java-style Perl. Effective Perl programmers write Perlish Perl, embracing
the language's idioms.

=over 4

=item * I<Understand community wisdom.> Perl programmers often host fierce
debates over techniques. Perl programmers also often share their work, and not
just on the CPAN. Pay attention, and gain enlightenment on the tradeoffs
between various ideals and styles.

CPAN developers, Perl Mongers, and mailing list participants have hard-won
experience solving problems in myriad ways. Talk to them. Read their code. Ask
questions. Learn from them and let them learn from you.

X<CPAN; C<Perl::Critic>>
X<CPAN; C<Perl::Tidy>>
X<CPAN; C<CPAN::Mini>>

=item * I<Follow community norms.> Perl is a community of toolsmiths. We solve
broad problems, including static code analysis (C<Perl::Critic>), reformatting
(C<Perl::Tidy>), and private distribution systems (C<CPAN::Mini>). Take
advantage of the CPAN infrastructure; follow the CPAN model of writing,
documenting, packaging, testing, and distributing your code.

=item * I<Read code.> Join a mailing list such as Perl Beginners
(U<http://learn.perl.org/faq/beginners.html>), browse PerlMonks
(U<http://perlmonks.org/>), and otherwise immerse yourself in the
communityN<See U<http://www.perl.org/community.html>.>. Read code and try to
answer questions--even if you never post them, this is a great opportunity to
learn.

=back

=head1 Writing Effective Perl

X<efficacy>

Maintainability is ultimately a design concern. Good design comes from
practicing good habits:

=over 4

=item * I<Write testable code.> Writing an effective test suite exercises the
same design skills as writing effective code. Code is code. Good tests also
give you the confidence to modify a program while keeping it running correctly.

=item * I<Modularize.> Enforce encapsulation and abstraction boundaries. Find
the right interfaces between components. Name things well and put them where
they belong. Modularity forces you to reason about the abstractions in your
programs to understand how everything fits together. Find the pieces that don't
fit well. Improve your code until they do.

=item * I<Follow sensible coding standards.> Effective guidelines govern error
handling, security, encapsulation, API design, project layout, and other
maintainability concerns. Excellent guidelines help developers communicate with
each other with code. You solve problems. Speak clearly.

=item * I<Exploit the CPAN.> Perl programmers solve problems. Then we share
those solutions. Take advantage of this force multiplier. Search the CPAN first
for a solution or partial solution to your problem. Invest your research time;
it will pay off.

If you find a bug, report it. Patch it, if possible. Fix a typo. Ask for a
feature. Say "Thank you!" We are better together than we are separately. We are
powerful and effective when we reuse code.

When you're ready, when you solve a new problem, share it. Join us. We solve
problems.

=back
