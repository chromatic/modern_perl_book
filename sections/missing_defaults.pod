=head1 Missing Defaults

Z<missing_defaults>

Perl 5's design process in 1993 and 1994 tried to anticipate new directions for
the language, but it's impossible to predict the future.  Perl 5 added many
great new features, but it also kept compatibility with the previous seven
years of Perl 1 through Perl 4.  Sixteen years later, the best way to write
clean, maintainable, powerful, and succinct Perl 5 code is very different from
Perl 5.000.  The default behaviors sometimes get in the way; fortunately,
better behaviors are available.

=head2 The strict Pragma

X<strict>
X<modules; strict>
X<pragmas; strict>

The C<strict> pragma (L<pragmas>) allows you to forbid (or re-enable) various
language constructs which offer power but also the potential for accidental
abuse.

C<strict> performs three functions: forbidding symbolic references, requiring
variable declarations, and forbidding the use of undeclared barewords
(L<barewords>).  While the occasional use of symbolic references is necessary
to perform symbol-table manipulation and exporting (barring the use of helper
modules, such as C<Moose>), the use of a variable as a variable name offers the
possibility of subtle errors of action at a distance--or, worse, the
possibility of poorly-validated user input manipulating internal-only data for
malicious purposes.

Requiring variable declarations helps to prevent typos in variable names and
encourages proper scoping of lexical variables.  It's much easier to see the
intended scope of a lexical variable if all variables have C<my> or C<our>
declarations in the appropriate scope.

C<strict> has a lexical effect, based on the compile-time scope of its use.
You may disable certain features of C<strict> (within the smallest possible
scope, of course) with C<no strict>.  See C<perldoc strict> for more details.

=head2 The warnings Pragma

The C<warnings> pragma (L<handling_warnings>) controls the reporting of various
classes of warnings in Perl 5, such as attempting to stringify the C<undef>
value or using the wrong type of operator on values.  It also warns about the
use of deprecated features.

The most useful warnings explain that Perl had trouble understanding what you
meant and had to guess at the proper interpretation.  Even though Perl often
guesses correctly, disambiguation on your part will ensure that your programs
run correctly.

The C<warnings> pragma has a lexical effect on the compile-time scope of its
use.  You may disable some or all warnings with C<no warnings> (within the
smallest possible scope, of course).  See C<perldoc perllexwarn> and C<perldoc
warnings> for more details.

=begin sidebar

Combine C<use warnings> with C<use diagnostics>, and Perl 5 will display
expanded diagnostic messages for each warning present in your programs.  These
expanded diagnostics come from C<perldoc perldiag>.  This behavior is useful
when learning Perl, but it's less useful in code deployed to production,
because it can produce verbose error output.

=end sidebar

=head2 IO::Handle

Perl 5.6.0 added lexical filehandles.  Previously, filehandles were all package
globals.  This was occasionally messy and often confusing.  Now that you can
write:

=begin programlisting

    open my $fh, '>', $file or die "Can't write to '$file': $!\n";

=end programlisting

... the lexical filehandle in C<$fh> is easier to use.  The implementation of
lexical filehandles creates objects; C<$fh> is an instance of C<IO::Handle>.
Unfortunately, even though C<$fh> is an object, you can't call methods on it
because nothing has loaded the C<IO::Handle> class.

This is occasionally painful when you want to flush the buffer of the
associated filehandle, for example.  It could be as easy as:

=begin programlisting

    $fh->flush();

=end programlisting

... but only if your program somewhere contains C<use IO::Handle>.  The
solution is to add this line to your programs so that lexical filehandles--the
objects as they are--behave as objects should behave.

=head2 The autodie Pragma

Z<autodie>
X<autodie>
X<pragmas; autodie>

Perl 5's default error checking is parsimonious.  If you're not careful to
check the return value of every C<open()> call, for example, you could try to
read from a closed filehandle--or worse, lose data as you try to write to one.
The C<autodie> pragma changes the default behavior.  If you write:

=begin programlisting

    use autodie;

    open my $fh, '>', $file;

=end programlisting

... an unsuccessful C<open()> call will throw an exception via Perl 5's normal
exception mechanism.  Given that the most appropriate approach to a failed
system call is throwing an exception, this pragma can remove a lot of
boilerplate code and allow you the peace of mind of knowing that you haven't
forgotten to check a return value.

This pragma entered the Perl 5 core as of Perl 5.10.1.  See C<perldoc autodie>
for more information.
