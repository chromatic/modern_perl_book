=head1 Taint

Z<taint>

Perl provides tools with which to write secure programs. These tools are no
substitute for careful thought and planning, but they I<reward> caution and
understanding and can help you avoid subtle mistakes.

=head2 Using Taint Mode

X<taint>

I<Taint mode> (or I<taint>) adds metadata to all data which comes from outside
of your program. Any data derived from tainted data is also tainted. You may
use tainted data within your program, but if you use it to affect the outside
world--if you use it insecurely--Perl will throw a fatal exception.

C<perldoc perlsec> explains taint mode in copious detail.

X<C<-T>; taint command-line argument>
X<command-line arguments; C<-T>>
X<C<%ENV>>

Launch your program with the C<-T> command-line argument to enable taint mode.
If you use this argument on the C<#!> line of a program, you must run the
program directly; if you run it as C<perl mytaintedappl.pl> and neglect the
C<-T> flag, Perl will exit with an exception.  By the time Perl encounters the
flag on the C<#!> line, it's missed its opportunity to taint the environment
data which makes up C<%ENV>, for example.

=head2 Sources of Taint

Taint can come from two places: file input and the program's operating
environment. The former is anything you read from a file or collect from users
in the case of web or network programming. The latter includes any command-line
arguments, environment variables, and data from system calls. Even operations
such as reading from a directory handle produce tainted data.

X<C<Scalar::Util>>
X<C<tainted()>>
X<taint; checking>

The C<tainted()> function from the core module C<Scalar::Util> returns true if
its argument is tainted:

=begin programlisting

    die 'Oh no! Tainted data!'
        if Scalar::Util::tainted( $suspicious_value );

=end programlisting

=head2 Removing Taint from Data

X<taint; untainting>
X<untainting>

To remove taint, you must extract known-good portions of the data with a
regular expression capture.  The captured data will be untainted.  If your user
input consists of a US telephone number, you can untaint it with:

=begin programlisting

    die 'Number still tainted!'
        unless $number =~ /(\(/d{3}\) \d{3}-\d{4})/;

    my $safe_number = $1;

=end programlisting

The more specific your pattern is about what you allow, the more secure your
program can be.  The opposite approach of I<denying> specific items or forms
runs the risk of overlooking something harmful. Far better to disallow
something that's safe but unexpected than that to allow something harmful which
appears safe. Even so, nothing prevents you from writing a capture for the
entire contents of a variable--but in that case, why use taint?

=head2 Removing Taint from the Environment

X<taint; removing sources of>

The superglobal C<%ENV> represents environment variables for the system.  This
data is tainted because forces outside of the program's control can manipulate
values there. Any environment variable which modifies how Perl or the shell
finds files and directories is an attack vector. A taint-sensitive program
should delete several keys from C<%ENV> and set C<$ENV{PATH}> to a specific and
well-secured path:

=begin programlisting

    delete @ENV{ qw( IFS CDPATH ENV BASH_ENV ) };
    $ENV{PATH} = '/path/to/app/binaries/';

=end programlisting

If you do not set C<$ENV{PATH}> appropriately, you will receive messages about
its insecurity. If this environment variable contained the current working
directory, or if it contained relative directories, or if the directories
specified had world-writable permissions, a clever attacker could hijack system
calls to perpetrate mischief.

For similar reasons, C<@INC> does not contain the current working directory
under taint mode. Perl will also ignore the C<PERL5LIB> and C<PERLLIB>
environment variables. Use the C<lib> pragma or the C<-I> flag to C<perl> to
add library directories to the program.

=head2 Taint Gotchas

Taint mode is all or nothing.  It's either on or off.  This sometimes leads
people to use permissive patterns to untaint data, and gives the illusion of
security.  Review untainting carefully.

X<C<-t>; enable baby taint command-line argument>
X<command-line arguments; C<-t>>

Unfortunately, not all modules handle tainted data appropriately.  This is a
bug which CPAN authors should take seriously.  If you have to make legacy code
taint-safe, consider the use of the C<-t> flag, which enables taint mode but
reduces taint violations from exceptions to warnings.  This is not a substitute
for full taint mode, but it allows you to secure existing programs without the
all or nothing approach of C<-T>.
