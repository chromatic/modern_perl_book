=head1 Idioms

Z<idioms>

Any language--programming or natural--develops I<idioms>, or common patterns of
expression.  The earth revolves, but we speak of the sun rising or setting.  We
talk of clever hacks and nasty hacks and slinging code.

As you learn Perl 5 more clearly, you will begin to see and understand common
idioms.  They're not quite language features--you don't I<have> to use
them--and they're not quite large enough that you can encapsulate them away
behind functions and methods.  Instead, they're mannerisms.  They're ways of
writing Perl with a Perlish accent.

=head2 The Object as C<$self>

X<C<$self>>
X<variables; C<$self>>
X<objects; invocant>
X<methods; invocant>

Perl 5's object system (L<moose>) treats the invocant of a method as a mundane
parameter.  The invocant of a class method--a string containing the name of the
class--is that method's first parameter.  The invocant of an object or instance
method--the object itself--is that method's first parameter.  You are free to
use or ignore it as you see fit.

Idiomatic Perl 5 uses C<$class> as the name of the class method and C<$self>
for the name of the object invocant.  This is a convention not enforced by the
language itself, but it is a convention strong enough that useful extensions
such as C<MooseX::Method::Signatures> assume you will use C<$self> as the name
of the invocant by default.

=head2 Named Parameters

X<parameters; named>
X<arguments; named>
X<C<signatures>>
X<C<MooseX::MultiMethods>>

Without a module such as C<signatures> or C<MooseX::MultiMethods>, Perl 5's
argument passing mechanism is simple: all arguments flatten into a single list
accessible through C<@_> (L<function_parameters>).  While this simplicity is
occasionally too simple--named parameters can be very useful at times--it does
not preclude the use of idioms to provide named parameters.

The list context evaluation and assignment of C<@_> allows you to unpack named
parameters as pairs in a natural and Perlish fashion.  Even though this
function call is equivalent to passing a comma-separated or C<qw//>-created
list, arranging the arguments as if they were true pairs of keys and values
makes the caller-side of the function appear to support named parameters:

=begin programlisting

    make_ice_cream_sundae(
        whipped_cream => 1,
        sprinkles     => 1,
        banana        => 0,
        ice_cream     => 'mint chocolate chip',
    );

=end programlisting

The callee side can unpack these parameters into a hash and treat the hash as
if it were the single argument:

=begin programlisting

    sub make_ice_cream_sundae
    {
        B<my %args = @_;>

        my $ice_cream = get_ice_cream( $args{ice_cream}) );
        ...
    }

=end programlisting

=begin sidebar

I<Perl Best Practices> suggests passing a hash reference instead.  This allows
Perl to check that you've constructed a valid hash on the caller side.  It also
uses slightly less memory than the other approach.

=end sidebar

This technique works well with C<import()> (L<importing>); you can process as
many parameters as you like before slurping the remainder into a hash:

=begin programlisting

    sub import
    {
        B<my ($class, %args)  = @_;>
        my $calling_package = caller();

        ...
    }

=end programlisting

=head2 The Schwartzian Transform

Z<schwartzian_transform>

People new to Perl sometimes overlook the importance of lists and list
processing as a fundamental component of expression evaluation.  Put more
simply, the ability for Perl programmers to chain expressions which evaluate to
variable-length lists provides countless opportunities to manipulate data
effectively.

X<Schwartzian transform>
X<C<map>; Schwartzian transform>
X<C<sort>; Schwartzian transform>
X<builtins; C<map>>
X<builtins; C<sort>>

The I<Schwartzian transform> is an elegant demonstration of that principle as
an idiom handily borrowed from the Lisp family of languages.

Suppose you have a Perl hash which associates the names of your co-workers with
their phone extensions:

=begin programlisting

    my %extensions =
    (
         4 => 'Jerryd',
         5 => 'Rudy',
         6 => 'Juwan',
         7 => 'Brandon',
        10 => 'Joel',
        21 => 'Marcus',
        24 => 'Andre',
        23 => 'Martell',
        52 => 'Greg',
        88 => 'Nic',
    );

=end programlisting

Suppose you want to print a list of extensions and co-workers sorted by their
names, not their extensions.  In other words, you need to sort this hash by its
values.  Sorting the values of the hash in string order is easy:

=begin programlisting

    my @sorted_names = sort values %extensions;

=end programlisting

... but that loses the association of names with extensions.  The Schwartzian
transform can perform the sorting while preserving the necessary information.
First, convert the hash into a list of data structures which contain the vital
information in sortable fashion.  In this case, convert the hash pairs into
two-element anonymous arrays:

=begin programlisting

    my @pairs = map { [ $_, $extensions{$_} ] } keys %extensions;

=end programlisting

=begin sidebar

Reversing the hash I<in place> would work if no one had the same name.  This
particular data set presents no such problem, but code defensively.

=end sidebar

C<sort> takes the list of anonymous arrays and compares their second elements
(the names) as strings:

=begin programlisting

    my @sorted_pairs = sort { $a->[1] cmp $b->[1] } @pairs;

=end programlisting

X<C<$a>>
X<C<$b>>
X<builtins; C<sort>>

The block provided to C<sort> takes its arguments in two package-scoped
(L<scope>) variables C<$a> and C<$b>N<See C<perldoc -f sort> for an extensive
discussion of the implications of this scoping.>.  You do not have to declare
these variables; they are always available in your current package.  The
C<sort> block takes its arguments two at a time; the first becomes the contents
of C<$a> and the second the contents of C<$b>.  If C<$a> should come before
C<$b> in the results, the block must return -1.  If both values are
sufficiently equal in the sorting terms, the block must return 0.  Finally, if
C<$a> should come after C<$b> in the results, the block should return 1.  Any
other return values are errors.

X<operators; C<cmp>>
X<< operators; C<< <=> >> >>

The C<cmp> operator performs string comparisons and the C<< <=> >> performs
numeric comparisons.

Given C<@sorted_pairs>, a second C<map> operation converts the data structure
to a more usable form:

=begin programlisting

    my @formatted_exts = map { "$_->[1], ext. $_->[0]" } @sorted_pairs;

=end programlisting

... and now you can print the whole thing:

=begin programlisting

    say for @formatted_exts;

=end programlisting

Of course, this uses several temporary variables (with admittedly bad names).
It's a worthwhile technique and good to understand, but the real magic is in
the combination:

=begin programlisting

    say for
        map  { " $_->[1], ext. $_->[0]"          }
        sort {   $a->[1] cmp   $b->[1]           }
        map  { [ $_      =>    $extensions{$_} ] }
            keys %extensions;

=end programlisting

Read the expression from right to left, in the order of evaluation.  For each
key in the extensions hash, make a two-item anonymous array containing the key
and the value from the hash.  Sort that list of anonymous arrays by their
second elements, the values from the hash.  Format a string of output from
those sorted arrays.

The Schwartzian transform is this pipeline of C<map>-C<sort>-C<map> where you
transform a data structure into another form easier for sorting and then
transform it back into your preferred form for modification.

This transformation is simple.  Consider the case where calculating the right
value to sort is expensive in time or memory, such as calculating a
cryptographic hash for a large file.  In that case, the Schwartzian transform
is also useful because you can execute those expensive operations once (in the
rightmost C<map>), compare them repeatedly from a de facto cache in the
C<sort>, and then remove them in the leftmost C<map>.

=head2 Easy File Slurping

Z<easy_file_slurping>

X<builtins; C<local>>
X<C<$/>>
X<files; slurping>
X<global variables; C<$/>>

Perl 5's magic global variables are truly global in many cases.  It's all too
easy to clobber their values elsewhere, unless you use C<local> everywhere.
Yet this requirement has allowed the creation of several interesting idioms.
For example, you can slurp files into a scalar in a single expression:

=begin programlisting

    my $file = do { local $/ = <$fh> };

    # or

    my $file = do { local $/; <$fh> };

=end programlisting

C<$/> is the input record separator.  C<local>izing it sets its value to
C<undef>, pending assignment.  That C<local>ization takes place I<before> the
assignment.  As the value of the separator is undefined, Perl happily reads the
entire contents of the filehandle in one swoop and assigns that value to C<$/>.
Because a C<do> block evaluates to the value of the last expression evaluated
within the block, this evaluates to the value of the assignment, or the
contents of the file.  Even though C<$/> immediately reverts to its previous
state at the end of the block, C<$file> now contains the contents of the file.

The second example contains no assignment and merely returns the single line
read from the filehandle.  You may see either example; they both work the same
way in this case.

X<C<File::Slurp>>

This can be useful (and, admittedly, maddening for people unfamiliar with this
particular combination of Perl 5 features) if you don't have C<File::Slurp>
installed from the CPAN.

=head2 Controlled Execution

Z<controlled_execution>

The effective difference between a program and a module is in its intended use.
Users invoke programs directly, while programs load modules after execution has
already begun.  The technical difference between a program and a module is
whether it's meaningful to invoke the entity directly.

You may encounter this when you wish to use Perl's testing tools (L<testing>)
to test functions in a standalone program or when you wish to make a module
users can run directly.  All you need to do is to discover I<how> Perl began to
execute a piece of code.  For this, use C<caller>.

X<builtins; C<caller>>

C<caller>'s single optional argument is the number of call frames which to
report.  (A I<call frame> is the bookkeeping information which represents a
function call.)  You can get information about the current call frame with
C<caller(0)>.  To allow a module to run correctly as a program I<or> a module,
write an appropriate C<main()> function and add a single line to the start of
the module:

=begin programlisting

    main() unless caller(0);

=end programlisting

If there's I<no> caller for the module, someone invoked it directly as a
program (with C<perl path/to/Module.pm> instead of C<use Module;>).

=begin sidebar

Checking the eighth element of the list returned from C<caller> in list context
may be more accurate in most cases, but it's rare.  This value is true if the
call frame represents C<use> or C<require> and C<undef> otherwise.

=end sidebar

=head2 Handling Main

Perl requires no special syntax for creating closures (L<closures>); you can
close over a lexical variable inadvertently.  This is I<rarely> a problem in
practice, apart from specific concerns in mod_perl situations... and C<main()>
functions.

Many programs commonly set up several file-scoped lexical variables before
handing off processing to other functions.  It's tempting to use these
variables directly, rather than passing values to and returning values from
functions, especially as programs grow to provide more features.  Worse yet,
these programs may come to rely on subtleties of what happens when during Perl
5's compilation process; a variable you I<thought> would be initialized to a
specific value may not get initialized until much later.

There is a simple solution.  Wrap the main code of your program in a simple
function, C<main()>.  Encapsulate all of the variables you don't need as true
globals.  Then add a single line to the beginning of your program, after you've
used all of the modules and pragmas you need:

=begin programlisting

    #!/usr/bin/perl

    use Modern::Perl;
    use autodie;

    ...

    B<main( @ARGS );>

=end programlisting

Calling C<main()> I<before> anything else in the program forces you to be
explicit about initialization and order of compilation.  It also helps to
remind you to encapsulate the behavior of your program into functions and
modules.  (It works nicely with files which can be programs and
libraries--L<controlled_execution>.)

=head2 Postfix Parameter Validation

Z<postfix_parameter_validation>

X<C<Params::Validate>>
X<C<MooseX::Params::Validate>>

Even if you don't use a CPAN module such as C<Params::Validate> or
C<MooseX::Params::Validate> to verify that the parameters your functions
receive are correct, you can still benefit from occasional checks for
correctness.  The C<unless> control flow modifier is an easy and readable way
to assert your expectations at the beginning of a function.

Suppose your function takes two arguments, no more and no less.  You I<could>
write:

=begin programlisting

    use Carp;

    sub groom_monkeys
    {
        if (@_ != 2)
        {
            croak 'Monkey grooming requires two monkeys!';
        }
    }

=end programlisting

... but from a linguistic perspective, the consequences are more important than
the check and deserve to be at the I<start> of the expression:

=begin programlisting

    croak 'Monkey grooming requires two monkeys!' if @_ != 2;

=end programlisting

... which, depending on your preference for reading postfix conditions, you can
simplify to:

=begin programlisting

    croak 'Monkey grooming requires two monkeys!' unless @_ == 2;

=end programlisting

This is easier to read if you focus on the text of the message ("You need to
pass two parameters!") and the test (C<@_> should contain two items).  It's
almost a single row in a truth table.

=head2 Regex En Passant

Z<regex_en_passant>

X<regex; modification>
X<regex; substitution>

Many Perl 5 idioms rely on the language design where expressions evaluate to
values, as in:

=begin programlisting

    say my $ext_num = my $extension = 42;

=end programlisting

It's bad form to write code like that, but it demonstrates the point: you can
use the value of one expression in another expression.  This isn't a new idea;
you've likely used the return value of a function in a list or as an argument
to another function before.  You may not have realized its implications.

X<regex; capture>

Suppose you have a whole name and you want to extract the first name.  This is
easy to do with a regular expression:

=begin programlisting

    my ($first_name) = $name =~ /($first_name_rx)/;

=end programlisting

... where C<$first_name_rx> is a precompiled regular expression.  In list
context, a successful regex match returns a list of all captures, and Perl
assigns the first one to C<$first_name>.

Now imagine if you want to modify the name, perhaps removing all non-word
characters to create a useful user name for a system account.  You can write:

=begin programlisting

    (my $normalized_name = $name) =~ tr/A-Za-z//dc;

=end programlisting

Unlike the previous example, this one reads right to left.  First, assign the
value of C<$name> to C<$normalized_name>.  Then, transliterate
C<$normalized_name>N<The parentheses here affect the precedence so that the
assignment happens first.>.  The assignment expression evaluates to the
I<variable> C<$normalized_name>.  This technique works on all sorts of in-place
modification operators:

=begin programlisting

    my $age = 14;
    (my $next_age = $age)++;

    say "Next year I will be $next_age";

=end programlisting

=head2 Unary Coercions

Z<unary_coercions>

X<coercion>
X<types>

Perl 5's type system often does the right thing, at least if you choose the
correct operators.  To concatenate strings, use the string concatenation
operator, and Perl will treat both scalars as strings.  To add two numbers, use
the addition operator and Perl will treat both scalars as numeric.

Sometimes you have to give Perl a hint about what you mean.  Several I<unary
coercions> exist, by which you can use Perl 5 operators to force the evaluation
of a value a specific way.

X<unary conversions; numeric>

To ensure that Perl treats a value as numeric, add zero:

=begin programlisting

    my $numeric_value = 0 + $value;

=end programlisting

X<unary conversions; boolean>

To ensure that Perl treats a value as boolean, double negate it:

=begin programlisting

    my $boolean_value = !! $value;

=end programlisting

X<unary conversions; string>

To ensure that Perl treats a value as a string, concatenate it with the empty
string:

=begin programlisting

    my $string_value = '' . $value;

=end programlisting

Though the need for these coercions is vanishingly rare, you should understand
these idioms if you encounter them.
