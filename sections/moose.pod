=head1 Moose

Z<moose>

X<moose>

Perl 5's default object system is flexible, but minimal. You can build great
things on top of it, but it provides little assistance for some basic tasks.
I<Moose> is a complete object system for Perl 5N<See C<perldoc Moose::Manual>
for more information.>. It provides simpler defaults, and advanced features
borrowed from languages such as Smalltalk, Common Lisp, and Perl 6. Moose code
interoperates with the default object system and is currently the best way to
write object oriented code in modern Perl 5.

=head2 Classes

X<classes>
X<builtins; C<package>>

A Moose object is a concrete instance of a I<class>, which is a template
describing data and behavior specific to the object. Classes use packages
(L<packages>) to provide namespaces:

=begin programlisting

    package Cat
    {
        use Moose;
    }

=end programlisting

X<OO; instances>

This C<Cat> class I<appears> to do nothing, but that's all Moose needs to make
a class. Create objects (or I<instances>) of the C<Cat> class with the syntax:

=begin programlisting

    my $brad = Cat->new();
    my $jack = Cat->new();

=end programlisting

Just as an arrow dereferences a reference, an arrow calls a method on an object
or class.

=head2 Methods

X<OO; methods>
X<OO; invocants>

A I<method> is a function associated with a class. Just as functions belong to
namespaces, so do methods belong to classes, with two differences. First, a
method always operates on an I<invocant>. Calling C<new()> on C<Cat>
effectively sends the C<Cat> class a message. The name of the class, C<Cat>, is
C<new()>'s invocant. When you call a method on an object, that object is the
invocant:

=begin programlisting

    my $choco = B<Cat>->new();
    B<$choco>->sleep_on_keyboard();

=end programlisting

X<dispatch>
X<method dispatch>
X<OO; dispatch>
X<OO; method dispatch>

Second, a method call always involves a I<dispatch> strategy, where the object
system selects the appropriate method. Given the simplicity of C<Cat>, the
dispatch strategy is obvious, but much of the power of OO comes from this idea.

Inside a method, its first argument is the invocant. Idiomatic Perl 5 uses
C<$self> as its name. Suppose a C<Cat> can C<meow()>:

=begin programlisting

    package Cat
    {
        use Moose;

        B<sub meow>
        B<{>
            B<my $self = shift;>
            B<say 'Meow!';>
        B<}>
    }

=end programlisting

Now all C<Cat> instances can wake you up in the morning because they haven't
eaten yet:

=begin programlisting

    my $fuzzy_alarm = Cat->new();
    $fuzzy_alarm->meow() for 1 .. 3;

=end programlisting

X<class method>
X<instance method>
X<OO; class methods>
X<OO; instance methods>
X<methods; class>
X<methods; instance>

Methods which access invocant data are I<instance methods>, because they depend
on the presence of an appropriate invocant to work correctly. Methods (such as
C<meow()>) which do not access instance data are I<class methods>. You may
invoke class methods on classes and class and instance methods on instances,
but you cannot invoke instance methods on classes.

X<methods; constructor>

I<Constructors>, which I<create> instances, are obviously class methods. Moose
provides a default constructor for you.

Class methods are effectively namespaced global functions. Without access to
instance data, they have few advantages over namespaced functions. Most OO code
rightly uses instance methods, as they have access to instance data.

=head2 Attributes

X<attributes; objects>
X<OO; attributes>
X<OO; state>
X<attributes; typed>
X<attributes; C<ro> (read only)>

Every object in Perl 5 is unique. Objects can contain private data associated
with each unique object--these are I<attributes>, I<instance data>, or object
I<state>. Define an attribute by declaring it as part of the class:

=begin programlisting

    package Cat
    {
        use Moose;

        B<< has 'name', is => 'ro', isa => 'Str'; >>
    }

=end programlisting

In English, that reads "C<Cat> objects have a C<name> attribute.  It's
read-only, and is a string."

Moose provides the C<has()> function, which declares an attribute. The first
argument, C<'name'> here, is the attribute's name.  The C<< is => 'ro' >> pair
of arguments declares that this attribute is C<r>ead C<o>nly, so you cannot
modify it after you've set it. Finally, the C<< isa => 'Str' >> pair declares
that the value of this attribute can only be a C<str>ing.

X<methods; accessor>
X<OO; accessor methods>

As a result of C<has>, Moose creates an I<accessor> method named C<name()> and
allows you to pass a C<name> parameter to C<Cat>'s constructor:

=begin programlisting

    for my $name (qw( Tuxie Petunia Daisy ))
    {
        my $cat = Cat->new( name => $name );
        say "Created a cat for ", $cat->name();
    }

=end programlisting

=begin sidebar

Moose's documentation uses parentheses to separate attribute names and
characteristics:

=begin programlisting

        has 'name' => ( is => 'ro', isa => 'Str' );

=end programlisting

This is equivalent to:

=begin programlisting

    has( 'name', 'is', 'ro', 'isa', 'Str' );

=end programlisting

Moose's approach works nicely for complex declarations:

=begin programlisting

    has 'name' => (
        is         => 'ro',
        isa        => 'Str',

        # advanced Moose options; perldoc Moose
        init_arg   => undef,
        lazy_build => 1,
    );

=end programlisting

... while this book prefers a low-punctuation approach for simple declarations.
Choose the punctuation which offers you the most clarity.

=end sidebar

X<attributes; untyped>

Moose will complain if you pass something which isn't a string. Attributes do
not I<need> to have types. In that case, anything goes:

=begin programlisting

    package Cat
    {
        use Moose;

        has 'name', is => 'ro', isa => 'Str';
        B<< has 'age',  is => 'ro'; >>
    }

    my $invalid = Cat->new( name => 'bizarre',
                            age  => 'purple' );

=end programlisting

Specifying a type allows Moose to perform some data validations for you.
Sometimes this strictness is invaluable.

X<attributes; C<rw> (read-write)>
X<methods; mutator>
X<OO; mutator methods>

If you mark an attribute as readable I<and> writable (with C<< is => rw >>),
Moose will create a I<mutator> method which can change that attribute's value:

=begin programlisting

    package Cat
    {
        use Moose;

        has 'name', is => 'ro', isa => 'Str';
        has 'age',  is => 'ro', isa => 'Int';
        B<< has 'diet', is => 'rw'; >>
    }

    my $fat = Cat->new( name => 'Fatty',
                        age  => 8,
                        diet => 'Sea Treats' );

    say $fat->name(), ' eats ', $fat->diet();

    B<< $fat->diet( 'Low Sodium Kitty Lo Mein' ); >>
    say $fat->name(), ' now eats ', $fat->diet();

=end programlisting

An C<ro> accessor used as a mutator will throw the exception C<Cannot assign a
value to a read-only accessor at ...>.

Using C<ro> or C<rw> is a matter of design, convenience, and purity. Moose
enforces no particular philosophy in this area. Some people suggest making all
instance data C<ro> such that you must pass instance data into the constructor
(L<immutability>). In the C<Cat> example, C<age()> might still be an accessor,
but the constructor could take the I<year> of the cat's birth and calculate the
age itself based on the current year. This approach consolidates validation
code and ensure that all created objects have valid data.

Instance data begins to demonstrate the value of object orientation. An object
contains related data and can perform behaviors with that data. A class
describes that data and those behaviors.

=head2 Encapsulation

X<encapsulation>
X<OO; encapsulation>

Moose allows you to declare I<which> attributes class instances possess (a cat
has a name) as well as the attributes of those attributes (you cannot change a
cat's name; you can only read it). Moose itself decides how to I<store> those
attributes. You can change that if you like, but allowing Moose to manage your
storage encourages I<encapsulation>: hiding the internal details of an object
from external users of that object.

Consider a change to how C<Cat>s manage their ages. Instead of passing a value
for an age to the constructor, pass in the year of the cat's birth and
calculate the age as needed:

=begin programlisting

    package Cat
    {
        use Moose;

        has 'name',        is => 'ro', isa => 'Str';
        has 'diet',        is => 'rw';
        B<< has 'birth_year',  is => 'ro', isa => 'Int'; >>

        B<sub age>
        B<{>
            B<my $self = shift;>
            B<my $year = (localtime)[5] + 1900;>

            B<< return $year - $self->birth_year(); >>
        B<}>
    }

=end programlisting

While the syntax for I<creating> C<Cat> objects has changed, the syntax for
I<using> C<Cat> objects has not. Outside of C<Cat>, C<age()> behaves as it
always has. I<How> it works internally is a detail to the C<Cat> class.

=begin tip Compatibility and APIs

Retain the old syntax for I<creating> C<Cat> objects by customizing the
generated C<Cat> constructor to allow passing an C<age> parameter. Calculate
C<birth_year> from that. See C<perldoc Moose::Manual::Attributes>.

=end tip

X<attributes; default values>

Calculating ages has another advantage. A I<default attribute value> will do
the right thing when someone creates a new C<Cat> object without passing a
birth year:

=begin programlisting

    package Cat
    {
        use Moose;

        has 'name', is => 'ro', isa => 'Str';
        has 'diet', is => 'rw', isa => 'Str';

        B<< has 'birth_year', >>
            B<< is      => 'ro', >>
            B<< isa     => 'Int', >>
            B<< default => sub { (localtime)[5] + 1900 }; >>
    }

=end programlisting

The C<default> keyword on an attribute takes a function referenceN<You can use
a simple value such as a number or string directly, but use a function
reference for anything more complex.> which returns the default value for that
attribute when constructing a new object. If the code creating an object passes
no constructor value for that attribute, the object gets the default value:

=begin programlisting

    my $kitten = Cat->new( name => 'Choco' );

=end programlisting

... and that kitten will have an age of C<0> until next year.

=head3 Polymorphism

Encapsulation is useful, but the real power of object orientation is much
broader. A well-designed OO program can manage many types of data. When
well-designed classes encapsulate specific details of objects into the
appropriate places, something curious happens: the code often becomes I<less>
specific.

Moving the details of what the program knows about individual C<Cat>s (the
attributes) and what the program knows that C<Cat>s can do (the methods) into
the C<Cat> class means that code that deals with C<Cat> instances can happily
ignore I<how> C<Cat> does what it does.

Consider a function which displays details of an object:

=begin programlisting

    sub show_vital_stats
    {
        my $object = shift;

        say 'My name is ', $object->name();
        say 'I am ',       $object->age();
        say 'I eat ',      $object->diet();
    }

=end programlisting

X<genericity>
X<OO; genericity>

It's obvious (in context) that this function works if you pass it a C<Cat>
object. In fact, it will do the right thing for any object with the appropriate
three accessors, no matter I<how> that object provides those accessors and no
matter I<what kind> of object it is: C<Cat>, C<Caterpillar>, or C<Catbird>. The
function is sufficiently generic that any object which respects this interface
is a valid parameter.

X<polymorphism>
X<OO; polymorphism>

This property of I<polymorphism> means that you can substitute an object of one
class for an object of another class if they provide the same external
interface.

=begin tip Duck Typing

X<duck typing>
X<OO; duck typing>

Some languages and environments require a formal relationship between two
classes before allowing a program to substitute instances for each other.  Perl
5 provides ways to enforce these checks, but it does not require them. Its
default ad-hoc system lets you treat any two instances with methods of the same
name as equivalent enough. Some people call this I<duck typing>, arguing that
any object which can C<quack()> is sufficiently duck-like that you can treat it
as a duck.

=end tip

C<show_vital_stats()> cares that an invocant is valid only in that it supports
three methods, C<name()>, C<age()>, and C<diet()> which take no arguments and
each return something which can concatenate in a string context. You may have a
hundred different classes in your code, none of which have any obvious
relationships, but they will work with this method if they conform to this
expected behavior.

Consider how you might enumerate a zoo's worth of animals without this
polymorphic function. The benefit of genericity should be obvious. As well, any
specific details about how to calculate the age of an ocelot or octopus can
belong in the relevant class--where it matters most.

Of course, the mere existence of a method called C<name()> or C<age()> does not
by itself imply the behavior of that object. A C<Dog> object may have an
C<age()> which is an accessor such that you can discover C<$rodney> is 9 but
C<$lucky> is 4. A C<Cheese> object may have an C<age()> method that lets you
control how long to stow C<$cheddar> to sharpen it. C<age()> may be an accessor
in one class but not in another:

=begin programlisting

    # how old is the cat?
    my $years = $zeppie->age();

    # store the cheese in the warehouse for six months
    $cheese->age();

=end programlisting

Sometimes it's useful to know I<what> an object does and what that I<means>.

=head2 Roles

Z<roles>
X<roles>

A I<role> is a named collection of behavior and stateN<See the Perl 6 design
documents on roles at U<http://feather.perl6.nl/syn/S14.html> and research on
Smalltalk traits at U<http://scg.unibe.ch/research/traits> for copious
details.>. While a class organizes behaviors and state into a template for
objects, a role organizes a named collection of behaviors and state. You can
instantiate a class, but not a role. A role is something a class does.

Given an C<Animal> which has an age and a C<Cheese> which can age, one
difference may be that C<Animal> does the C<LivingBeing> role, while the
C<Cheese> does the C<Storable> role:

=begin programlisting

    package LivingBeing
    {
        use Moose::Role;

        requires qw( name age diet );
    }

=end programlisting

Anything which does this role must supply the C<name()>, C<age()>, and
C<diet()> methods. The C<Cat> class must explicitly mark that it does the role:

=begin programlisting

    package Cat
    {
        use Moose;

        has 'name', is => 'ro', isa => 'Str';
        has 'diet', is => 'rw', isa => 'Str';

        has 'birth_year',
            is      => 'ro',
            isa     => 'Int',
            default => sub { (localtime)[5] + 1900 };

        B<with 'LivingBeing';>

        sub age { ... }
    }

=end programlisting

X<roles; composition>

The C<with> line causes Moose to I<compose> the C<LivingBeing> role into the
C<Cat> class. Composition ensures all of the attributes and methods of the role
part of the class. C<LivingBeing> requires any composing class to provide
methods named C<name()>, C<age()>, and C<diet()>. C<Cat> satisfies these
constraints. If C<LivingBeing> were composed into a class which did not provide
those methods, Moose would throw an exception.

=begin tip Order Matters!

The C<with> keyword used to apply roles to a class must occur I<after>
attribute declaration so that composition can identify any generated accessor
methods.

=end tip

Now all C<Cat> instances will return a true value when queried if they provide
the C<LivingBeing> role. C<Cheese> objects should not:

=begin programlisting

    say 'Alive!' if $fluffy->DOES('LivingBeing');
    say 'Moldy!' if $cheese->DOES('LivingBeing');

=end programlisting

This design technique separates the I<capabilities> of classes and objects from
the I<implementation> of those classes and objects. The birth year calculation
behavior of the C<Cat> class could itself be a role:

=begin programlisting

    package CalculateAge::From::BirthYear
    {
        use Moose::Role;

        has 'birth_year',
            is      => 'ro',
            isa     => 'Int',
            default => sub { (localtime)[5] + 1900 };

        sub age
        {
            my $self = shift;
            my $year = (localtime)[5] + 1900;

            return $year - $self->birth_year();
        }
    }

=end programlisting

Extracting this role from C<Cat> makes the useful behavior available to other
classes. Now C<Cat> can compose both roles:

=begin programlisting

    package Cat
    {
        use Moose;

        has 'name', is => 'ro', isa => 'Str';
        has 'diet', is => 'rw';

        B<with 'LivingBeing',>
             B<'CalculateAge::From::BirthYear';>
    }

=end programlisting

Notice how the C<age()> method of C<CalculateAge::From::BirthYear> satisfies
the requirement of the C<LivingBeing> role. Notice also that any check that
C<Cat> performs C<LivingBeing> returns a true value. Extracting C<age()> into a
role has only changed the details of I<how> C<Cat> calculates an age. It's
still a C<LivingBeing>. C<Cat> can choose to implement its own age or get it
from somewhere else. All that matters is that it provides an C<age()> which
satisfies the C<LivingBeing> constraint.

X<allomorphism>
X<roles; allomorphism>

Just as polymorphism means that you can treat multiple objects with the same
behavior in the same way, this I<allomorphism> means that an object may
implement the same behavior in multiple ways.

Pervasive allomorphism can reduce the size of your classes and increase the
code shared between them. It also allows you to name specific and discrete
collections of behaviors--very useful for testing for capabilities instead of
implementations.

X<OO; mixins>
X<OO; multiple inheritance>
X<OO; monkeypatching>

To compare roles to other design techniques such as mixins, multiple
inheritance, and monkeypatching, see
U<http://www.modernperlbooks.com/mt/2009/04/the-why-of-perl-roles.html>.

=head3 Roles and DOES()

X<C<DOES()>>
X<Moose; C<DOES()>>

When you compose a role into a class, the class and its instances will return a
true value when you call C<DOES()> on them:

=begin programlisting

    say 'This Cat is alive!'
        if $kitten->DOES( 'LivingBeing' );

=end programlisting

=head2 Inheritance

Z<inheritance>

X<inheritance>
X<OO; inheritance>
X<Moose; inheritance>

Perl 5's object system supports I<inheritance>, which establishes a
relationship between two classes such that one specializes the other. The child
class behaves the same way as its parent--it has the same number and types of
attributes and can use the same methods. It may have additional data and
behavior, but you may substitute any instance of a child where code expects its
parent. In one sense, a subclass provides the role implied by the existence of
its parent class.

=begin tip Roles versus Inheritance

Should you use roles or inheritance? Roles provide composition-time safety,
better type checking, better factoring of code, and finer-grained control over
names and behaviors, but inheritance is more familiar to experienced developers
of other languages. Use inheritance when one class truly I<extends> another.
Use a role when a class needs additional behavior, and when you can give that
behavior a meaningful name.

=end tip

Consider a C<LightSource> class which provides two public attributes
(C<enabled> and C<candle_power>) and two methods (C<light> and C<extinguish>):

=begin programlisting

    package LightSource
    {
        use Moose;

        has 'candle_power', is      => 'ro',
                            isa     => 'Int',
                            default => 1;

        has 'enabled', is      => 'ro',
                       isa     => 'Bool',
                       default => 0,
                       writer  => '_set_enabled';

        sub light
        {
            my $self = shift;
            $self->_set_enabled(1);
        }

        sub extinguish
        {
            my $self = shift;
            $self->_set_enabled(0);
        }
    }

=end programlisting

(Note that C<enabled>'s C<writer> option creates a private accessor usable
within the class to set the value.)

=head3 Inheritance and Attributes

A subclass of C<LightSource> could define a super candle which provides a
hundred times the amount of light:

=begin programlisting

    package SuperCandle
    {
        use Moose;

        B<extends 'LightSource'>;

        has 'B<+>candle_power', default => 100;
    }

=end programlisting

X<Moose; C<extends>>

C<extends> takes a list of class names to use as parents of the current class.
If that were the only line in this class, C<SuperCandle> objects would behave
the same as C<LightSource> objects. It would have both the C<candle_power> and
C<enabled> attributes as well as the C<light()> and C<extinguish()> methods.

The C<+> at the start of an attribute name (such as C<candle_power>) indicates
that the current class does something special with that attribute. Here the
super candle overrides the default value of the light source, so any new
C<SuperCandle> created has a light value of 100 candles.

When you invoke C<light()> or C<extinguish()> on a C<SuperCandle> object, Perl
will look in the C<SuperCandle> class for the method, then in each parent.  In
this case, those methods are in the C<LightSource> class.

X<Moose; attribute inheritance>

Attribute inheritance works similarly (see C<perldoc Class::MOP>).

=head3 Method Dispatch Order

X<methods; resolution>
X<method resolution order>
X<methods; dispatch order>
X<multiple inheritance>
X<objects; inheritance>
X<objects; multiple inheritance>
X<MRO>

I<Method dispatch order> (or I<method resolution order> or I<MRO>) is obvious
for single-parent classes. Look in the object's class, then its parent, and so
on until you find the method or run out of parents. Classes which inherit from
multiple parents (I<multiple inheritance>)--C<Hovercraft> extends both C<Boat>
and C<Car>--require trickier dispatch. Reasoning about multiple inheritance is
complex. Avoid multiple inheritance when possible.

Perl 5 uses a depth-first method resolution strategy. It searches the class of
the I<first> named parent and all of that parent's parents recursively before
searching the classes of subsequent parents. The C<mro> pragma (L<pragmas>)
provides alternate strategies, including the C3 MRO strategy which searches a
given class's immediate parents before searching any of their parents.

See C<perldoc mro> for more details.

=head3 Inheritance and Methods

X<Moose; overriding methods>
X<Moose; C<override>>

As with attributes, subclasses may override methods. Imagine a light that you
cannot extinguish:

=begin programlisting

    package Glowstick
    {
        use Moose;

        extends 'LightSource';

        sub extinguish {}
    }

=end programlisting

Calling C<extinguish()> on a glowstick does nothing, even though
C<LightSource>'s method does something. Method dispatch will find the
subclass's method. You may not have meant to do this. When you do, use Moose's
C<override> to express your intention clearly.

Within an overridden method, Moose's C<super()> allows you to call the
overridden method:

=begin programlisting

    package LightSource::Cranky
    {
        use Carp 'carp';
        use Moose;

        extends 'LightSource';

        B<override> light => sub
        {
            my $self = shift;

            carp "Can't light a lit light source!"
                if $self->enabled;

            B<super()>;
        };

        B<override> extinguish => sub
        {
            my $self = shift;

            carp "Can't extinguish unlit light source!"
                unless $self->enabled;

            B<super()>;
        };
    }

=end programlisting

This subclass adds a warning when trying to light or extinguish a light source
that already has the current state. The C<super()> function dispatches to the
nearest parent's implementation of the current method, per the normal Perl 5
method resolution order.

=begin tip Powered by Moose

Moose's method modifiers can do similar things--and more. See C<perldoc
Moose::Manual::MethodModifiers>.

=end tip

=head3 Inheritance and isa()

X<C<isa()>>
X<Moose; C<isa()>>

Perl's C<isa()> method returns true if its invocant is or extends a named
class. That invocant may be the name of a class or an instance of an object:

=begin programlisting

    say 'Looks like a LightSource'
        if $sconce->isa( 'LightSource' );

    say 'Hominidae do not glow'
        unless $chimpy->isa( 'LightSource' );

=end programlisting

=head2 Moose and Perl 5 OO

X<Moose; compared to default Perl 5 OO>

Moose provides many features beyond Perl 5's default OO.  While you I<can>
build everything you get with Moose yourself (L<blessed_references>), or cobble
it together with a series of CPAN distributions, Moose is worth using. It is a
coherent whole, with good documentation. Many important projects use it
successfully. Its development community is mature and attentive.

X<metaprogramming>
X<Moose; MOP>
X<Moose; metaprogramming>
X<C<Class::MOP>>
X<C<Class::MOP::Class>>

Moose takes care of constructors, destructors, accessors, and encapsulation.
You must do the work of declaring what you want, but what you get back is safe
and easy to use. Moose objects can extend and work with objects from the
vanilla Perl 5 system.

Moose also allows I<metaprogramming>--manipulating your objects through Moose
itself. If you've ever wondered which methods are available on a class or an
object or which attributes an object supports, this information is available:

=begin programlisting

    my $metaclass = Monkey::Pants->meta();

    say 'Monkey::Pants instances have the attributes:';

    say $_->name for $metaclass->get_all_attributes;

    say 'Monkey::Pants instances support the methods:';

    say $_->fully_qualified_name
        for $metaclass->get_all_methods;

=end programlisting

You can even see which classes extend a given class:

=begin programlisting

    my $metaclass = Monkey->meta();

    say 'Monkey is the superclass of:';

    say $_ for $metaclass->subclasses;

=end programlisting

See C<perldoc Class::MOP::Class> for more information about metaclass
operations and C<perldoc Class::MOP> for Moose metaprogramming information.

Moose and its I<meta-object protocol> (or MOP) offers the possibility of a
better syntax for declaring and working with classes and objects in Perl 5.
This is valid Perl 5 code:

=begin programlisting

    use MooseX::Declare;

    B<role> LivingBeing { requires qw( name age diet ) }

    B<role> CalculateAge::From::BirthYear
    {
        has 'birth_year',
            is      => 'ro',
            isa     => 'Int',
            default => sub { (localtime)[5] + 1900 };

        B<method> age
        {
            return (localtime)[5] + 1900
                                  - $self->birth_year();
        }
    }

    B<class Cat with LivingBeing>
              B<with CalculateAge::From::BirthYear>
    {
        has 'name', is => 'ro', isa => 'Str';
        has 'diet', is => 'rw';
    }

=end programlisting

X<CPAN; C<MooseX::Declare>>
X<CPAN; C<Devel::Declare>>

The C<MooseX::Declare> CPAN distribution uses C<Devel::Declare> to add new
Moose-specific syntax. The C<class>, C<role>, and C<method> keywords reduce the
amount of boilerplate necessary to write good object oriented code in Perl 5.
Note specifically the declarative nature of this example, as well as the lack
of C<my $self = shift;> in C<age()>.

While Moose is not a part of the Perl 5 core, its popularity ensures that it's
available on many OS distributions. Perl 5 distributions such as Strawberry
Perl and ActivePerl also include it. Even though Moose is a CPAN module and not
a core library, its cleanliness and simplicity make it essential to modern Perl
programming.

=begin tip The Svelte I<Alces>

X<CPAN; C<Any::Moose>>

Moose isn't a small library, but it's powerful. The C<Any::Moose> CPAN module
helps reduce the cost of features you don't use.

=end tip
