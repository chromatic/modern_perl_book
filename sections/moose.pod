=head1 Moose

Z<moose>
X<moose>

Moose is a more complete object system for Perl 5.  It builds on the existing
Perl 5 system, and provides simpler defaults, better integration, and advanced
features from several other languages, including Smalltalk, Common Lisp, and
Perl 6.  It's still worth learning the default Perl 5 object system, if only to
write very simple programs where Moose is inappropriate or to maintain legacy
code, but Moose is currently the best way to write object-oriented code in
modern Perl 5.

X<object orientation>
X<object oriented programming>
X<OO>
X<OOP>
X<objects>
X<classes>

I<Object orientation>, or I<object oriented programming>, is a way of managing
programs by categorizing their components into discrete, unique entities.
These are I<objects>.  In Moose terms, each object is an instance of a
I<class>, which serves as a template to describe any data the object contains
as well as its specific behaviors.

=head2 Classes

X<classes>
X<package>

A class in Perl 5 stores class data.  It may have a name.  By default, Perl 5
classes use packages to provide namespaces:

=begin programlisting

    {
        package Cat;

        use Moose;
    }

=end programlisting

X<instance>
X<OO; instances>

This C<Cat> class appears to do nothing, but Moose does a lot of work to define
the class and register it with Perl.  With that done, you can create objects
(or I<instances>) of the C<Cat> class:

=begin programlisting

    my $brad = Cat->new();
    my $jack = Cat->new();

=end programlisting

The arrow syntax should look familiar.  Just as an arrow dereferences a
reference, an arrow calls a method on an object or class.

=head2 Methods

X<method>
X<invocant>

A I<method> is a function associated with a class.  It resembles a
fully-qualified function call in a superficial sense, but it differs in two
important ways.  First, a method call always has an I<invocant> on which to
perform the method.  In the case of creating the two C<Cat> objects, the name
of the class (C<Cat>) is the invocant:

=begin programlisting

    my $fuzzy = B<Cat>->new();

=end programlisting

X<dispatch>
X<method dispatch>

Second, a method call always involves a I<dispatch> strategy.  The dispatch
strategy describes how the object system decides I<which> method to call.  This
may seem obvious when there's only a C<Cat>, but method dispatch is fundamental
to the design of object systems.

The invocant of a method in Perl 5 is its first argument.  For example, the
C<Cat> class could have a C<meow()> method:

=begin programlisting

    {
        package Cat;

        use Moose;

        B<sub meow>
        B<{>
            B<my $self = shift;>
            B<say 'Meow!';>
        B<}>
    }

=end programlisting

Now all C<Cat> instances can wake you up in the morning because they haven't
eaten yet:

=begin programlisting

    my $alarm = Cat->new();
    $alarm->meow();
    $alarm->meow();
    $alarm->meow();

=end programlisting

X<class method>
X<methods; class>

By convention, invocants in Perl methods are lexical variables named C<$self>,
but this is merely pervasive convention.  The example implementation of
C<meow()> does not use the invocant, so it's irrelevant once method dispatch
has completed.  In that sense, C<meow()> is like C<new()>; you can safely use
the name of the class (C<Cat>) as its invocant.  This is a I<class method>:

=begin programlisting

    Cat->meow() for 1 .. 3;

=end programlisting

=head2 Attributes

X<attributes (objects)>
X<objects; attributes>
X<instance data>
X<state>
X<objects; state>

Every object in Perl 5 is unique.  Objects can contain I<attributes>, or
private data associated with each object.  You may also hear this described as
I<instance data> or I<state>.

X<attributes; typed>
X<attributes; ro>
X<attributes; read only>

To define object attributes, describe them as part of the class:

=begin programlisting

    {
        package Cat;

        use Moose;

        B<< has 'name', is => 'ro', isa => 'Str'; >>
    }

=end programlisting

In English, that line of code means "C<Cat> objects have a C<name> attribute.
It's readable but not writable, and it's a string."  That single line of code
creates an accessor method (C<name()>) and allows you to pass a C<name>
parameter to the constructor:

=begin programlisting

    use Cat;

    for my $name (qw( Tuxie Petunia Daisy ))
    {
        my $cat = Cat->new( name => $name );
        say "Created a cat for ", $cat->name();
    }

=end programlisting

X<attributes; untyped>

Attributes do not I<need> to have types, in which case Moose will skip all of
the verification and validation for you:

=begin programlisting

    {
        package Cat;

        use Moose;

        has 'name', is => 'ro', isa => 'Str';
        B<< has 'age',  is => 'ro'; >>
    }

    my $invalid = Cat->new( name => 'bizarre', age => 'purple' );

=end programlisting

This can be more flexible, but it can also lead to strange errors if someone
tries to provide invalid data for an attribute.  The balance between
flexibility and correctness depends on your local coding standards and the type
of errors you want to catch.

=begin sidebar

The Moose documentation uses parentheses to separate an attribute name from its
characteristics:

=begin programlisting

        has 'name' => ( is => 'ro', isa => 'Str' );

=end programlisting

Perl parses both that form and the form used in this book the same way.  You
I<could> achieve the same effect by writing either:

=begin programlisting

    has( 'name', 'is', 'ro', 'isa', 'Str' );
    has( qw( name is ro isa Str ) );

=end programlisting

... but in this case, extra punctuation adds clarity.  The approach of the
Moose documentation is most useful when dealing with multiple characteristics:

=begin programlisting

    has 'name' => (
        is         => 'ro',
        isa        => 'Str',

        # advanced Moose options; perldoc Moose
        init_arg   => undef,
        lazy_build => 1,
    );

=end programlisting

... but for the sake of simplicity of introduction, this book prefers to use
less punctuation.  Perl gives you the flexibility to choose whichever approach
makes the intent of your code most clear.

=end sidebar

X<attributes; rw>
X<attributes; read-write>

X<mutator>
X<methods; mutator>

If you mark an attribute as readable I<and> writable (with C<< is => rw >>),
Moose will create a I<mutator> method--a method you can use to change the value
of an attribute:

=begin programlisting

    {
        package Cat;

        use Moose;

        has 'name', is => 'ro', isa => 'Str';
        has 'age',  is => 'ro', isa => 'Int';
        B<< has 'diet', is => 'rw'; >>
    }

    my $fat = Cat->new( name => 'Fatty', age => 8, diet => 'Sea Treats' );
    say $fat->name(), ' eats ', $fat->diet();

    B<< $fat->diet( 'Low Sodium Kitty Lo Mein' ); >>
    say $fat->name(), ' now eats ', $fat->diet();

=end programlisting

Trying to use a C<ro> accessor as a mutator will throw an exception:

=begin screen

Cannot assign a value to a read-only accessor at ....

=end screen

=begin sidebar

When should you use C<ro> and when C<rw>?  It's a matter of design,
convenience, and purity.  One school of thought (L<immutability>) suggests
making all instance data C<ro> and passing all relevant data into the
constructor.  In the C<Cat> example, C<age()> might still be an accessor, but
the constructor could take the I<year> of the cat's birth and calculate the age
itself based on the current year, rather than relying on someone to update the
age of all cats manually.

This approach helps to consolidate all validation code and helps to ensure that
all created objects have valid data.  These are design goals worth considering,
though Moose does not enforce any particular philosophy in this area.

=end sidebar

Now that individual objects can have their own instance data, the value of
object orientation may be more obvious.  An object is a bookmark for the data
it contains as well as the behavior appropriate to that data.  An object is a
collection of named data and behaviors.  A class is the description of the data
and behaviors that instances of that class possess.

=head2 Encapsulation

X<encapsulation>

Moose allows you to declare I<which> attributes class instances possess as well
as how to treat those attributes.  The examples shown so far do not describe
I<how> to store those attributes.  This information is available if you really
need it, but the declarative approach can actually improve your programs.  In
this way, Moose encourages I<encapsulation>, or hiding the internal details of
an object from external uses of that object.

Consider a change to the age of a C<Cat>; instead of requesting that directly
from the constructor, calculate the age of a C<Cat> based on the year of its
birth:

=begin programlisting

    package Cat;

    use Moose;

    has 'name',        is => 'ro', isa => 'Str';
    has 'diet',        is => 'rw';
    B<< has 'birth_year',  is => 'ro', isa => 'Int'; >>

    B<sub age>
    B<{>
        B<my $self = shift;>
        B<my $year = (localtime)[5] + 1900;>

        B<< return $year - $self->birth_year(); >>
    B<}>

=end programlisting

While the syntax for I<creating> C<Cat> objects has changed, the syntax for
I<using> C<Cat> objects has not.  The C<age()> method does the same thing it
has always done, at least as far as all code outside of the C<Cat> class
understands.  I<How> it does that has changed, but that is a detail internal to
the C<Cat> class--encapsulated within that class itself.

=begin sidebar

The old syntax for I<creating> C<Cat> objects could remain in place; customize
the generated C<Cat> constructor to allow passing an C<age> parameter and
calculate C<birth_year> appropriately from that.  See C<perldoc
Moose::Manual::Attributes>.

=end sidebar

X<attributes; default values>

This new approach to calculating C<Cat> ages has another advantage; you can use
I<default attribute values> to reduce the code necessary to create a C<Cat>
object:

=begin programlisting

    package Cat;

    use Moose;

    has 'name',        is => 'ro', isa => 'Str';
    has 'diet',        is => 'rw', isa => 'Str';
    B<< has 'birth_year',  is => 'ro', isa => 'Int', >>
                       B<< default => sub { (localtime)[5] + 1900 }; >>

=end programlisting

The C<default> keyword on an attribute takes a function reference which returns
the default value for that attribute when constructing a new object.  If the
constructor does not receive an appropriate value for that attribute, the
object gets that default value instead.  Now you can create a kitten:

=begin programlisting

    my $kitten = Cat->new( name => 'Bitey' );

=end programlisting

... and that kitten will have an age of C<0> until next year.

=begin sidebar

You can also use a simple value, such as a number or string, as a default
value.  Use a function reference when you need to calculate something unique
for each object, including a hash or array reference.

=end sidebar

=head3 Polymorphism

A program which deals with one type of data and one type of behavior on that
data benefits little from the use of objects.  A well-designed object-oriented
program should be capable of managing many types of data.  When well designed
classes encapsulate specific details of objects into the appropriate places,
something curious happens to the rest of the program: it has the opportunity to
become I<less> specific.

In other words, moving the specifics of the details of what the program knows
about individual C<Cat>s (the attributes) and what the program knows that
C<Cat>s can do (the methods) into the C<Cat> class means that code that deals
with C<Cat> instances can happily ignore I<how> C<Cat> does what it does.

This is clearer with an example.  Consider a function which describes an
object:

=begin programlisting

    sub show_vital_stats
    {
        my $object = shift;

        say 'My name is ', $object->name();
        say 'I am ',       $object->age();
        say 'I eat ',      $object->diet();
    }

=end programlisting

X<polymorphism>

It's obvious (in context) that you can pass a C<Cat> object to this function
and get sane results.  It's less obvious that you can pass other types of
objects and get sane results.  This is an important object orientation property
called I<polymorphism>, where you can substitute an object of one class for an
object of another class if they provide the same external interface in the same
way.

X<genericity>

Any object of any class which provides the C<name()>, C<age()>, and C<diet()>
accessors will work with this function.  The function is sufficiently generic
that any object which respects this interface is a valid parameter.

=begin sidebar

X<duck typing>

Some languages and environments require a formal relationship between two
classes before allowing a program to substitute instances of one class for
another.  Perl 5 provides ways to enforce these checks, but it does not require
them.  Its default ad-hoc system lets you treat any two instances with methods
of the same name as equivalent enough.  Some people call this I<duck typing>,
in the theory that any object which can C<quack()> is sufficiently duck-like
that you can treat it as a duck.

=end sidebar

The benefit of the genericity in C<show_vital_stats()> is that neither the
specific I<type> nor the implementation of the object provided matters.  Any
invocant is valid if it supports three methods, C<name()>, C<age()>, and
C<diet()> which take no arguments and each return something which can
concatenate in a string context.  You may have a hundred different classes in
your code, none of which have any obvious relationship between each other, but
if they conform to this expectation of behavior, they will work with this
method.

This is an improvement over writing specific functions to extract and display
this information for even a fraction of those hundred classes.  This genericity
requires less code, and using a well-defined interface as the mechanism to
access this information means that any of those hundred classes can calculate
that information in any way possible.  The details of those calculations is
where it matters most: in the bodies of the methods in the classes themselves.

Of course, the mere existence of a method called C<name()> or C<age()> does not
by itself imply the behavior of that object.  A C<Dog> object may have an
C<age()> which is an accessor such that you can discover C<$rodney> is 8 but
C<$lucky> is 3.  A C<Cheese> object may have an C<age()> method that lets you
control how long to stow C<$cheddar> so that it becomes sharp; in other words,
C<age()> may be an accessor in one class but not in another:

=begin programlisting

    # how old is the cat?
    my $years = $zeppie->age();

    # store the cheese in the warehouse for six months
    $cheese->age();

=end programlisting

Sometimes it's useful to know I<what> an object does.  In other words, you need to understand its type.

=head2 Roles

Z<roles>

A I<role> is a named collection of behavior and state.  A class is like a role,
with the vital difference that you can instantiate a class, but not a role.
While a class is primarily a mechanism for organizing behaviors and state into
a template for objects, a role is primarily a mechanism for organizing
behaviors and state into a named collection.

In short, a role is something a class does.

The difference between some sort of C<Animal>--with a C<name()>, an C<age()>,
and a preferred C<diet()>--and C<Cheese>--which can C<age()> in storage--may be
that the C<Animal> performs a C<LivingBeing> role, while the C<Cheese> performs
a C<Storable> role.

While you I<could> check that every object passed into C<show_vital_stats()> is
an instance of C<Animal>, you lose some genericity that way.  Instead, check
that the object I<performs> the C<LivingBeing> role:

=begin programlisting

    {
        package LivingBeing;

        use Moose::Role;

        requires qw( name age diet );
    }

=end programlisting

Anything which performs this role must supply the C<name()>, C<age()>, and
C<diet()> methods.  This does not happen automatically; the C<Cat> class must
explicitly mark that it performs the role:

=begin programlisting

    package Cat;

    use Moose;

    has 'name',        is => 'ro', isa => 'Str';
    has 'diet',        is => 'rw', isa => 'Str';
    has 'birth_year',  is => 'ro', isa => 'Int',
                       default => (localtime)[5] + 1900;

    B<with 'LivingBeing';>

    sub age { ... }

=end programlisting

X<roles; composition>

That single line has two functions.  First, it tells Moose that the class
performs the named role.  Second, it composes the role into the class.  This
process checks that the class I<somehow> provides all of the required methods
and all of the required attributes without potential collisions.

The C<Cat> class provides C<name()> and C<diet()> methods as accessors to named
attributes.  It also declares its own C<age()> method.

=begin sidebar

The C<with> keyword used to apply roles to a class must occur I<after>
attribute declaration so that composition can identify any generated accessor
methods.

=end sidebar

Now all C<Cat> instances will return true when queried if they provide the
C<LivingBeing> role and C<Cheese> objects should not:

=begin programlisting

    say 'Alive!' if $fluffy->does('LivingBeing');
    say 'Moldy!' if $cheese->does('LivingBeing');

=end programlisting

This design approach may seem like extra bookkeeping, but it separates the
I<capabilities> of classes and objects from the I<implementation> of those
classes and objects.  The special behavior of the C<Cat> class, where it stores
the birth year of the animal and calculates the age directly, could itself be a
role:

=begin programlisting

    {
        package CalculateAgeFromBirthYear;

        use Moose::Role;

        has 'birth_year', is => 'ro', isa => 'Int',
                          default => sub { (localtime)[5] + 1900 };

        sub age
        {
            my $self = shift;
            my $year = (localtime)[5] + 1900;

            return $year - $self->birth_year();
        }
    }

=end programlisting

Moving this code out of the C<Cat> class into a separate role makes it
available to other classes.  Now C<Cat> can perform both roles:

=begin programlisting

    package Cat;

    use Moose;

    has 'name', is => 'ro', isa => 'Str';
    has 'diet', is => 'rw';

    B<with 'LivingBeing', 'CalculateAgeFromBirthYear';>

=end programlisting

X<allomorphism>
X<roles; allomorphism>

The implementation of the C<age()> method supplied by the
C<CalculateAgeFromBirthYear> satisfies the requirement of the C<LivingBeing>
role, and the composition succeeds.  Checking that objects perform the
C<LivingBeing> role remains unchanged, regardless of I<how> objects perform
this role.  A class could choose to provide its own C<age()> method or obtain
it from another role; that doesn't matter.  All that matters is that it
contains one.  This is I<allomorphism>.

=head3 Roles and DOES()

X<DOES()>
X<Moose; DOES()>

Applying a role to a class means that the class and its instances will return
true when you call the C<DOES()> method on them:

=begin programlisting

    say 'This Cat is alive!' if $kitten->DOES( 'LivingBeing' );

=end programlisting

=head2 Inheritance

Z<inheritance>

X<inheritance>
X<Moose; inheritance>

Another feature of Perl 5's object system is I<inheritance>, where one class
specializes another.  This establishes a relationship between the two classes,
where the child inherits attributes and behavior of the parent.  As with two
classes which provide the same role, you may substitute a child class for its
parent.  In one sense, a subclass provides the role implied by the existence of
its parent class.

=begin sidebar

Recent experiments in role-based systems in Perl 5 demonstrate that you can
replace almost every use of inheritance in a system with roles.  The decision
to use either one is largely a matter of familiarity.  Roles provide
composition-time safety, better type checking, better-factored and less coupled
code, and finer-grained control over names and behaviors, but inheritance is
more familiar to users of other languages.  The design question is whether one
class truly I<extends> another or whether it provides additional (or, at least,
I<different>) behavior.

=end sidebar

Consider a C<LightSource> class which provides two public attributes
(C<candle_power> and C<enabled>) and two methods (C<light> and C<extinguish>):

=begin programlisting

    {
        package LightSource;

        use Moose;

        has 'candle_power', is      => 'ro', isa     => 'Int',
                            default => 1;
        has 'enabled',      is      => 'ro', isa     => 'Bool',
                            default => 0,    _writer => '_set_enabled';

        sub light
        {
            my $self = shift;
            $self->_set_enabled(1);
        }

        sub extinguish
        {
            my $self = shift;
            $self->_set_enabled(0);
        }
    }

=end programlisting

=begin sidebar

The C<_writer> option to the C<enabled> attribute creates a private accessor
usable within the class to set the value.

=end sidebar

=head3 Inheritance and Attributes

Subclassing C<LightSource> makes it possible to define a super candle which
behaves the same way as C<LightSource> but provides a hundred times the amount
of light:

=begin programlisting

    {
        package LightSource::SuperCandle;

        use Moose;

        B<extends 'LightSource'>;

        has 'B<+>candle_power', default => 100;
    }

=end programlisting

X<Moose; extends>

The C<extends> syntax takes a list of class names to use as parents of the
current class.  The C<+> at the start of the C<candle_power> attribute name
indicates that the current class extends the declaration of the attribute.  In
this case, the super candle overrides the default value of the light source, so
any new C<SuperCandle> created has a light value of 100 candles.  The other
attribute and both methods are available on C<SuperCandle> instances; when you
invoke C<light> or C<extinguish> on such an instance, Perl will look in
C<LightSource::SuperCandle> for the method, then in the list of parents of the
class. Ultimately it finds them in C<LightSource>.

X<Moose; attribute inheritance>

Attribute inheritance works in a similar fashion, except that the act of
I<constructing> the instance makes all of the appropriate attributes available
in the proper fashion (see C<perldoc Class::MOP>).

X<methods; resolution>
X<method resolution order>
X<methods; dispatch order>
X<multiple inheritance>
X<objects; inheritance>
X<objects; multiple inheritance>

Method dispatch order is easy to understand in the case of single-parent
inheritance.  When a class has multiple parents (I<multiple inheritance>),
dispatch is less obvious.  By default, Perl 5 provides a depth-first strategy
of method resolution.  It searches the class of the I<first> named parent and
all of its parents recursively before searching the classes of the subsequent
named parents.  This behavior is often confusing; avoid using multiple
inheritance until you understand it and have exhausted all other alternatives.
See C<perldoc mro> for more details about method resolution and dispatch
strategies.

=head3 Inheritance and Methods

X<Moose; override method>

You may override methods in subclasses.  Imagine a light that you cannot
extinguish:

=begin programlisting

    {
        package LightSource::Glowstick;

        use Moose;

        extends 'LightSource';

        sub extinguish {};
    }

=end programlisting

All calls to the C<extinguish> method for objects of this class will do
nothing.  Perl's method dispatch system will find this method and will not look
for any methods of this name in any of the parent classes.

Sometimes an overridden method needs behavior from its parent as well.  The
C<override> command tells Moose that the subclass deliberately overrides the
named method.  The C<super()> function is available to dispatch from the
overriding method to the overridden method:

=begin programlisting

    {
        package LightSource::Cranky;

        use Carp;
        use Moose;

        extends 'LightSource';

        B<override> light => sub
        {
            my $self = shift;

            Carp::carp( "Can't light a lit light source!" )
                if $self->enabled;

            B<super()>;
        };

        B<override> extinguish => sub
        {
            my $self = shift;

            Carp::carp( "Can't extinguish an unlit light source!" )
                unless $self->enabled;

            B<super()>;
        };
    }

=end programlisting

This subclass adds a warning when trying to light or extinguish a light source
that already has the current state.  The C<super()> function dispatches to the
nearest parent's implementation of the current method, per the normal Perl 5
method resolution order.

=begin sidebar

You can achieve the same behavior by using Moose method modifiers.  See
C<perldoc Moose::Manual::MethodModifiers>.

=end sidebar

=head3 Inheritance and isa()

X<isa()>
X<Moose; isa()>

Inheriting from a parent class means that the child class and all of its
instances will return true when you call the C<isa()> method on them:

=begin programlisting

    say 'Looks like a LightSource' if     $sconce->isa( 'LightSource' );
    say 'Monkeys do not glow'      unless $chimpy->isa( 'LightSource' );

=end programlisting

=head2 Moose and Perl 5 OO

X<moose; versus Perl 5 OO>

Moose provides many features you'd otherwise have to build for yourself with
the default object orientation of Perl 5.  While you I<can> build everything
you get with Moose yourself (see L<blessed_references>), or cobble it together
with a series of CPAN distributions, Moose is a coherent package which just
works, includes good documentation, is part of many successful projects, and is
under active development by an attentive and talented community.

X<metaprogramming>
X<Moose; MOP>
X<Moose; metaprogramming>
X<Class::MOP>
X<Class::MOP::Class>

By default, with Moose objects you do not have to worry about constructors and
destructors, accessors, and encapsulation.  Moose objects can extend and
work with objects from the vanilla Perl 5 system.  You also get
I<metaprogramming>--a way of accessing the implementation of the system through
the system itself--and the concomitant extensibility.  If you've ever wondered
which methods are available on a class or an object or which attributes an
object supports, this metaprogramming information is available with Moose:

=begin programlisting

    my $metaclass = Monkey::Pants->meta();

    say 'Monkey::Pants instances have the attributes:';

    say $_->name for $metaclass->get_all_attributes;

    say 'Monkey::Pants instances support the methods:';

    say $_->fully_qualified_name for $metaclass->get_all_methods;

=end programlisting

You can even see which classes extend a given class:

=begin programlisting

    my $metaclass = Monkey->meta();

    say 'Monkey is the superclass of:';

    say $_ for $metaclass->subclasses;

=end programlisting

See C<perldoc Class::MOP::Class> for more information about metaclass
operations and C<perldoc Class::MOP> for Moose metaprogramming information.

X<metaprogramming; MOP>
X<MOP>

Moose and its I<meta-object protocol> (or MOP) offers the possibility of a
better syntax for declaring and working with classes and objects in Perl 5.
This is valid Perl 5 code:

=begin programlisting

    use MooseX::Declare;

    B<role> LivingBeing { requires qw( name age diet ) }

    B<role> CalculateAgeFromBirthYear
    {
        has 'birth_year', is => 'ro', isa => 'Int',
                          default => sub { (localtime)[5] + 1900 };

        B<method> age
        {
            return (localtime)[5] + 1900 - $self->birth_year();
        }
    }

    B<class Cat with LivingBeing with CalculateAgeFromBirthYear>
    {
        has 'name', is => 'ro', isa => 'Str';
        has 'diet', is => 'rw';
    }

=end programlisting

X<MooseX::Declare>
X<Devel::Declare>

The C<MooseX::Declare> extension from the CPAN uses a clever module called
C<Devel::Declare> to add new syntax to Perl 5, specifically for Moose.  The
C<class>, C<role>, and C<method> keywords reduce the amount of boilerplate
necessary to write good OO code in Perl 5.  Note specifically the declarative
nature of this example, as well as the now unnecessary C<my $self = shift;>
line at the start of the C<age> method.

=begin sidebar

The Perl 5 core provides support for C<Devel::Declare> as of Perl 5.12, but the
module is not a core module.

=end sidebar

One drawback of this approach is that you must be able to install CPAN modules
(or a custom Perl 5 distribution such as Strawberry Perl or Strawberry Perl
Professional which may include them for you), but in comparison to Perl 5's
built-in object orientation, the advantage in cleanliness and simplicity of
Moose should be obvious.

See C<perldoc Moose::Manual> for more information on using Moose.
