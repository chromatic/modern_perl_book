=head2 References

Z<references>

Perl usually does what you expect, even if what you expect is subtle.  Consider
what happens when you pass values to functions:

=begin programlisting

    sub reverse_greeting
    {
        my $name = reverse shift;
        return "Hello, $name!";
    }

    my $name = 'Chuck';
    say reverse_greeting( $name );
    say $name;

=end programlisting

You probably expect that, outside of the function, C<$name> contains C<Chuck>,
even though the value passed into the function gets reversed into C<kcuhC>--and
that's what happens.  The C<$name> outside the function is a separate scalar
from the C<$name> inside the function, and each one has a distinct copy of the
string.  Modifying one has no effect on the other.

This is useful and desirable default behavior.  If you had to make explicit
copies of every value before you did anything to them which could possibly
cause changes, you'd write lots of extra, unnecessary code to defend against
well-meaning but incorrect modifications.

Other times it's useful to modify a value in place sometimes as well.  If you
have a hash full of data that you want to pass to a function to update or to
delete a key/value pair, creating and returning a new hash for each change
could be troublesome (to say nothing of inefficient).

X<references>

Perl 5 provides a mechanism by which you can refer to a value without making a
copy of that value.  Any changes made to that I<reference> will update the
value in place, such that I<all> references to that value will see the new
value.  A reference is a first-class scalar data type in Perl 5.  It's not a
string, an array, or a hash.  It's a scalar which refers to another first-class
data type.

=head3 Scalar References

Z<scalar_references>

X<operators; C<\>>
X<references; C<\> operator>

X<references; scalar>
X<scalars; references>

The reference operator is the backslash (C<\>).  In scalar context, it creates
a single reference which refers to another value.  In list context, it creates
a list of references.  Thus you can take a reference to C<$name> from the
previous example:

=begin programlisting

    my $name     = 'Larry';
    my $name_ref = B<\>$name;

=end programlisting

X<dereferencing>
X<references; dereferencing>

To access the value to which a reference refers, you must I<dereference> it.
Dereferencing requires you to add an extra sigil for each level of
dereferencing:

=begin programlisting

    sub reverse_in_place
    {
        my $name_ref = shift;
        B<$$name_ref>   = reverse B<$$name_ref>;
    }

    my $name = 'Blabby';
    reverse_in_place( B<\>$name );
    say $name;

=end programlisting

The double scalar sigil dereferences a scalar reference.

=begin sidebar

This example isn't useful in the obvious case; why not have the function return
the modified value directly?  Scalar references are useful when processing
I<large> scalars; copying the contents of those scalars can use a lot of time
and memory.

=end sidebar

Complex references may require a curly-brace block to disambiguate portions of
the expression.  This is optional for simple dereferences, though it can be
messy:

=begin programlisting

    sub reverse_in_place
    {
        my $name_ref   = shift;
        B<${ $name_ref }> = reverse B<${ $name_ref }>;
    }

=end programlisting

If you forget to dereference a scalar reference, it will stringify or numify.
The string value will be of the form C<SCALAR(0x93339e8)>, and the numeric
value will be the C<0x93339e8> portion.  This value encodes the type of
reference (in this case, C<SCALAR>) and the location in memory of the
reference.

=begin sidebar

Perl does not offer native access to memory locations.  The address of the
reference is a value used as a mostly-unique identifier, as a reference does
not necessarily have a name.  Unlike pointers in a language such as C, you
cannot modify the address or treat it as an address into memory.

These addresses are only I<mostly> unique because Perl may reuse storage
locations if its garbage collector has reclaimed an unreferenced reference.

=end sidebar

=head3 Array References

Z<array_references>

X<arrays; references>
X<references; arrays>

You can also create references to arrays, or I<array references>.  This is
useful for several reasons:

=over 4

=item * To pass and return arrays from functions without flattening

=item * To create multi-dimensional data structures

=item * To avoid unnecessary array copying

=item * To hold anonymous data structures

=back

To take a reference to a declared array, use the reference operator:

=begin programlisting

    my @cards     = qw( K Q J 10 9 8 7 6 5 4 3 2 A );
    my $cards_ref = B<\>@cards;

=end programlisting

Now C<$cards_ref> contains a reference to the array.  Any modifications made
through C<$cards_ref> will modify C<@cards> and vice versa.

You may access the entire array as a whole with the C<@> sigil, whether to
flatten the array into a list or count the number of elements it contains:

=begin programlisting

    my $card_count = B<@$cards_ref>;
    my @card_copy  = B<@$cards_ref>;

=end programlisting

X<<< C<< -E<gt> >>; dereferencing arrow >>>
X<<< operators; C<< -E<gt> >> >>>

You may also access individual elements by using the dereferencing arrow
(C<< -> >>):

=begin programlisting

    my $first_card = B<< $cards_ref->[0]  >>;
    my $last_card  = B<< $cards_ref->[-1] >>;

=end programlisting

The arrow is necessary to distinguish between a scalar named C<$cards_ref> and
an array named C<@cards_ref> from which you wish to access a single element.

=begin sidebar

An alternate syntax is available, where you prepend another scalar sigil to the
array reference.  It's shorter, if less readable, to write C<< my $first_card =
B<$$cards_ref[0]>; >>.

=end sidebar

Slice an array through its reference with the curly-brace dereference grouping
syntax:

=begin programlisting

    my @high_cards = B<@{ $cards_ref }>[0 .. 2, -1];

=end programlisting

In this case, you I<may> omit the curly braces, but the visual grouping they
(and the whitespace) provide only helps readability in this case.

X<references; anonymous arrays>
X<arrays; anonymous>

You may also create anonymous arrays in place without using named arrays.
Surround a list of values or expressions with square brackets:

=begin programlisting

    my $suits_ref = [qw( Monkeys Robots Dinosaurs Cheese )];

=end programlisting

This array reference behaves the same as named array references, except that
the anonymous array brackets I<always> create a new reference, while taking a
reference to a named array always refers to the I<same> array with regard to
scoping.  That is to say:

=begin programlisting

    my @meals      = qw( waffles sandwiches pizza );
    my $sunday_ref = \@meals;
    my $monday_ref = \@meals;

    push @meals, 'ice cream sundae';

=end programlisting

... both C<$sunday_ref> and C<$monday_ref> now contain a dessert, while:

=begin programlisting

    my @meals      = qw( waffles sandwiches pizza );
    my $sunday_ref = [ @meals ];
    my $monday_ref = [ @meals ];

    push @meals, 'berry pie';

=end programlisting

... neither C<$sunday_ref> nor C<$monday_ref> contains a dessert.  Within the
square braces used to create the anonymous array, list context flattens the
C<@meals> array.

=head3 Hash References

Z<hash_references>

X<hashes; references>
X<references; hashes>

To create a I<hash reference>, use the reference operator on a named hash:

=begin programlisting

    my %colors = (
        black  => 'negro',
        blue   => 'azul',
        gold   => 'dorado',
        red    => 'rojo',
        yellow => 'amarillo',
        purple => 'morado',
    );

    my $colors_ref = B<\%>colors;

=end programlisting

Access the keys or values of the hash by prepending the reference with the hash
sigil C<%>:

=begin programlisting

    my @english_colors = keys   B<%$colors_ref>;
    my @spanish_colors = values B<%$colors_ref>;

=end programlisting

You may access individual values of the hash (to store, delete, check the
existence of, or retrieve) by using the dereferencing arrow:

=begin programlisting

    sub translate_to_spanish
    {
        my $color = shift;
        return B<< $colors_ref->{$color} >>;
    }

=end programlisting

=begin sidebar

As with array references, you may eschew the dereferencing arrow for a
prepended scalar sigil: C<$$colors_ref{$color}>, though the arrow is often much
clearer.

=end sidebar

You may also use hash slices by reference:

=begin programlisting

    my @colors = qw( red blue green );
    my @colores = B<@{ $colors_ref }{@colors}>;

=end programlisting

Note the use of curly brackets to denote a hash indexing operation and the use
of the array sigil to denote a list operation on the reference.

You may create anonymous hashes in place with curly braces:

=begin programlisting

    my $food_ref = B<{>
        'birthday cake' => 'la torta de cumpleaE<ntilde>os',
        candy           => 'dulces',
        cupcake         => 'bizcochito',
        'ice cream'     => 'helado',
    B<}>;

=end programlisting

As with anonymous arrays, anonymous hashes create a new anonymous hash on every
execution.

=begin sidebar

A common novice typo is to assign an anonymous hash to a standard hash.  This
produces a warning about an odd number of elements in the hash.  Use
parentheses for a named hash and curly brackets for an anonymous hash.

=end sidebar

=head3 Function References

Z<function_references>

X<functions; references>
X<references; functions>
X<functions; first-class>

Perl 5 supports I<first-class functions>.  A function is a data type just as is
an array or hash, at least when you use I<function references>.  This feature
enables many advanced features (L<closures>).  As with other data types, you
may create a function reference by using the reference operator on the name of
a function:

=begin programlisting

    sub bake_cake { say 'Baking a wonderful cake!' };

    my $cake_ref = B<\&>bake_cake;

=end programlisting

X<functions; sigil>
X<sigils; C<&>>
X<C<&>; sigil>

Without the I<function sigil> (C<&>), you will take a reference to the
function's return value or values.

You may also create anonymous functions:

=begin programlisting

    my $pie_ref = B<sub { say 'Making a delicious pie!' }>;

=end programlisting

X<builtins; C<sub>>

The use of the C<sub> builtin I<without> a name compiles the function as
normal, but does not install it in the current namespace.  The only way to
access this function is through the reference.

You may invoke the function reference with the dereferencing arrow:

=begin programlisting

    $cake_ref->();
    $pie_ref->();

=end programlisting

Think of the empty parentheses as denoting an invocation dereferencing
operation in the same way that square brackets indicate an indexed lookup and
curly brackets cause a hash lookup.  You may pass arguments to the function
within the parentheses:

=begin programlisting

    $bake_something_ref->( 'cupcakes' );

=end programlisting

You may also use function references as methods with objects (L<moose>); this
is most useful when you've already looked up the method:

=begin programlisting

    my $clean = $robot_maid->can( 'cleanup' );
    $robot_maid->$clean( $kitchen );

=end programlisting

=begin sidebar

You may see an alternate invocation syntax for function references which uses
the function sigil (C<&>) instead of the dereferencing arrow.  Avoid this
syntax; it has implications for implicit argument passing.

=end sidebar

=head3 Filehandle References

Z<lexical_filehandles>

X<filehandles; references>
X<references; filehandles>

Filehandles can be references as well.  When you use C<open>'s (and
C<opendir>'s) lexical filehandle form, you deal with filehandle references.
Stringifying this filehandle produces something of the form C<GLOB(0x8bda880)>.

Internally, these filehandles are objects of the class C<IO::Handle>.  When you
load that module, you can call methods on filehandles:

=begin programlisting

    use IO::Handle;
    use autodie;

    open my $out_fh, '>', 'output_file.txt';
    $out_fh->say( 'Have some text!' );

=end programlisting

You may see old code which takes references to typeglobs, such as:

=begin programlisting

    my $fh = do {
        local *FH;
        open FH, "> $file" or die "Can't write to '$file': $!\n";
        B<\*FH>;
    };

=end programlisting

This idiom predates lexical filehandles, introduced as part of Perl 5.6.0 in
March 2000N<... so you know how old that code is.>.  You may still use the
reference operator on typeglobs to take references to package-global
filehandles such as C<STDIN>, C<STDOUT>, C<STDERR>, or C<DATA>--but these
represent global data anyhow.  For all other filehandles, prefer lexical
filehandles.

Besides the benefit of using lexical scope instead of package or global scope,
lexical filehandles allow you to manage the lifespan of filehandles.  This is a
nice feature of how Perl 5 manages memory and scopes.

=head3 Reference Counts

Z<reference_counts>

X<lexicals; lifecycle>

How does Perl know when it can safely release the memory for a variable and
when it needs to keep it around?  How does Perl know when it's safe to close
the file opened in this inner scope:

=begin programlisting

    use autodie;
    use IO::Handle;

    sub show_off_scope
    {
        say 'file not open';

        {
            open my $fh, '>', 'inner_scope.txt';
            $fh->say( 'file open here' );
        }

        say 'file closed here';
    }

=end programlisting

X<references; reference counting>

Perl 5 uses a memory management technique known as I<reference counting>.
Every value in the program has an attached counter.  Perl increases this
counter every time something takes a reference to the value, whether implicitly
or explicitly.  Perl decreases that counter every time a reference goes away.
When the counter reaches zero, Perl can safely recycle that value.

Within the inner block in the example, there's one C<$fh>.  (Multiple lines in
the source code refer to it, but there's only one I<reference> to it; C<$fh>
itself.)  C<$fh> is only in scope in the block and does not get assigned to
anything outside of the block, so when the block ends, its reference count
reaches zero.  The recycling of C<$fh> calls an implicit C<close()> method on
the filehandle, which closes the file.

You don't have to understand the details of how all of this works.  You only
need to understand that your actions in taking references and passing them
around affect how Perl manages memory--with one caveat
(L<circular_references>).

=head3 References and Functions

When you use references as arguments to functions, document your intent
carefully.  Modifying the values of a reference from within a function may
surprise calling code, which expects no modifications.

If you need to modify the contents of a reference without affecting the
reference itself, copy its values to a new variable:

=begin programlisting

    my @new_array = @{ $array_ref };
    my %new_hash  = %{ $hash_ref  };

=end programlisting

X<C<Storable>>
X<C<dclone()>>

This is only necessary in a few cases, but explicit cloning helps avoid nasty
surprises for the calling code.  If your references are more complex--if you
use nested data structures--consider the use of the core module C<Storable> and
its C<dclone> (I<deep cloning>) function.
