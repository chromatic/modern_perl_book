=head1 References

Z<references>

Perl usually does what you expect, even if what you expect is subtle. Consider
what happens when you pass values to functions:

=begin programlisting

    sub reverse_greeting
    {
        my $name = reverse shift;
        return "Hello, $name!";
    }

    my $name = 'Chuck';
    say reverse_greeting( $name );
    say $name;

=end programlisting

Outside of the function, C<$name> contains C<Chuck>, even though the value
passed into the function gets reversed into C<kcuhC>. You probably expected
that. The value of C<$name> outside the function is separate from the C<$name>
inside the function. Modifying one has no effect on the other.

Consider the alternative. If you had to make copies of every value before
anything could possibly change them out from under you, you'd have to write
lots of extra defensive code.

Yet sometimes it's useful to modify values in place. If you want to pass a hash
full of data to a function to modify it, creating and returning a new hash for
each change could be troublesome (to say nothing of inefficient).

X<references>

Perl 5 provides a mechanism by which to refer to a value without making a copy.
Any changes made to that I<reference> will update the value in place, such that
I<all> references to that value can reach the new value. A reference is a
first-class scalar data type in Perl 5 which refers to another first-class data
type.

=head2 Scalar References

Z<scalar_references>

X<operators; C<\>>
X<references; C<\> operator>

X<references; scalar>
X<scalars; references>

The reference operator is the backslash (C<\>). In scalar context, it creates a
single reference which refers to another value. In list context, it creates a
list of references. To take a reference to C<$name>:

=begin programlisting

    my $name     = 'Larry';
    my $name_ref = B<\>$name;

=end programlisting

X<dereferencing>
X<references; dereferencing>

You must I<dereference> a reference to evaluate the value to which it refers.
Dereferencing requires you to add an extra sigil for each level of
dereferencing:

=begin programlisting

    sub reverse_in_place
    {
        my $name_ref = shift;
        B<$$name_ref>   = reverse B<$$name_ref>;
    }

    my $name = 'Blabby';
    reverse_in_place( B<\>$name );
    say $name;

=end programlisting

The double scalar sigil (C<$$>) dereferences a scalar reference.

X<references; aliases>
X<aliases>

While in C<@_>, parameters behave as I<aliases> to caller variablesN<Remember that C<for> loops produce a similar aliasing behavior.>, so you can
modify them in place:

=begin programlisting

    sub reverse_value_in_place
    {
        $_[0] = reverse $_[0];
    }

    my $name = 'allizocohC';
    reverse_value_in_place( $name );
    say $name;

=end programlisting

You usually don't want to modify values this way--callers rarely expect it, for
example. Assigning parameters to lexicals within your functions removes this
aliasing behavior.

=begin tip Saving Memory with References

Modifying a value in place, or returning a reference to a scalar can save
memory. Because Perl copies values on assignment, you could end up with
multiple copies of a large string. Passing around references means that Perl
will only copy the references--a far cheaper operation.

=end tip

Complex references may require a curly-brace block to disambiguate portions of
the expression. You may always use this syntax, though sometimes it clarifies
and other times it obscures:

=begin programlisting

    sub reverse_in_place
    {
        my $name_ref   = shift;
        B<${ $name_ref }> = reverse B<${ $name_ref }>;
    }

=end programlisting

If you forget to dereference a scalar reference, Perl will likely coerce the
reference. The string value will be of the form C<SCALAR(0x93339e8)>, and the
numeric value will be the C<0x93339e8> portion. This value encodes the type of
reference (in this case, C<SCALAR>) and the location in memory of the
reference.

=begin tip References Aren't Pointers

Perl does not offer native access to memory locations. The address of the
reference is a value used as an identifier. Unlike pointers in a language such
as C, you cannot modify the address or treat it as an address into memory.
These addresses are only I<mostly> unique because Perl may reuse storage
locations as it reclaims unused memory.

=end tip

=head2 Array References

Z<array_references>

X<arrays; references>
X<references; arrays>

I<Array references> are useful in several circumstances:

=over 4

=item * To pass and return arrays from functions without flattening

=item * To create multi-dimensional data structures

=item * To avoid unnecessary array copying

=item * To hold anonymous data structures

=back

Use the reference operator to create a reference to a declared array:

=begin programlisting

    my @cards     = qw( K Q J 10 9 8 7 6 5 4 3 2 A );
    my $cards_ref = B<\>@cards;

=end programlisting

Any modifications made through C<$cards_ref> will modify C<@cards> and vice
versa. You may access the entire array as a whole with the C<@> sigil, whether
to flatten the array into a list or count its elements:

=begin programlisting

    my $card_count = B<@$cards_ref>;
    my @card_copy  = B<@$cards_ref>;

=end programlisting

X<<< C<< -E<gt> >>; dereferencing arrow >>>
X<<< operators; C<< -E<gt> >> >>>

Access individual elements by using the dereferencing arrow (C<< -> >>):

=begin programlisting

    my $first_card = B<< $cards_ref->[0]  >>;
    my $last_card  = B<< $cards_ref->[-1] >>;

=end programlisting

The arrow is necessary to distinguish between a scalar named C<$cards_ref> and
an array named C<@cards_ref>. Note the use of the scalar sigil (L<sigils>) to
access a single element.

=begin tip Doubling Sigils

An alternate syntax prepends another scalar sigil to the array reference. It's
shorter, if uglier, to write C<< my $first_card = B<$$cards_ref[0]>; >>.

=end tip

Use the curly-brace dereferencing syntax to slice (L<array_slices>) an array
reference:

=begin programlisting

    my @high_cards = B<@{ $cards_ref }>[0 .. 2, -1];

=end programlisting

You I<may> omit the curly braces, but their grouping often improves
readability.

X<references; anonymous arrays>
X<arrays; anonymous>

To create an anonymous array--without using a declared array--surround a list
of values with square brackets:

=begin programlisting

    my $suits_ref = [qw( Monkeys Robots Dinos Cheese )];

=end programlisting

This array reference behaves the same as named array references, except that
the anonymous array brackets I<always> create a new reference. Taking a
reference to a named array always refers to the I<same> array with regard to
scoping. For example:

=begin programlisting

    my @meals      = qw( soup sandwiches pizza );
    my $sunday_ref = \@meals;
    my $monday_ref = \@meals;

    push @meals, 'ice cream sundae';

=end programlisting

... both C<$sunday_ref> and C<$monday_ref> now contain a dessert, while:

=begin programlisting

    my @meals      = qw( soup sandwiches pizza );
    my $sunday_ref = [ @meals ];
    my $monday_ref = [ @meals ];

    push @meals, 'berry pie';

=end programlisting

... neither C<$sunday_ref> nor C<$monday_ref> contains a dessert. Within the
square braces used to create the anonymous array, list context flattens the
C<@meals> array into a list unconnected to C<@meals>.

=head2 Hash References

Z<hash_references>

X<hashes; references>
X<references; hashes>

Use the reference operator on a named hash to create a I<hash reference>:

=begin programlisting

    my %colors = (
        black  => 'negro',
        blue   => 'azul',
        gold   => 'dorado',
        red    => 'rojo',
        yellow => 'amarillo',
        purple => 'morado',
    );

    my $colors_ref = B<\%>colors;

=end programlisting

Access the keys or values of the hash by prepending the reference with the hash
sigil C<%>:

=begin programlisting

    my @english_colors = keys   B<%$colors_ref>;
    my @spanish_colors = values B<%$colors_ref>;

=end programlisting

Access individual values of the hash (to store, delete, check the existence of,
or retrieve) by using the dereferencing arrow or double sigils:

=begin programlisting

    sub translate_to_spanish
    {
        my $color = shift;
        return B<< $colors_ref->{$color} >>;
        # or return B<< $$colors_ref{$color} >>;
    }

=end programlisting

Use the array sigil (C<@>) and disambiguation braces to slice a hash reference:

=begin programlisting

    my @colors  = qw( red blue green );
    my @colores = B<@{ $colors_ref }{@colors}>;

=end programlisting

Create anonymous hashes in place with curly braces:

=begin programlisting

    my $food_ref = B<{>
        'birthday cake' => 'la torta de cumpleaE<ntilde>os',
        candy           => 'dulces',
        cupcake         => 'bizcochito',
        'ice cream'     => 'helado',
    B<}>;

=end programlisting

As with anonymous arrays, anonymous hashes create a new anonymous hash on every
execution.

=begin tip Watch Those Braces!

The common novice error of assigning an anonymous hash to a standard hash
produces a warning about an odd number of elements in the hash. Use parentheses
for a named hash and curly brackets for an anonymous hash.

=end tip

=head2 Automatic Dereferencing

Z<automatic_dereferencing>

X<builtins; C<push>>

As of Perl 5.14, Perl can automatically dereference certain references on your
behalf. Given an array reference in C<$arrayref>, you can write:

=begin programlisting

    push $arrayref, qw( list of values );

=end programlisting

Given an expression which returns an array reference, you can do the same:

=begin programlisting

    push $houses{$location}[$closets], \@new_shoes;

=end programlisting

X<builtins; C<push>>
X<builtins; C<pop>>
X<builtins; C<shift>>
X<builtins; C<unshift>>
X<builtins; C<splice>>
X<builtins; C<keys>>
X<builtins; C<values>>
X<builtins; C<each>>

The same goes for the array operators C<pop>, C<shift>, C<unshift>, C<splice>,
C<keys>, C<values>, and C<each> and the hash operators C<keys>, C<values>, and
C<each>.

If the reference provided is not of the proper type--if it does not dereference
properly--Perl will throw an exception. While this may seem more dangerous than
explicitly dereferencing references directly, it is in fact the same behavior:

=begin programlisting

    my $ref = sub { ... };

    # will throw an exception
    push  $ref, qw( list of values );

    # will also throw an exception
    push @$ref, qw( list of values );

=end programlisting

=head2 Function References

Z<function_references>

X<functions; references>
X<references; functions>
X<functions; first-class>

Perl 5 supports I<first-class functions> in that a function is a data type just
as is an array or hash. This is most obvious with I<function references>, and
enables many advanced features (L<closures>). Create a function reference by
using the reference operator on the name of a function:

=begin programlisting

    sub bake_cake { say 'Baking a wonderful cake!' };

    my $cake_ref = B<\&>bake_cake;

=end programlisting

X<functions; sigil>
X<sigils; C<&>>
X<C<&>; sigil>

Without the I<function sigil> (C<&>), you will take a reference to the
function's return value or values.

Create anonymous functions with the bare C<sub> keyword:

=begin programlisting

    my $pie_ref = B<sub { say 'Making a delicious pie!' }>;

=end programlisting

X<builtins; C<sub>>

The use of the C<sub> builtin I<without> a name compiles the function as
normal, but does not install it in the current namespace. The only way to
access this function is via the reference returned from C<sub>. Invoke the
function reference with the dereferencing arrow:

=begin programlisting

    $cake_ref->();
    $pie_ref->();

=end programlisting

=begin tip Perl 4 Function Calls

An alternate invocation syntax for function references uses the function sigil
(C<&>) instead of the dereferencing arrow. Avoid this syntax; it has subtle
implications for parsing and argument passing.

=end tip

Think of the empty parentheses as denoting an invocation dereferencing
operation in the same way that square brackets indicate an indexed lookup and
curly brackets cause a hash lookup. Pass arguments to the function within the
parentheses:

=begin programlisting

    $bake_something_ref->( 'cupcakes' );

=end programlisting

You may also use function references as methods with objects (L<moose>). This
is useful when you've already looked up the method (L<reflection>):

=begin programlisting

    my $clean = $robot_maid->can( 'cleanup' );
    $robot_maid->$clean( $kitchen );

=end programlisting

=head2 Filehandle References

Z<lexical_filehandles>

X<filehandles; references>
X<references; filehandles>
X<C<IO::File>>
X<C<IO::Handle>>

When you use C<open>'s (and C<opendir>'s) lexical filehandle form, you deal
with filehandle references. Internally, these filehandles are C<IO::File>
objects. You can call methods on them directly. As of Perl 5.14, this is as
simple as:

=begin programlisting

    open my $out_fh, '>', 'output_file.txt';
    $out_fh->say( 'Have some text!' );

=end programlisting

You must C<use IO::File;> in 5.12 to enable this and C<use IO::Handle;> in 5.10
and earlier. Even older code may take references to typeglobs:

=begin programlisting

    local *FH;
    open FH, "> $file" or die "Can't write '$file': $!";
    my $fh = B<\*FH>;

=end programlisting

This idiom predates lexical filehandles (introduced with Perl 5.6.0 in March
2000). You may still use the reference operator on typeglobs to take references
to package-global filehandles such as C<STDIN>, C<STDOUT>, C<STDERR>, or
C<DATA>--but these are all global names anyhow.

Prefer lexical filehandles when possible. With the benefit of explicit scoping,
lexical filehandles allow you to manage the lifespan of filehandles as a
feature of Perl 5's memory management.

=head2 Reference Counts

Z<reference_counts>
X<references; reference counting>

Perl 5 uses a memory management technique known as I<reference counting>.
Every Perl value has a counter attached. Perl increases this counter every time
something takes a reference to the value, whether implicitly or explicitly.
Perl decreases that counter every time a reference goes away. When the counter
reaches zero, Perl can safely recycle that value.

X<lexicals; lifecycle>

How does Perl know when it can safely release the memory for a variable? How
does Perl know when it's safe to close the file opened in this inner scope:

=begin programlisting

    say 'file not open';

    {
        open my $fh, '>', 'inner_scope.txt';
        $fh->say( 'file open here' );
    }

    say 'file closed here';

=end programlisting

Within the inner block in the example, there's one C<$fh>. (Multiple lines in
the source code refer to it, but only one variable refers to it: C<$fh>.)
C<$fh> is only in scope in the block. Its value never leaves the block. When
execution reaches the end of the block, Perl recycles the variable C<$fh> and
decreases the reference count of the contained filehandle. The filehandle's
reference count reaches zero, so Perl recycles it to reclaim memory, and calls
C<close()> implicitly.

You don't have to understand the details of how all of this works. You only
need to understand that your actions in taking references and passing them
around affect how Perl manages memory (see L<circular_references>).

=head2 References and Functions

When you use references as arguments to functions, document your intent
carefully. Modifying the values of a reference from within a function may
surprise the calling code, which doesn't expect anything else to modify its
data. To modify the contents of a reference without affecting the reference
itself, copy its values to a new variable:

=begin programlisting

    my @new_array = @{ $array_ref };
    my %new_hash  = %{ $hash_ref  };

=end programlisting

X<C<Storable>>
X<C<dclone()>>

This is only necessary in a few cases, but explicit cloning helps avoid nasty
surprises for the calling code. If you use nested data structures or other
complex references, consider the use of the core module C<Storable> and its
C<dclone> (I<deep cloning>) function.
