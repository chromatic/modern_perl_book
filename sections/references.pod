=head3 References

Z<references>

Perl usually does what you expect, even if what you expect is subtle.  Consider
what happens when you pass values to functions:

=begin programlisting

    sub reverse_greeting
    {
        my $name = reverse shift;
        return "Hello, $name!";
    }

    my $name = 'Chuck';
    say reverse_greeting( $name );
    say $name;

=end programlisting

You probably expect that, outside of the function, C<$name> contains C<Chuck>,
even though the value passed into the function gets reversed into C<kcuhC>--and
you're right.  That's exactly what happens.  The contents of the string get
duplicated into two separate scalars.  Modifying one has no effect on the
other.

This is incredibly useful in many cases.  If you had to make explicit copies of
every value before you did anything to them which could possibly cause changes,
you'd go crazy writing lots of extra code.

Of course, it's useful to be able to modify a value in place sometimes as well.
If you have a hash full of data that you want to pass to a function to update
or to delete a key/value pair, creating and returning a new hash for each
change could be troublesome (to say nothing of inefficient).

X<reference>

Perl 5 provides a mechanism by which you can refer to a value without making a
copy of that value.  Any changes made to that I<reference> will update the
value in place, such that I<all> references to that value will see the new
value.

=head4 Scalar References

X<references; operator>
X<operators; reference>
X<operators; \>
X<reference operator>

X<references; scalar>
X<scalar references>

The reference operator is the backslash (C<\>).  In scalar context, it creates
a scalar which is a reference.  In list context, it creates a list of
references.  Thus you can take a reference to C<$name> from the previous
example:

=begin programlisting

    my $name     = 'Larry';
    my $name_ref = B<\>$name;

=end programlisting

A reference is a first-class, built-in scalar data type in Perl 5.  It's not a
string, an array, or a hash.  It's a scalar which refers to another first-class
data type.

X<dereference>
X<dereferencing>
X<references; dereferencing>

To access the value to which a reference refers, you must I<dereference> the
reference.  Dereferencing requires you to add an extra sigil for each level of
dereferencing.  For complex references, you may require a curly-brace block to
disambiguate portions of the expression.  For simple references, you do not:

=begin programlisting

    sub reverse_in_place
    {
        my $name_ref = shift;
        reverse B<$$name>;
    }

    my $name = 'Blabby';
    reverse_in_place( B<\>$name );
    say $name;

=end programlisting

The double scalar sigil dereferences a scalar reference.

=begin sidebar

This example isn't useful in the obvious case; why not have the function return
the modified value directly?  Yet scalar references are especially useful when
processing I<large> scalars; copying the contents of those scalars can use a
lot of time and memory.

=end sidebar

The brace form also works, though it's relatively messy in comparison:

=begin programlisting

    sub reverse_in_place
    {
        my $name_ref = shift;
        reverse B<${ $name }>;
    }

=end programlisting

If you forget to dereference a scalar reference and try to print it, you will
see something like C<SCALAR(0x93339e8)> instead of the value.  The hexadecimal
vale in the parentheses represents the memory address of the scalar (but don't
expect to do anything useful with that; references are not like pointers--you
cannot perform math operations on them).

=head4 Array References

X<array references>
X<references; arrays>

You can also create references to arrays, or I<array references>.  This is
useful for several reasons:

=over 4

=item * To pass and return arrays from subroutines without flattening

=item * To use multi-dimensional data structures

=item * To avoid unnecessary copying of arrays

=item * To use anonymous data structures

=back

X<array references; creating>

Those may all seem esoteric, but they're each valuable in different situations.
To take a reference to a declared array, use the reference operator:

=begin programlisting

    my @cards     = qw( K Q J 10 9 8 7 6 5 4 3 2 A );
    my $cards_ref = \@cards;

=end programlisting

Now C<$cards_ref> contains a reference to the array.  Any modifications made
through C<$cards_ref> will modify C<@cards> as well.

X<array references; dereferencing>

You may access the entire array as a whole with the C<@> sigil, whether to
flatten the array into a list or count the number of elements it contains:

=begin programlisting

    my $card_count = B<@$cards_ref>;
    my @card_copy  = B<@$cards_ref>;

=end programlisting

X<references; dereferencing arrow>
X<< -> >>
X<< operators; -> >>
X<operators; dereferencing arrow>

You may also access individual elements by using the dereferencing arrow:

=begin programlisting

    my $first_card = B<< $cards_ref->[0]  >>;
    my $last_card  = B<< $cards_ref->[-1] >>;

=end programlisting

The arrow is necessary to distinguish between a scalar named C<$cards_ref> and
an array named C<@cards_ref> from which you wish to access a single element.

=begin sidebar

An alternate syntax is available, where you prepend another scalar sigil to the
array reference.  This is shorter, but somewhat less readable:

=begin programlisting

    my $first_card = B<$$cards_ref[0]>;

=end programlisting

=end sidebar

You can also access an array slice, but for that you must use the curly-brace
dereferencing syntax:

=begin programlisting

    my @high_cards = B<@{ $cards_ref }>[0 .. 2, -1];

=end programlisting

Strictly speaking, the curly braces are unnecessary in this case, but their
presence along with the whitespace makes the expression easier to read.

X<references; anonymous arrays>
X<anonymous arrays>
X<arrays; anonymous>

You may also create anonymous arrays without taking a reference to a named
array first.  Surround a list of values or expressions with square brackets:

=begin programlisting

    my $suits_ref = [qw( Monkeys Robots Dinosaurs Cheese )];

=end programlisting

All of the other array reference syntax and operations work the same.  Do note,
however, that anonymous array references I<always> create a new reference,
while taking a reference to a named array always refers to the I<same> array
with regard to scoping.  That is to say:

=begin programlisting

    my @meals      = qw( waffles sandwiches pizza );
    my $sunday_ref = \@meals;
    my $monday_ref = \@meals;

    push @meals, 'ice cream sundae';

=end programlisting

... both C<$sunday_ref> and C<$monday_ref> now contain a dessert, while:

=begin programlisting

    my @meals      = qw( waffles sandwiches pizza );
    my $sunday_ref = [@meals];
    my $monday_ref = [@meals];

    push @meals, 'berry pie';

=end programlisting

... neither C<$sunday_ref> nor C<$monday_ref> contains a dessert.

=for author

Link to nested data structures?

=end for

=head4 Hash References

X<hash references>
X<references; hashes>

To create a I<hash reference>, use the reference operator on a named hash:

=begin programlisting

    my %colors = (
        black  => 'negro',
        blue   => 'azul',
        gold   => 'dorado',
        red    => 'rojo',
        yellow => 'amarillo',
        purple => 'morado',
    );

    my $colors_ref = B<\%>colors;

=end programlisting

Access the keys or values of the hash by prepending the reference with the hash
sigil C<%>:

=begin programlisting

    my @english_colors = keys   B<%$colors_ref>;
    my @spanish_colors = values B<%$colors_ref>;

=end programlisting

You may access individual values of the hash (to store, delete, check the
existence of, or retrieve) by using the dereferencing arrow:

=begin programlisting

    sub translate_to_spanish
    {
        my $color = shift;
        return B<< $colors_ref->{$color} >>;
    }

=end programlisting

=begin sidebar

As with array references, you may eschew the dereferencing arrow for a
prepended scalar sigil: C<$$colors_ref{$dolor}>, though the arrow is often
clearer.

=end sidebar

You may also use hash slices by reference:

=begin programlisting

    my @colors = qw( red blue green );
    my @colores = B<@{ $colors_ref }{@colors}>;

=end programlisting

Note the use of curly brackets to denote a hash indexing operation and the use
of the array sigil to denote a list operation on the reference.  There is no
alternate syntax for this form.

You may create anonymous hashes in place with curly braces:

=begin programlisting

    my $food_ref = B<{>
        'birthday cake' => 'la torta de cumpleaÃ±os',
        candy           => 'la dulces',
        cupcake         => 'panquecitos',
        'ice cream'     => 'el helado',
    B<}>;

=end programlisting

As with anonymous arrays, anonymous hashes create a new anonymous hash on every
execution.

=begin sidebar

A common novice mistake is to assign an anonymous hash to a standard hash.  If
you have warnings enabled, you'll receive a warning about an odd number of
elements in the hash.  Use parentheses for a named hash and curly brackets for
an anonymous hash.

=end sidebar

=head4 Function References

Z<function_references>

X<function references>
X<references; functions>
X<subroutine references>
X<references; subroutines>
X<functions; first-class>
X<first-class functions>

Perl 5 supports I<first-class functions>; you may use them as if they were any
other data type.  You do so by the use of I<function references>.

As with other data types, you may create a function reference by using the
reference operator on the name of a function:

=begin programlisting

    sub bake_cake { say 'Baking a wonderful cake!' };

    my $cake_ref = B<\&>bake_cake;

=end programlisting

X<function sigil>
X<sigils; &>

Note that you must use the I<function sigil> (C<&>) with the name of the
subroutine.  If you leave this off, you will take a reference to whatever the
subroutine itself returns.

You may also create an anonymous function:

=begin programlisting

    my $pie_ref = B<sub { say 'Making a delicious pie!' }>;

=end programlisting

The use of the C<sub> keyword I<without> a name compiles the function as
normal, but does not install it in the current namespace.  The only way to
access this function is through the reference.  (This is the basis of Perl 5
L<closures>.)

You may invoke the function reference with the dereferencing arrow:

=begin programlisting

    $cake_ref->();
    $pie_ref->();

=end programlisting

Think of the empty parentheses as performing an invocation dereferencing
operation in the same way that square brackets perform an indexed lookup and
curly brackets perform a hash lookup.  You may pass arguments to the function
within the parentheses:

=begin programlisting

    $bake_something_ref->( 'cupcakes ');

=end programlisting

You may also use function references as methods with objects (L<moose>); this
is most useful when you've already performed a method lookup:

=begin programlisting

    my $clean = $robot_maid->can( 'cleanup' );
    $robot_maid->$clean( $kitchen );

=end programlisting

=begin sidebar

You may see an alternate invocation syntax for function references which uses
the function sigil (C<&>) instead of the dereferencing arrow.  Avoid this
syntax; it has implications for implicit argument passing.

=end sidebar

=head4 Filehandle References

Z<lexical_filehandles>

X<filehandle references>
X<references; filehandles>

Filehandles are references as well--at least, internally speaking.  When you
use C<open>'s (and C<opendir>'s) lexical filehandle form, you deal with
filehandle references.  Stringifying this filehandle produces something of the
form C<GLOB(0x8bda880)>.

Internally, these filehandles have special magic attached; they're objects of
the class C<IO::Handle>.  When you load that module, you can call methods on
filehandles:

=begin programlisting

    use IO::Handle;
    use autodie;

    open my $out_fh, '>', 'output_file.txt';
    $out_fh->say( 'Have some text!' );

=end programlisting

You may see old code which takes references to typeglobs, such as:

=begin programlisting

    my $fh = do {
        local *FH;
        open FH, "> $file" or die "Can't write to '$file': $!\n";
        B<\*FH>;
    };

=end programlisting

This idiom predates lexical filehandles, introduced as part of Perl 5.6.0 in
March 2000.  You may still use the reference operator on typeglobs to take
references to package-global filehandles, but use lexical filehandles instead
when possible.

=begin sidebar

There's no good alternative to using the older form if you need a reference to
C<STDIN>, C<STDOUT>, C<STDERR>, or C<DATA> -- but these represent global data
anyhow.

=end sidebar

Besides the benefit of using lexical scope instead of package or global scope,
lexical filehandles allow you to manage the lifespan of filehandles.  This is a
nice feature of how Perl 5 manages memory and scopes.

=head4 Reference Counts

Z<reference_counts>

X<lexicals; lifecycle>

How does Perl know when it can safely release the memory for a variable and
when it needs to keep it around?  How does Perl know when it's safe to close
the file opened in this inner scope:

=begin programlisting

    use autodie;
    use IO::Handle;

    sub show_off_scope
    {
        say 'file not open';

        {
            open my $fh, '>', 'inner_scope.txt';
            $fh->say( 'file open here' );
        }

        say 'file closed here';
    }

=end programlisting

X<reference counting>
X<references; counts>

Perl 5 uses a memory management technique known as I<reference counting>.
Every value in the program has an attached counter.  Every time you or Perl
takes a reference to this value, Perl increases the counter.  Every time you or
Perl cause a reference to this value to go away, Perl decreases the counter.
When the counter reaches zero, Perl can safely recycle that value.

Within the inner block in the example, there's one C<$fh>.  (Multiple lines in
the source code refer to it, but there's only one I<reference> to it; C<$fh>
itself.)  C<$fh> is only in scope in the block and does not get assigned to
anyting outside of the block, so when the block ends, its reference count
reaches zero.  The recycling of C<$fh> calls an implicit C<close()> method on
the filehandle, and so the file gets closed.

You don't have to understand the details of how all of this works.  You only
need to understand that your actions in taking references and passing them
around affect how Perl manages memory.  (Though see L<circular_references> for
one caveat.)
