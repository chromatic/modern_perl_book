=head1 Modules

Z<modules>

X<modules>

Many people consider the CPAN (L<cpan>) to be Perl 5's most compelling feature.
The CPAN is, at its core, a system for finding and installing modules. A
I<module> is a package contained in its own file and loadable with C<use> or
C<require>. A module must be valid Perl 5 code. It must end with an expression
which evaluates to a true value so that the Perl 5 parser knows it has loaded
and compiled the module successfully. There are no other requirements, only
strong conventions.

X<C<::>; package name separator>

When you load a module, Perl splits the package name on double-colons (C<::>)
and turns the components of the package name into a file path. In practice,
C<use StrangeMonkey;> causes Perl to search for a file named
F<StrangeMonkey.pm> in every directory in C<@INC>, in order, until it finds one
or exhausts the list.

Similarly, C<use StrangeMonkey::Persistence;> causes Perl to search for a file
named C<Persistence.pm> in every directory named F<StrangeMonkey/> present in
every directory in C<@INC>, and so on. C<use StrangeMonkey::UI::Mobile;> causes
Perl to search for a relative file path of F<StrangeMonkey/UI/Mobile.pm> in
every directory in C<@INC>.

The resulting file may or may not contain a package declaration matching its
filename--there is no such technical I<requirement>--but maintenance concerns
recommend that convention.

=begin tip C<perldoc> Tricks

X<C<perldoc>; C<-l>>
X<C<perldoc>; C<-m>>
X<C<perldoc>; C<-lm>>

C<perldoc -l Module::Name> will print the full path to the relevant F<.pm>
file, provided that the I<documentation> for that module exists in the F<.pm>
file. C<perldoc -lm Module::Name> will print the full path to the F<.pm> file
regardless of the existence of any parallel F<.pod> file. C<perldoc -m
Module::Name> will display the contents of the F<.pm> file.

=end tip

=head2 Using and Importing

Z<import>

X<builtins; C<use>>
X<C<import()>>
X<C<CGI>>
X<C<feature> pragma>
X<pragmas; C<feature>>

When you load a module with C<use>, Perl loads it from disk, then calls its
C<import()> method, passing any arguments you provided. By convention, a
module's C<import()> method takes a list of names and exports functions and
other symbols into the calling namespace. This is merely convention; a module
may decline to provide an C<import()>, or its C<import()> may perform other
behaviors. Pragmas (L<pragmas>) such as C<strict> use arguments to change the
behavior of the calling lexical scope instead of exporting symbols:

=begin programlisting

    use strict;
    # ... calls strict->import()

    use CGI ':standard';
    # ... calls CGI->import( ':standard' )

    use feature qw( say switch );
    # ... calls feature->import( qw( say switch ) )

=end programlisting

X<builtins; C<no>>
X<unimporting>

The C<no> builtin calls a module's C<unimport()> method, if it exists, passing
any arguments. This is most common with pragmas which introduce modify behavior
through C<import()>:

=begin programlisting

    use strict;
    # no symbolic references or barewords
    # variable declaration required

    {
        no strict 'refs';
        # symbolic references allowed
        # strict 'subs' and 'vars' still in effect
    }

=end programlisting

Both C<use> and C<no> take effect during compilation, such that:

=begin programlisting

    use Module::Name qw( list of arguments );

=end programlisting

... is the same as:

=begin programlisting

    BEGIN
    {
        require 'Module/Name.pm';
        Module::Name->import( qw( list of arguments ) );
    }

=end programlisting

Similarly:

=begin programlisting

    no Module::Name qw( list of arguments );

=end programlisting

... is the same as:

=begin programlisting

    BEGIN
    {
        require 'Module/Name.pm';
        Module::Name->unimport(qw( list of arguments ));
    }

=end programlisting

... including the C<require> of the module.

=begin tip Missing Methods Never Missed

If C<import()> or C<unimport()> does not exist in the module, Perl will not
give an error message. They are truly optional.

=end tip

You I<may> call C<import()> and C<unimport()> directly, though outside of a
C<BEGIN> block it makes little sense to do so; after compilation has completed,
the effects of C<import()> or C<unimport()> may have little effect.

X<modules; case-sensitivity>
X<case-sensitivity>

Perl 5's C<use> and C<require> are case-sensitive, though while Perl knows the
difference between C<strict> and C<Strict>, your combination of operating
system and file system may not. If you were to write C<use Strict;>, Perl would
not find F<strict.pm> on a case-sensitive filesystem.  With a case-insensitive
filesystem, Perl would happily load F<Strict.pm>, but nothing would happen when
it tried to call C<< Strict->import() >>. (F<strict.pm> declares a package
named C<strict>.)

Portable programs are strict about case even if they don't have to be.

=head2 Exporting

Z<exporting>
X<exporting>

A module can make certain global symbols available to other packages through a
process known as I<exporting>--a process initiated by calling C<import()>
whether implicitly or directly.

X<C<Exporter>>
X<C<Exporter>; C<@EXPORT_OK>>
X<C<Exporter>; C<@EXPORT>>

The core module C<Exporter> provides a standard mechanism to export symbols
from a module. C<Exporter> relies on the presence of package global
variables--C<@EXPORT_OK> and C<@EXPORT> in particular--which contain a list of
symbols to export when requested.

Consider a C<StrangeMonkey::Utilities> module which provides several standalone
functions usable throughout the system:

=begin programlisting

    package StrangeMonkey::Utilities;

    use Exporter 'import';

    our @EXPORT_OK = qw( round translate screech );

    ...

=end programlisting

Any other code now can use this module and, optionally, import any or all of
the three exported functions. You may also export variables:

=begin programlisting

    push @EXPORT_OK, qw( $spider $saki $squirrel );

=end programlisting

Export symbols by default by listing them in C<@EXPORT> instead of
C<@EXPORT_OK>:

=begin programlisting

    our @EXPORT = qw( monkey_dance monkey_sleep );

=end programlisting

... so that any C<use StrangeMonkey::Utilities;> will import both functions.
Be aware that specifying symbols to import will I<not> import default symbols;
you only get what you request. To load a module without importing any symbols,
providing an explicit empty list:

=begin programlisting

    # make the module available, but import() nothing
    use StrangeMonkey::Utilities ();

=end programlisting

Regardless of any import lists, you can always call functions in another
package with their fully-qualified names:

=begin programlisting

    StrangeMonkey::Utilities::screech();

=end programlisting

=begin tip Simplified Exporting

X<CPAN; C<Sub::Exporter>>

The CPAN module C<Sub::Exporter> provides a nicer interface to export functions
without using package globals. It also offers more powerful options.  However,
C<Exporter> can export variables, while C<Sub::Exporter> only exports
functions.

=end tip

=head2 Organizing Code with Modules

Perl 5 does not require you to use modules, nor packages, nor namespaces.  You
may put all of your code in a single F<.pl> file, or in multiple F<.pl> files
you C<require> as necessary.  You have the flexibility to manage your
code in the most appropriate way, given your development style, the formality
and risk and reward of the project, your experience, and your comfort with Perl
5 deployment.

Even so, a project with more than a couple of hundred lines of code receives
multiple benefits from module organization:

=over 4

=item * Modules help to enforce a logical separation between distinct entities
in the system.

=item * Modules provide an API boundary, whether procedural or OO.

=item * Modules suggest a natural organization of source code.

=item * The Perl 5 ecosystem has many tools devoted to creating, maintaining,
organizing, and deploying modules and distributions.

=item * Modules provide a mechanism of code reuse.

=back

Even if you do not use an object-oriented approach, modeling every distinct
entity or responsibility in your system with its own module keeps related code
together and separate code separate.
