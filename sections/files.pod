=head2 Files

Z<files>

Most programs deal with the outside world in some fashion, and much of that
interaction takes place with files: reading them, writing them, manipulating
them in some other fashion.  Perl's early history as a language for system
administration and text processing has produced a language very well suited for
file manipulation.

=head3 Input and Output

Z<filehandle>
X<filehandle>
X<STDIN>
X<STDERR>
X<STDOUT>

The primary mechanism of interacting with the world outside of a program is
through a I<filehandle>.  Filehandles represent the state of some channel of
input or output, such as the standard input or output of a program, a file from
or two which to read or write, and the position in a given file.  Every Perl 5
program has three standard filehandles available, C<STDIN> (the input to the
program), C<STDOUT> (the output from the program), and C<STDERR> (the error
output from the program).

By default, everything you C<print> or C<say> goes to C<STDOUT>, while errors
and warnings and everything you C<warn()> goes to C<STDERR>.  This separation
of output allows you to redirect useful output and errors to two different
places--an output file and error logs, for example.

=begin sidebar

X<DATA>
X<__DATA__>
X<__END__>

Another filehandle is available; C<DATA> represents the current file.  When
Perl finishes compiling the file, it leaves the package global C<DATA>
available and open at the end of the compilation unit.  If you store string
data after C<__DATA__> or C<__END__>, you can read that from the C<DATA>
filehandle.  This is useful for short, self-contained programs.  C<perldoc
perldata> describes this feature in more detail.

=end sidebar

X<open>
X<keywords; open>

Besides the standard filehandles, you can open your own filehandles with the
C<open> keyword.  To open a file for reading:

=begin programlisting

    open my $fh, '<', 'filename'
        or die "Cannot read '$filename': $!\n";

=end programlisting

The first operand is a lexical which will hold the opened filehandle.  The
second operand is the X<file mode>, which determines the type of the filehandle
operation (L<file_modes_table>).  The final operand is the name of the file.
If the C<open> fails, the C<die> clause will throw an exception, with the
contents of C<$!> giving the reason why the open failed.

=begin table File Modes

Z<file_modes_table>

=headrow

=row

=cell Symbols

=cell Explanation

=bodyrows

=row

=cell C<< < >>

=cell Open for reading

=row

=cell C<< > >>

=cell Open for writing, clobbering existing contents if the file exists and
creating a new file otherwise.

=row

=cell C<<< >> >>>

=cell Open for writing, appending to any existing contents and creating a new
file otherwise.

=row

=cell C<< +< >>

=cell Open for reading I<and> writing.

=end table

Besides files, you can open filehandles to scalars:

=begin programlisting

    use autodie;

    my $captured_output;
    open my $fh, '>', \$captured_output;

    do_something_awesome( $fh );

=end programlisting

Such filehandles support all of the existing file modes.

You may encounter older code which uses the two-argument form of C<open()>:

=begin programlisting

    open my $fh, "> $some_file"
        or die "Cannot write to '$some_file': $!\n";

=end programlisting

The lack of clean separation between the intended file mode and the name of the
file allows the possibility of unintentional behaviorsN<When you read that
phrase, train yourself to think "I wonder if that might produce security
problems?"> when interpolating untrusted input into the second operand.  You
can safely replace the two-argument form of open with the three-argument form
in every case without any loss of feature.

X<sysopen>
X<keywords; sysopen>

C<perldoc perlopentut> offers far more details about more exotic uses of
C<open>, including its ability to launch and control other processes, as well
as the use of C<sysopen> for finer-grained control over input and output.
C<perldoc perlfaq5> includes working code for many common IO tasks.

X<readline>
X<keywords; readline>
X<< <> >>
X<< operators; <> >>

=head4 Reading from Files

Given a filehandle opened for input, read from it with the C<readline>
operator, also written as C<< <> >>.  The most common idiom is to read a line
at a time in a C<while()> loop:

=begin programlisting

    use autodie;
    open my $fh, '<', 'some_file';

    while (<$fh>)
    {
        chomp;
        say "Read a line '$_'";
    }

=end programlisting

X<keywords; eof>
X<eof>

In scalar context, C<readline> iterates through the lines available through the
filehandle until it reaches the end of the file (C<eof()>).  Each iteration
returns the next line.  After reaching the end of the file, each iteration
returns C<undef>.  This C<while> idiom explicitly checks the definedness of the
variable used for iteration, such that only the end of file condition ends the
loop.

X<keywords; chomp>
X<chomp>

The term I<line> is somewhat of a misnomer.  C<readline> uses the current
contents of C<$/> to determine how lines end (see example in L<dynamic_scope>).
By default, this variable contains the most appropriate line-ending character
sequence for text files on your current platform.  The lines produced by
C<readline> contain the line ending characters at the end; C<readline> does not
remove them by default.  Use C<chomp> to remove them.

With everything all together, the cleanest way to read from files in Perl 5 is:

=begin programlisting

    use autodie;

    open my $fh, '<', $filename;

    while (my $line = <$fh>)
    {
        chomp $line;
        ...
    }

=end programlisting

=head4 Writing to Files

X<print>
X<keywords; print>
X<say>
X<keywords; say>

Given a filehandle open for output, you may C<print> or C<say> to it:

=begin programlisting

    use autodie;
    open my $out_fh, '>', 'output_file.txt';

    print $out_fh "Here's a line of text\n";
    say   $out_fh "... and here's another";

=end programlisting

Note the lack of comma between the filehandle and the subsequent operand.

=begin sidebar

Damian Conway's I<Perl Best Practices> recommends enclosing the filehandle in
curly braces as a habit.  This is necessary to disambiguate parsing of a
filehandle contained in an aggregate variable, and it's a good habit to
cultivate anyhow.

=end sidebar

X<$,>
X<globals; $,>
X<$\>
X<globals; $\>

You may write an entire list of values to C<print> or C<say>, in which case
Perl 5 uses the magic global C<$,> as the separator between list values.  Perl
also uses any value of C<$\> as the final argument to C<print> or C<say>.

=head4 Closing Files

X<close>
X<keywords; close>

When you've finished working with a file, you may C<close> it explicitly or
allow its filehandle to go out of scope, in which case Perl will close it for
you.  The benefit of calling C<close> explicitly is that you can check for--and
recover from--specific errors, such as running out of space on a storage device
or a broken network connection.

As usual, C<autodie> (L<autodie>) handles these checks for you:

=begin programlisting

    use autodie;

    open my $fh, '>', $file;

    ...

    close $fh;

=end programlisting

=head3 Directories and Paths

=for author

opendir
readdir
glob
paths
    - path::class
    - file::spec

=end for

=head3 File Manipulation

=for author

-X operators
copy
move

=end for
