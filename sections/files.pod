=head1 Files

Z<files>

Most programs deal with the outside world in some fashion, and much of that
interaction takes place with files: reading them, writing them, manipulating
them in some other fashion.  Perl's early history as a language for system
administration and text processing has produced a language very well suited for
file manipulation.

=head2 Input and Output

Z<filehandle>
X<filehandle>
X<STDIN>
X<STDERR>
X<STDOUT>

The primary mechanism of interacting with the world outside of a program is
through a I<filehandle>.  Filehandles represent the state of some channel of
input or output, such as the standard input or output of a program, a file from
or to which to read or write, and the position in a given file.  Every Perl 5
program has three standard filehandles available, C<STDIN> (the input to the
program), C<STDOUT> (the output from the program), and C<STDERR> (the error
output from the program).

By default, everything you C<print> or C<say> goes to C<STDOUT>, while errors
and warnings and everything you C<warn()> goes to C<STDERR>.  This separation
of output allows you to redirect useful output and errors to two different
places--an output file and error logs, for example.

=begin sidebar

X<DATA>
X<__DATA__>
X<__END__>

Another filehandle is available; C<DATA> represents the current file.  When
Perl finishes compiling the file, it leaves the package global C<DATA>
available and open at the end of the compilation unit.  If you store string
data after C<__DATA__> or C<__END__>, you can read that from the C<DATA>
filehandle.  This is useful for short, self-contained programs.  C<perldoc
perldata> describes this feature in more detail.

=end sidebar

X<open>
X<keywords; open>

Besides the standard filehandles, you can open your own filehandles with the
C<open> keyword.  To open a file for reading:

=begin programlisting

    open my $fh, '<', 'filename'
        or die "Cannot read '$filename': $!\n";

=end programlisting

The first operand is a lexical which will hold the opened filehandle.  The
second operand is the I<file mode>, which determines the type of the filehandle
operation.  The final operand is the name of the file.  If the C<open> fails,
the C<die> clause will throw an exception, with the contents of C<$!> giving
the reason why the open failed.

=begin table File Modes

Z<file_modes_table>

=headrow

=row

=cell Symbols

=cell Explanation

=bodyrows

=row

=cell C<< < >>

=cell Open for reading

=row

=cell C<< > >>

=cell Open for writing, clobbering existing contents if the file exists and
creating a new file otherwise.

=row

=cell C<<< >> >>>

=cell Open for writing, appending to any existing contents and creating a new
file otherwise.

=row

=cell C<< +< >>

=cell Open for reading I<and> writing.

=end table

Besides files, you can open filehandles to scalars:

=begin programlisting

    use autodie;

    my $captured_output;
    open my $fh, '>', \$captured_output;

    do_something_awesome( $fh );

=end programlisting

Such filehandles support all of the existing file modes.

You may encounter older code which uses the two-argument form of C<open()>:

=begin programlisting

    open my $fh, "> $some_file"
        or die "Cannot write to '$some_file': $!\n";

=end programlisting

The lack of clean separation between the intended file mode and the name of the
file allows the possibility of unintentional behaviorsN<When you read that
phrase, train yourself to think "I wonder if that might produce security
problems?"> when interpolating untrusted input into the second operand.  You
can safely replace the two-argument form of open with the three-argument form
in every case without any loss of feature.

X<sysopen>
X<keywords; sysopen>

C<perldoc perlopentut> offers far more details about more exotic uses of
C<open>, including its ability to launch and control other processes, as well
as the use of C<sysopen> for finer-grained control over input and output.
C<perldoc perlfaq5> includes working code for many common IO tasks.

X<readline>
X<keywords; readline>
X<< <> >>
X<< operators; <> >>

=head3 Reading from Files

Given a filehandle opened for input, read from it with the C<readline>
operator, also written as C<< <> >>.  The most common idiom is to read a line
at a time in a C<while()> loop:

=begin programlisting

    use autodie;
    open my $fh, '<', 'some_file';

    while (<$fh>)
    {
        chomp;
        say "Read a line '$_'";
    }

=end programlisting

X<keywords; eof>
X<eof>

In scalar context, C<readline> iterates through the lines available through the
filehandle until it reaches the end of the file (C<eof()>).  Each iteration
returns the next line.  After reaching the end of the file, each iteration
returns C<undef>.  This C<while> idiom explicitly checks the definedness of the
variable used for iteration, such that only the end of file condition ends the
loop.

X<keywords; chomp>
X<chomp>

Every line read from C<readline> includes the character or characters which
mark the end of a line.  In most cases, this is a platform-specific sequence
consisting of a newline (C<\n>), a carriage return (C<\r>), or a combination of
the two (C<\r\n>).  Use C<chomp> to remove your platform's specific newline
sequence.

With everything all together, the cleanest way to read from files in Perl 5 is:

=begin programlisting

    use autodie;

    open my $fh, '<', $filename;

    while (my $line = <$fh>)
    {
        chomp $line;
        ...
    }

=end programlisting

X<binmode>
X<keywords; binmode>

If you're not reading I<textual> data--instead reading I<binary> data--use
C<binmode> on the filehandle before reading from or writing to it.  This
keyword tells Perl to treat all of the filehandle's data as pure data.  Perl
will not modify it in any fashion, as it might for platform portability.
Although Unix-like platforms tend not to need C<binmode> in this case, portable
programs use it anyway.  See L<unicode> for other features of C<binmode>.

=head3 Writing to Files

X<print>
X<keywords; print>
X<say>
X<keywords; say>

Given a filehandle open for output, you may C<print> or C<say> to it:

=begin programlisting

    use autodie;
    open my $out_fh, '>', 'output_file.txt';

    print $out_fh "Here's a line of text\n";
    say   $out_fh "... and here's another";

=end programlisting

Note the lack of comma between the filehandle and the subsequent operand.

=begin sidebar

Damian Conway's I<Perl Best Practices> recommends enclosing the filehandle in
curly braces as a habit.  This is necessary to disambiguate parsing of a
filehandle contained in an aggregate variable, and it's a good habit to
cultivate anyhow.

=end sidebar

X<$,>
X<globals; $,>
X<$\>
X<globals; $\>

You may write an entire list of values to C<print> or C<say>, in which case
Perl 5 uses the magic global C<$,> as the separator between list values.  Perl
also uses any value of C<$\> as the final argument to C<print> or C<say>.

=head3 Closing Files

X<close>
X<keywords; close>

When you've finished working with a file, you may C<close> it explicitly or
allow its filehandle to go out of scope, in which case Perl will close it for
you.  The benefit of calling C<close> explicitly is that you can check for--and
recover from--specific errors, such as running out of space on a storage device
or a broken network connection.

As usual, C<autodie> (L<autodie>) handles these checks for you:

=begin programlisting

    use autodie;

    open my $fh, '>', $file;

    ...

    close $fh;

=end programlisting

=head3 Special File Handling Variables

X<variables; $.>
X<$.>

For every line read, Perl 5 increments the value of the variable C<$.>, which
serves as a line counter.

X<variables; $.>
X<$.>

C<readline> uses the current contents of C<$/> as the line-ending sequence (see
example in L<dynamic_scope>).  The value of this variable defaults to the most
appropriate line-ending character sequence for text files on your current
platform.  In truth, the word I<line> is a misnomer.  You can set C<$/> to
contain any sequence of charactersN<... but never a regular expression, because
Perl 5 does not support that.>.  This is useful for highly-structured data in
which you want to read a I<record> at a time.

X<variables; $|>
X<$|>
X<buffering>

By default, Perl uses I<buffered output>, where it performs IO only when it has
enough data to exceed a threshold.  This allows Perl to batch up expensive IO
operations instead of always writing very small amounts of data.  Yet sometimes
you want to send data as soon as you have it without waiting for that
buffering--especially if you're writing a command-line filter connected to
other programs or a line-oriented network service.

The C<$|> variable controls buffering on the currently active output
filehandle.  When set to a non-zero value, Perl will flush the output after
each write to the filehandle.  When set to a zero value, Perl will use its
default buffering strategy.

X<FileHandle>
X<FileHandle; autoflush()>

In lieu of the global variable, use the C<autoflush()> method on a lexical
filehandle.  Be sure to load C<FileHandle> first, as you cannot call methods on
lexical filehandles otherwise:

=begin programlisting

    use autodie;
    use FileHandle;

    open my $fh, '>', 'pecan.log';
    $fh->autoflush( 1 );

    ...

=end programlisting

X<FileHandle; input_line_number()>
X<FileHandle; input_record_separator()>

Once you have loaded C<FileHandle>, you may also use its C<input_line_number()>
and C<input_record_separator()> methods instead of C<$.> and C<$/>
respectively.  See C<perldoc FileHandle> and C<perldoc IO::Handle> for more
information.

=begin sidebar

If you're using Perl 5.12 or newer, C<IO::File> has superseded C<FileHandle>.

=end sidebar

=head2 Directories and Paths

X<opendir>
X<keywords; opendir>

You may also manipulate directories and file paths with Perl 5.  Working with
directories is similar to working with files, except that you cannot I<write>
to directoriesN<Instead, you save and move and rename and remove files.>.  Open
a directory handle with C<opendir>:

=begin programlisting

    use autodie;

    opendir my $dirh, '/home/monkeytamer/tasks/';

=end programlisting

X<readdir>
X<keywords; readdir>

The keyword to read from a directory is C<readdir>.  As with C<readline>, you
may iterate over the contents of directories one at a time or you may assign
them to a list in one swoop:

=begin programlisting

    # iteration
    while (my $file = readdir $dirh )
    {
        ...
    }

    # flattening into a list
    my @files = readdir $otherdirh;

=end programlisting

As a new feature available in 5.12, C<readdir> in a C<while> will set C<$_>,
just as does C<readline> in C<while>:

=begin programlisting

    use 5.012;
    use autodie;

    opendir my $dirh, 'tasks/circus/';

    while (readdir $dirh)
    {
        next if /^\./;
        say "Found a task $_!";
    }

=end programlisting

X<Unix; hidden files>
X<files; hidden>
X<hidden files>

The curious regular expression in this example skips so-called I<hidden files>
on Unix and Unix-like systems, where a leading dot prevents them from appearing
in directory listings by default.  It also skips the first two files returned
from every C<readdir> invocation, specifically C<.> and C<..>.  These two files
represent the current directory and the parent directory, respectively.

X<files; relative paths>
X<files; absolute paths>

Be careful that the names returned from C<readdir> are I<relative> to the
directory itself.  In other words, if the F<tasks/> directory contains three
files named F<eat>, F<drink>, and F<be_monkey>, C<readdir> will return C<eat>,
C<drink>, and C<be_monkey> and I<not> F<tasks/eat>, F<tasks/drink>, and
F<task/be_monkey>.  In contrast, an I<absolute> path is a path fully qualified
to its filesystem.

X<closedir>
X<keywords; closedir>

Close a directory handle by letting it go out of scope or with the C<closedir>
keyword.

=head3 Manipulating Paths

Perl 5 offers a Unixish view of the world, or at least your filesystem.  Even
if you aren't using a Unix-like platform, Perl will interpret Unix-style paths
appropriately for your operating system and filesystem.  In other words, if
you're using Microsoft Windows, you can use the path F<C:/My
Documents/Robots/Bender/> just as easily as you can use the path F<C:\My
Documents\Robots\Caprica Six\>.

X<File::Spec>

Even so, manipulating file paths in a safe and cross-platform manner suggests
that you avoid string interpolation and concatenation.  The core C<File::Spec>
module family provides abstractions to allow you to manipulate file paths in
safe and portable fashions.  Even so, it's not always easy to understand or to
use correctly.

X<Path::Class>
X<Path::Class::Dir>
X<Path::Class::File>

The C<Path::Class> distribution on the CPAN provides a nicer interface around
C<File::Spec>.  Use the C<dir()> function to create an object representing a
directory and the C<file()> function to create an object representing a file:

=begin programlisting

    use Path::Class;

    my $meals = dir( 'tasks', 'cooking' );
    my $file  = file( 'tasks', 'health', 'exoskeleton_research.txt' );

=end programlisting

... and you can get file objects from directories:

=begin programlisting

    my $lunch = $meals->file( 'veggie_calzone.txt' );

=end programlisting

... and vice versa:

=begin programlisting

    my $robots_dir = $robot_list->dir();

=end programlisting

You can even open filehandles to directories and files:

=begin programlisting

    my $dir_fh    = $dir->open();
    my $robots_fh = $robot_list->open( 'r' ) or die "Open failed: $!";

=end programlisting

See the documentation of C<Path::Class::Dir> and C<Path::Class::File> for more
information.

=head2 File Manipulation

X<-X>
X<operators; -X>

Besides reading and writing files, you can also manipulate them as you would
directly from a command line or a file manager.  The C<-X> file test operators
can give you information about the attributes of files and directories on your
system.  For example, to test that a file exists:

X<operators; -e>

=begin programlisting

    say 'Present!' if -e $filename;

=end programlisting

The C<-e> operator has a single operand, the name of a file or a file or
directory handle.  If the file exists, the expression will evaluate to a true
value.  C<perldoc -f -X> lists all other file tests; the most popular are:

X<operators; -f>
X<operators; -d>
X<operators; -r>
X<operators; -z>

=over 4

=item C<-f>, which returns a true value if its operand is a plain file

=item C<-d>, which returns a true value if its operand is a directory

=item C<-r>, which returns a true value if the file permissions of its operand
permit reading by the current user

=item C<-z>, which returns a true value if its operand is a non-empty file

=back

As of Perl 5.10.1, you may look up the documentation for any of these operators
with C<perldoc -f -r>, for example.

=begin sidebar

X<chdir>
X<keywords; chdir>
X<Cwd>

Perl also allows you to change its notion of the current directory.  By
default, this is the active directory from where you launched the program.  The
core C<Cwd> module allows you to determine this.  The keyword C<chdir> attempts
to change the current working directory.  This can be useful for performing
file manipulations with relative--not absolute--paths.

=end sidebar

X<rename>
X<keywords; rename>

The C<rename> keyword can rename a file or move it between directories.  It
takes two operands, the old name of the file and the new name:

=begin programlisting

    use autodie;

    rename 'death_star.txt', 'carbon_sink.txt';

=end programlisting

X<File::Copy>
X<unlink>
X<files; copying>
X<files; moving>
X<files; removing>
X<files; deleting>

There's no core keyword to copy a file, but the core C<File::Copy> module
provides both C<copy()> and C<move()> functions.  Use C<unlink> to remove one
or more files.  These functions and keywords all return true values on success
and set C<$!> on error.

=begin sidebar

C<Path::Class> provides convenience methods to check certain file attributes as
well as to remove files completely, in a cross-platform fashion.

=end sidebar
