=head1 Hashes

Z<hashes>

X<hashes>

A I<hash> is a first-class Perl data structure which associates string keys
with scalar values.  You might have encountered them as I<tables>,
I<associative arrays>, I<dictionaries>, or I<maps> in other programming
languages.  In the same way that the name of a variable corresponds to a
storage location, a key in a hash refers to a value.

A well-respected, if hoary, analogy is to think of a hash like you would a
telephone book: use your friend's name to look up her number.

Hashes have two important properties.  First, they store one scalar per unique
key.  Second, they do not provide any specific ordering of keys.  A hash is a
big container full of key/value pairs.

=head2 Declaring Hashes

X<hashes; declaring>
X<C<%>; sigil>
X<sigils; C<%>>

A hash has the C<%> sigil.  Declare a lexical hash with:

=begin programlisting

    my %favorite_flavors;

=end programlisting

A hash starts out empty, with no keys or values.  In boolean context, a hash
returns false if it contains no keys.  Otherwise, it returns a string which
evaluates to true.

You can assign and access individual elements of a hash:

=begin programlisting

    my %favorite_flavors;
    $favorite_flavors{Gabi}    = 'Raspberry chocolate';
    $favorite_flavors{Annette} = 'French vanilla';

=end programlisting

X<C<$>; sigil>
X<sigils; C<$>>

Hashes use the scalar sigil C<$> when accessing individual elements and curly
braces C<{ }> for string indexing.

You may assign a list of keys and values to a hash in a single expression:

=begin programlisting

    my %favorite_flavors = (
        'Gabi',    'Raspberry chocolate',
        'Annette', 'French vanilla',
    );

=end programlisting

X<<< C<< => >>; fat comma operator >>>
X<<< operators; C<< => >> >>>

If you assign an odd number of elements to the hash, you will receive a warning
that the results are not what you anticipated.  It's often more obvious to use
the I<fat comma> operator (C<< => >>) to associate values with keys, as it
makes the pairing more visible.  Compare:

=begin programlisting

    my %favorite_flavors = (
        Gabi    B<< => >> 'Mint chocolate chip',
        Annette B<< => >> 'French vanilla',
    );

=end programlisting

... to:

=begin programlisting

    my %favorite_flavors = (
        'Jacob', 'anything',
        'Floyd', 'Pistachio',
    );

=end programlisting

The fat comma operator acts like the regular comma, but it also causes the Perl
parser to treat the previous bareword (L<barewords>) as if it were a quoted
word.  The C<strict> pragma will not warn about the bareword, and if you have
a function with the same name as a hash key, the fat comma will I<not> call the
function:

=begin programlisting

    sub name { 'Leonardo' }

    my %address =
    (
        name => '1123 Fib Place',
    );

=end programlisting

The key of the hash will be C<name> and not C<Leonardo>.  If you intend to call
the function to get the key, make the function call explicit:

=begin programlisting

    my %address =
    (
        B<name()> => '1123 Fib Place',
    );

=end programlisting

=begin notetip

Hash assignment occurs in list context; if you call a function within this
assignment, you may have to use C<scalar()> to disambiguate its context.

=end notetip

To empty a hash, assign to it an empty listN<Unary C<undef> also works, but
it's somewhat more rare.>:

=begin programlisting

    %favorite_flavors = ();

=end programlisting

=head2 Hash Indexing

X<hashes; values>

Because a hash is an aggregate, you can access individual values with an
indexing operation.  Use a key as an index (a I<keyed access> operation) to
retrieve a value from a hash:

=begin programlisting

    my $address = $addresses{$name};

=end programlisting

In this example, C<$name> contains a string which is also a key of the hash.
As with accessing an individual element of an array, the hash's sigil has
changed from C<%> to C<$> to indicate keyed access to a scalar value.

You may also use string literals as hash keys.  Perl quotes barewords
automatically according to the same rules as fat commas:

=begin programlisting

    # auto-quoted
    my $address = $addresses{Victor};

    # needs quoting; not a valid bareword
    my $address = $addresses{B<'>Sue-LinnB<'>};

    # function call needs disambiguation
    my $address = $addresses{get_nameB<()>};

=end programlisting

You might find it clearer always to quote string literal hash keys, but the
autoquoting behavior is so well established in Perl 5 culture that it's better
to reserve the quotes for extraordinary circumstances, where they broadcast
your intention to do something different.

Even Perl 5 builtins get the autoquoting treatment:

=begin programlisting

    my %addresses =
    (
        Leonardo => '1123 Fib Place',
        Utako    => 'Cantor Hotel, Room 1',
    );

    sub get_address_from_name
    {
        return $addresses{B<+>shift};
    }

=end programlisting

The unary plus (L<unary_coercions>) turns what would be a bareword (C<shift>)
subject to autoquoting rules into an expression.  As this implies, you can use
an arbitrary expression--not only a function call--as the key of a hash:

=begin programlisting

    # don't actually I<do> this though
    my $address = $addresses{reverse 'odranoeL'};

    # interpolation is fine
    my $address = $addresses{"$first_name $last_name"};

    # so are method calls
    my $address = $addresses{ $user->name() };

=end programlisting

Anything that evaluates to a string is an acceptable hash key.  Of course, hash
keys can only be strings.  If you use an object as a hash key, you'll get the
stringified version of that object instead of the object itself:

=begin programlisting

    for my $isbn (@isbns)
    {
        my $book = Book->fetch_by_isbn( $isbn );

        # unlikely to do what you want
        $books{$book} = $book->price;
    }

=end programlisting

=head2 Hash Key Existence

X<builtins; C<exists>>
X<hashes; C<exists>>

The C<exists> operator returns a boolean value to indicate whether a hash
contains the given key:

=begin programlisting

    my %addresses =
    (
        Leonardo => '1123 Fib Place',
        Utako    => 'Cantor Hotel, Room 1',
    );

    say "Have Leonardo's address" if exists $addresses{Leonardo};
    say "Have Warnie's address"   if exists $addresses{Warnie};

=end programlisting

Using C<exists> instead of accessing the hash key directly avoids two problems.
First, it does not check the boolean nature of the hash I<value>; a hash key
may exist with a value even if that value evaluates to a boolean false
(including C<undef>):

=begin programlisting

    my  %false_key_value = ( 0 => '' );
    ok( %false_key_value,
         'hash containing false key & value should evaluate to a true value' );

=end programlisting

Second, C<exists> avoids autovivification (L<autovivification>) within with
nested data structures.

X<builtins; C<defined>>

The corresponding operator for hash values is C<defined>.  If a hash key
exists, its value may be C<undef>.  Check that with C<defined>:

=begin programlisting

    $addresses{Leibniz} = undef;

    say "Gottfried lives at $addresses{Leibniz}"
        if exists  $addresses{Leibniz}
        && defined $addresses{Leibniz};

=end programlisting

=head2 Accessing Hash Keys and Values

X<hashes; C<keys>>
X<builtins; C<keys>>

Hashes are aggregate variables, but they behave slightly differently from
arrays.  In particular, you can iterate over the keys of a hash, the values of
a hash, or pairs of keys and values.  The C<keys> operator returns a list of
keys of the hash:

=begin programlisting

    for my $addressee (keys %addresses)
    {
        say "Found an address for $addressee!";
    }

=end programlisting

X<hashes; C<values>>
X<builtins; C<values>>

The C<values> operator returns a list of values of the hash:

=begin programlisting

    for my $address (values %addresses)
    {
        say "Someone lives at $address";
    }

=end programlisting

X<hashes; C<each>>
X<builtins; C<each>>

The C<each> operator returns a list of two-element lists of the key and the
value:

=begin programlisting

    while (my ($addressee, $address) = each %addresses)
    {
        say "$addressee lives at $address";
    }

=end programlisting

Unlike arrays, there is no obvious ordering to the list of keys or values.  The
ordering depends on the internal implementation of the hash, which can depend
both on the particular version of Perl you are using, the size of the hash, and
a random factor.  With that caveat in mind, the order of items in a hash is the
same for C<keys>, C<values>, and C<each>.  Modifying the hash may change the
order, but you can rely on that order if the hash remains the same.

Each hash has only a I<single> iterator for the C<each> operator.  You cannot
reliably iterate over a hash with C<each> more than once; if you begin a new
iteration while another is in progress, the former will end prematurely and the
latter will begin partway through the hash.

Reset a hash's iterator with the use of C<keys> or C<values> in void context:

=begin programlisting

    # reset hash iterator
    keys %addresses;

    while (my ($addressee, $address) = each %addresses)
    {
        ...
    }

=end programlisting

You should also ensure that you do not call any function which may itself try
to iterate over the hash with C<each>.

=begin sidebar

The single hash iterator is a well-known caveat, but it doesn't come up as
often as you might expect.  Be cautious, but use C<each> when you need it.

=end sidebar

=head2 Hash Slices

X<hashes; slicing>
X<slices; hash>

As with arrays, you may access a list of elements of a hash in one operation.
A I<hash slice> is a list of keys or values of a hash.  The simplest
explanation is initialization of multiple elements of a hash used as an
unordered set:

=begin programlisting

    my %cats;
    @cats{qw( Jack Brad Mars Grumpy )} = (1) x 4;

=end programlisting

This is equivalent to the initialization:

=begin programlisting

    my %cats = map { $_ => 1 } qw( Jack Brad Mars Grumpy );

=end programlisting

... except that the hash slice initialization does not I<replace> the existing
contents of the hash.

You may retrieve multiple values from a hash with a slice:

=begin programlisting

    my @buyer_addresses = @addresses{ @buyers };

=end programlisting

X<C<@>; sigil>
X<sigils; C<@>>

As with array slices, the sigil of the hash changes to indicate list context.
You can still tell that C<%addresses> is a hash by the use of the curly braces
to indicate keyed access.

Hash slices make it easy to merge two hashes:

=begin programlisting

    my %addresses        = ( ... );
    my %canada_addresses = ( ... );

    @addresses{ keys %canada_addresses } = values %canada_addresses;

=end programlisting

This is equivalent to looping over the contents of C<%canada_addresses>
manually, but is much shorter.

=begin sidebar

The choice between the two approaches depends on your merge strategy.  What if
the same key occurs in both hashes?  The hash slice approach always overwrites
existing key/value pairs in C<%addresses>.

=end sidebar

=head2 The Empty Hash

An empty hash contains no keys or values.  It evaluates to false in a boolean
context.  A hash which contains at least one key/value pair evaluates to true
in a boolean context even if all of the keys or all of the values or both would
themselves evaluate to false in a boolean context.

=begin programlisting

    use Test::More;

    my %empty;
    ok( ! %empty, 'empty hash should evaluate to false' );

    my %false_key = ( 0 => 'true value' );
    ok( %false_key, 'hash containing false key should evaluate to true' );

    my %false_value = ( 'true key' => 0 );
    ok( %false_value, 'hash containing false value should evaluate to true' );

    ...

    done_testing();

=end programlisting

In scalar context, a hash evaluates to a string which represents the number of
hash buckets used out of the number of hash buckets allocated.  This is rarely
useful, as it represents internal details about hashes that are almost always
meaningless to Perl programs.  You can safely ignore it.

In list context, a hash evaluates to a list of key/value pairs similar to what
you receive from the C<each> operator.  However, you I<cannot> iterate over
this list the same way you can iterate over the list produced by C<each>, as
the loop will loop forever, unless the hash is empty.

=head2 Hash Idioms

X<hashes; finding uniques>

Hashes have several uses, such as finding unique elements of lists or arrays.
Because each key exists only once in a hash, assigning the same key to a hash
multiple times stores only the most recent key:

=begin programlisting

    my %uniq;
    undef @uniq{ @items };
    my @uniques = keys %uniq;

=end programlisting

The use of the C<undef> operator with the hash slice sets the values of the
hash to C<undef>.  This is the cheapest way to determine if an item exists in a
set.

X<hashes; counting items>

Hashes are also useful for counting elements, such as a list of IP addresses in
a log file:

=begin programlisting

    my %ip_addresses;

    while (my $line = <$logfile>)
    {
        my ($ip, $resource) = analyze_line( $line );
        $ip_addresses{$ip}++;
        ...
    }

=end programlisting

The initial value of a hash value is C<undef>.  The postincrement operator
(C<++>) treats that as zero.  This in-place modification of the value
increments an existing value for that key.  If no value exists for that key, it
creates a value (C<undef>) and immediately increments it to one, as the
numification of C<undef> produces the value 0.

X<hashes; caching>
X<orcish maneuver>

A variant of this strategy works very well for caching, where you might want to
store the result of an expensive calculation with little overhead to store or
fetch:

=begin programlisting

    {
        my %user_cache;

        sub fetch_user
        {
            my $id = shift;
            $user_cache{$id} ||= create_user($id);
            return $user_cache{$id};
        }
    }

=end programlisting

X<defined-or>
X<C<//>; infix operator>
X<operators; C<//>>
X<operators; defined-or>

This I<orcish maneuver>N<Or-cache, if you like puns.> returns the value from
the hash, if it exists.  Otherwise, it calculates the value, caches it, and
then returns it.  Beware that the boolean-or assignment operator (C<||=>)
operates on boolean values; if your cached value evaluates to false in a
boolean context, use the defined-or assignment operator (C<//=>) instead:

=begin programlisting

        sub fetch_user
        {
            my $id = shift;
            $user_cache{$id} B<//=> create_user($id);
            return $user_cache{$id};
        }

=end programlisting

This lazy orcish maneuver tests for the definedness of the cached value, not
its boolean truth.  The defined-or assignment operator is new in Perl 5.10.

X<hashes; named parameters>

Hashes can also collect named parameters passed to functions.  If your function
takes several arguments, you can use a slurpy hash (L<parameter_slurping>) to
gather key/value pairs into a single hash:

=begin programlisting

    sub make_sundae
    {
        my %parameters = @_;
        ...
    }

    make_sundae( flavor => 'Lemon Burst', topping => 'cookie bits' );

=end programlisting

You can even set default parameters with this approach:

=begin programlisting

    sub make_sundae
    {
        my %parameters             = @_;
        B<$parameters{flavor}    //= 'Vanilla';>
        B<$parameters{topping}   //= 'fudge';>
        B<$parameters{sprinkles} //= 100;>
        ...
    }

=end programlisting

... or include them in the initial declaration and assignment itself:

=begin programlisting

    sub make_sundae
    {
        my %parameters =
        (
            B<< flavor    => 'Vanilla', >>
            B<< topping   => 'fudge', >>
            B<< sprinkles => 100, >>
            @_,
        );
        ...
    }

=end programlisting

... as subsequent declarations of the same key with a different value will
overwrite the previous values.

=head2 Locking Hashes

Z<locked_hashes>

X<hashes; locked>

One drawback of hashes is that their keys are barewords which offer little typo
protection (especially compared to the function and variable name protection
offered by the C<strict> pragma).  The core module C<Hash::Util> provides
mechanisms to restrict the modification of a hash or the keys allowed in the
hash.

To prevent someone from accidentally adding a hash key you did not intend
(presumably with a typo or with data from untrusted input), use the
C<lock_keys()> function to restrict the hash to its current set of keys.  Any
attempt to add a key/value pair to the hash where the key is not in the allowed
set of keys will raise an exception.

Of course, anyone who needs to do so can always use the C<unlock_keys()>
function to remove the protection, so do not rely on this as a security measure
against misuse from other programmers.

Similarly you can lock or unlock the existing value for a given key in the hash
(C<lock_value()> and C<unlock_value()>) and make or unmake the entire hash
read-only with C<lock_hash()> and C<unlock_hash()>.
