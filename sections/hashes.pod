=head1 Hashes

Z<hashes>

X<hashes>

A I<hash> is a first-class Perl data structure which associates string keys
with scalar values. In the same way that the name of a variable corresponds to
a storage location, a key in a hash refers to a value. Think of a hash like you
would a telephone book: use the names of your friends to look up their numbers.
Other languages call hashes I<tables>, I<associative arrays>, I<dictionaries>,
or I<maps>.

Hashes have two important properties: they store one scalar per unique key and
they provide no specific ordering of keys.

=head2 Declaring Hashes

Z<declaring_hashes>

X<hashes; declaring>
X<C<%>; sigil>
X<sigils; C<%>>

Hashes use the C<%> sigil. Declare a lexical hash with:

=begin programlisting

    my %favorite_flavors;

=end programlisting

A hash starts out empty. You could write C<my %favorite_flavors = ();>, but
that's redundant.

X<C<$>; sigil>
X<sigils; C<$>>

Hashes use the scalar sigil C<$> when accessing individual elements and curly
braces C<{ }> for keyed access:

=begin programlisting

    my %favorite_flavors;
    $favorite_flavors{Gabi}    = 'Raspberry chocolate';
    $favorite_flavors{Annette} = 'French vanilla';

=end programlisting

Assign a list of keys and values to a hash in a single expression:

=begin programlisting

    my %favorite_flavors = (
        'Gabi',    'Raspberry chocolate',
        'Annette', 'French vanilla',
    );

=end programlisting

X<<< C<< => >>; fat comma operator >>>
X<<< operators; C<< => >> >>>

If you assign an odd number of elements to the hash, you will receive a warning
to that effect. Idiomatic Perl often uses the I<fat comma> operator (C<< => >>)
to associate values with keys, as it makes the pairing more visible:

=begin programlisting

    my %favorite_flavors = (
        Gabi    B<< => >> 'Mint chocolate chip',
        Annette B<< => >> 'French vanilla',
    );

=end programlisting

The fat comma operator acts like the regular comma, but also automatically
quotes the previous bareword (L<barewords>). The C<strict> pragma will not warn
about such a bareword--and if you have a function with the same name as a hash
key, the fat comma will I<not> call the function:

=begin programlisting

    sub name { 'Leonardo' }

    my %address =
    (
        name => '1123 Fib Place',
    );

=end programlisting

The key of this hash will be C<name> and not C<Leonardo>. To call the function,
make the function call explicit:

=begin programlisting

    my %address =
    (
        B<name()> => '1123 Fib Place',
    );

=end programlisting

=begin notetip

Hash assignment occurs in list context. Any function called in a hash
assignment will default to list context without an explicit C<scalar()>
coercion.

=end notetip

Assign an empty list to empty a hashN<You may occasionally see C<undef
%hash>.>:

=begin programlisting

    %favorite_flavors = ();

=end programlisting

=head2 Hash Indexing

X<hashes; values>

Access individual hash values with an indexing operation. Use a key (a I<keyed
access> operation) to retrieve a value from a hash:

=begin programlisting

    my $address = $addresses{$name};

=end programlisting

In this example, C<$name> contains a string which is also a key of the hash.
As with accessing an individual element of an array, the hash's sigil has
changed from C<%> to C<$> to indicate keyed access to a scalar value.

You may also use string literals as hash keys. Perl quotes barewords
automatically according to the same rules as fat commas:

=begin programlisting

    # auto-quoted
    my $address = $addresses{Victor};

    # needs quoting; not a valid bareword
    my $address = $addresses{B<'>Sue-LinnB<'>};

    # function call needs disambiguation
    my $address = $addresses{get_nameB<()>};

=end programlisting

=begin tip Don't Quote Me

Novices often always quote string literal hash keys, but experienced developers
elide the quotes whenever possible. In this way, the presence of quotes in hash
keys signifies an intention to do something different.

=end tip

Even Perl 5 builtins get the autoquoting treatment:

=begin programlisting

    my %addresses =
    (
        Leonardo => '1123 Fib Place',
        Utako    => 'Cantor Hotel, Room 1',
    );

    sub get_address_from_name
    {
        return $addresses{B<+>shift};
    }

=end programlisting

The unary plus (L<unary_coercions>) turns what would be a bareword (C<shift>)
subject to autoquoting rules into an expression. As this implies, you can use
an arbitrary expression--not only a function call--as the key of a hash:

=begin programlisting

    # don't actually I<do> this though
    my $address = $addresses{reverse 'odranoeL'};

    # interpolation is fine
    my $address = $addresses{"$first_name $last_name"};

    # so are method calls
    my $address = $addresses{ $user->name() };

=end programlisting

Hash keys can only be strings. Anything that evaluates to a string is an
acceptable hash key. Perl will go so far as to coerce (L<coercion>) any
non-string into a string, such that if you use an object as a hash key, you'll
get the stringified version of that object instead of the object itself:

=begin programlisting

    for my $isbn (@isbns)
    {
        my $book = Book->fetch_by_isbn( $isbn );

        # unlikely to do what you want
        $books{$book} = $book->price;
    }

=end programlisting

=head2 Hash Key Existence

X<builtins; C<exists>>
X<hashes; C<exists>>

The C<exists> operator returns a boolean value to indicate whether a hash
contains the given key:

=begin programlisting

    my %addresses =
    (
        Leonardo => '1123 Fib Place',
        Utako    => 'Cantor Hotel, Room 1',
    );

    say "Have Leonardo's address"
        if exists $addresses{Leonardo};
    say "Have Warnie's address"
        if exists $addresses{Warnie};

=end programlisting

Using C<exists> instead of accessing the hash key directly avoids two problems.
First, it does not check the boolean nature of the hash I<value>; a hash key
may exist with a value even if that value evaluates to a boolean false
(including C<undef>):

=begin programlisting

    my  %false_key_value = ( 0 => '' );
    ok( %false_key_value,
         'hash containing false key & value
          should evaluate to a true value' );

=end programlisting

Second, C<exists> avoids autovivification (L<autovivification>) within nested
data structures (L<nested_data_structures>).

X<builtins; C<defined>>

If a hash key exists, its value may be C<undef>. Check that with C<defined>:

=begin programlisting

    $addresses{Leibniz} = undef;

    say "Gottfried lives at $addresses{Leibniz}"
        if exists  $addresses{Leibniz}
        && defined $addresses{Leibniz};

=end programlisting

=head2 Accessing Hash Keys and Values

X<hashes; C<keys>>
X<builtins; C<keys>>

Hashes are aggregate variables, but their pairwise nature offers many more
possibilities for iteration: over the keys of a hash, the values of a hash, or
pairs of keys and values. The C<keys> operator produces a list of hash keys:

=begin programlisting

    for my $addressee (keys %addresses)
    {
        say "Found an address for $addressee!";
    }

=end programlisting

X<hashes; C<values>>
X<builtins; C<values>>

The C<values> operator produces a list of hash values:

=begin programlisting

    for my $address (values %addresses)
    {
        say "Someone lives at $address";
    }

=end programlisting

X<hashes; C<each>>
X<builtins; C<each>>

The C<each> operator produces a list of two-element lists of the key and the
value:

=begin programlisting

    while (my ($addressee, $address) = each %addresses)
    {
        say "$addressee lives at $address";
    }

=end programlisting

Unlike arrays, there is no obvious ordering to these lists. The ordering
depends on the internal implementation of the hash, the particular version of
Perl you are using, the size of the hash, and a random factor. Even so, the
order of hash items is consistent between C<keys>, C<values>, and C<each>.
Modifying the hash may change the order, but you can rely on that order if the
hash remains the same.

Each hash has only a I<single> iterator for the C<each> operator. You cannot
reliably iterate over a hash with C<each> more than once; if you begin a new
iteration while another is in progress, the former will end prematurely and the
latter will begin partway through the hash. During such iteration, beware not
to call any function which may itself try to iterate over the hash with
C<each>.

In practice this occurs rarely, but reset a hash's iterator with C<keys> or
C<values> in void context when you need it:

=begin programlisting

    # reset hash iterator
    keys %addresses;

    while (my ($addressee, $address) = each %addresses)
    {
        ...
    }

=end programlisting

=head2 Hash Slices

X<hashes; slicing>
X<slices; hash>

A I<hash slice> is a list of keys or values of a hash indexed in a single
operation. To initialize multiple elements of a hash at once:

=begin programlisting

    # %cats already contains elements
    @cats{qw( Jack Brad Mars Grumpy )} = (1) x 4;

=end programlisting

This is equivalent to the initialization:

=begin programlisting

    my %cats = map { $_ => 1 }
               qw( Jack Brad Mars Grumpy );

=end programlisting

... except that the hash slice initialization does not I<replace> the existing
contents of the hash.

X<C<@>; sigil>
X<sigils; C<@>>

Hash slices also allow you to retrieve multiple values from a hash in a single
operation. As with array slices, the sigil of the hash changes to indicate list
context.  The use of the curly braces indicates keyed access and makes the hash
unambiguous:

=begin programlisting

    my @buyer_addresses = @addresses{ @buyers };

=end programlisting

Hash slices make it easy to merge two hashes:

=begin programlisting

    my %addresses        = ( ... );
    my %canada_addresses = ( ... );

    @addresses{ keys   %canada_addresses }
              = values %canada_addresses;

=end programlisting

This is equivalent to looping over the contents of C<%canada_addresses>
manually, but is much shorter.

What if the same key occurs in both hashes?  The hash slice approach always
I<overwrites> existing key/value pairs in C<%addresses>. If you want other
behavior, looping is more appropriate.

=head2 The Empty Hash

An empty hash contains no keys or values. It evaluates to a false value in a
boolean context. A hash which contains at least one key/value pair evaluates to
a true value in boolean context even if all of the keys or all of the values or
both would themselves evaluate to false values in a boolean context.

=begin programlisting

    use Test::More;

    my %empty;
    ok( ! %empty, 'empty hash should evaluate false' );

    my %false_key = ( 0 => 'true value' );
    ok( %false_key, 'hash containing false key
                     should evaluate to true' );

    my %false_value = ( 'true key' => 0 );
    ok( %false_value, 'hash containing false value
                       should evaluate to true' );

    done_testing();

=end programlisting

In scalar context, a hash evaluates to a string which represents the ratio of
full buckets in the hash--internal details about the hash implementation that
you can safely ignore.

In list context, a hash evaluates to a list of key/value pairs similar to what
you receive from the C<each> operator.  However, you I<cannot> iterate over
this list the same way you can iterate over the list produced by C<each>, lest
the loop will never terminate:

=begin programlisting

    # infinite loop for non-empty hashes
    while (my ($key, $value) = %hash)
    {
        ...
    }

=end programlisting

You I<can> loop over the list of keys and values with a C<for> loop, but the
iterator variable will get a key on one iteration and its value on the next,
because Perl will flatten the hash into a single list of interleaved keys and
values.

=head2 Hash Idioms

X<hashes; finding uniques>

Because each key exists only once in a hash, assigning the same key to a hash
multiple times stores only the most recent key. Use this to find unique list
elements:

=begin programlisting

    my %uniq;
    undef @uniq{ @items };
    my @uniques = keys %uniq;

=end programlisting

Using C<undef> with a hash slice sets the values of the hash to C<undef>. This
idiom is the cheapest way to perform set operations with a hash.

X<hashes; counting items>

Hashes are also useful for counting elements, such as IP addresses in a log
file:

=begin programlisting

    my %ip_addresses;

    while (my $line = <$logfile>)
    {
        my ($ip, $resource) = analyze_line( $line );
        $ip_addresses{$ip}++;
        ...
    }

=end programlisting

The initial value of a hash value is C<undef>. The postincrement operator
(C<++>) treats that as zero. This in-place modification of the value increments
an existing value for that key. If no value exists for that key, Perl creates a
value (C<undef>) and immediately increments it to one, as the numification of
C<undef> produces the value 0.

X<hashes; caching>
X<orcish maneuver>

This strategy provides a useful caching mechanism to store the result of an
expensive operation with little overhead:

=begin programlisting

    {
        my %user_cache;

        sub fetch_user
        {
            my $id = shift;
            $user_cache{$id} //= create_user($id);
            return $user_cache{$id};
        }
    }

=end programlisting

X<defined-or>
X<C<//>; infix operator>
X<operators; C<//>>
X<operators; defined-or>

This I<orcish maneuver>N<Or-cache, if you like puns.> returns the value from
the hash, if it exists. Otherwise, it calculates, caches, and returns the
value. The defined-or assignment operator (C<//=>) evaluates its left operand.
If that operand is not defined, the operator assigns the lvalue the value of
its right operand. In other words, if there's no value in the hash for the
given key, this function will call C<create_user()> with the key and update the
hash.

Perl 5.10 introduced the defined-or and defined-or assignment operators. Prior
to 5.10, most code used the boolean-or assignment operator (C<||=>) for this
purpose. Unfortunately, some valid values evaluate to a false value in boolean
context, so evaluating the I<definedness> of values is almost always more
accurate. This lazy orcish maneuver tests for the definedness of the cached
value, not truthiness.

X<hashes; named parameters>

If your function takes several arguments, use a slurpy hash
(L<parameter_slurping>) to gather key/value pairs into a single hash as named
function arguments:

=begin programlisting

    sub make_sundae
    {
        my %parameters = @_;
        ...
    }

    make_sundae( flavor  => 'Lemon Burst',
                 topping => 'cookie bits' );

=end programlisting

This approach allows you to set default values:

=begin programlisting

    sub make_sundae
    {
        my %parameters           = @_;
        B<$parameters{flavor}    //= 'Vanilla';>
        B<$parameters{topping}   //= 'fudge';>
        B<$parameters{sprinkles} //= 100;>
        ...
    }

=end programlisting

... or include them in the hash initialization, as latter assignments take
precedence over earlier assignments:

=begin programlisting

    sub make_sundae
    {
        my %parameters =
        (
            B<< flavor    => 'Vanilla', >>
            B<< topping   => 'fudge', >>
            B<< sprinkles => 100, >>
            @_,
        );
        ...
    }

=end programlisting

=head2 Locking Hashes

Z<locked_hashes>

X<hashes; locked>

As hash keys are barewords, they offer little typo protection compared to the
function and variable name protection offered by the C<strict> pragma. The
little-used core module C<Hash::Util> provides mechanisms to ameliorate this.

To prevent someone from accidentally adding a hash key you did not intend
(whether as a typo or from untrusted user input), use the C<lock_keys()>
function to restrict the hash to its current set of keys. Any attempt to add a
new key to the hash will raise an exception. This is lax security suitable only
for preventing accidents; anyone can use the C<unlock_keys()> function to remove
this protection.

Similarly you can lock or unlock the existing value for a given key in the hash
(C<lock_value()> and C<unlock_value()>) and make or unmake the entire hash
read-only with C<lock_hash()> and C<unlock_hash()>.
