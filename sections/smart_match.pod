=head1 Smart Matching

Z<smart_match>

X<smart match>
X<operators; smart match>
X<C<~~>; smart match operator>
X<operators; C<~~>>
X<builtins; C<given>>

The smart match operator, C<~~>, compares two operands and returns a true value
if they match. The fuzziness of the definition demonstrates the smartness of
the operator: the type of comparison depends on the type of both operands.
C<given> (L<given_when>) performs an implicit smart match.

X<operators; C<~~>>
X<C<~~>; smart match operator>

The smart match operator is an infix operator:

=begin programlisting

    say 'They match (somehow)' if $loperand ~~ $roperand;

=end programlisting

The type of comparison generally depends first on the type of the right operand
and then on the left operand. For example, if the right operand is a scalar
with a numeric component, the comparison will use numeric equality. If the
right operand is a regex, the comparison will use a grep or a pattern match.
If the right operand is an array, the comparison will perform a grep or a
recursive smart match. If the right operand is a hash, the comparison will
check the existence of one or more keys. A large and intimidating chart in
C<perldoc perlsyn> gives far more details about all the comparisons smart match
can perform.

A serious proposal for 5.16 suggests simplifying smart match substantially. The
more complex your operands, the more likely you are to receive confusing
results. Avoid comparing objects and stick to simple operations between two
scalars or one scalar and one aggregate for the best results.

With that said, smart match can be useful:

=begin programlisting

    my ($x, $y) = (10, 20);
    say 'Not equal numerically' unless $x ~~ $y;

    my $z = '10 little endians';
    say 'Equal numeric-ishally' if $x ~~ $z;

    # regular expression match
    my $needle = qr/needle/;

    say 'Pattern match' if 'needle' ~~ $needle;

    say 'Grep through array' if @haystack ~~ $needle;

    say 'Grep through hash keys' if %hayhash ~~ $needle;

    say 'Grep through array' if $needle ~~ @haystack;

    say 'Array elements exist as hash keys'
        if %hayhash    ~~ @haystack;

    say 'Smart match elements' if @straw ~~ @haystack;

    say 'Grep through hash keys' if $needle ~~ %hayhash;

    say 'Array elements exist as hash keys'
        if @haystack  ~~ %hayhash;

    say 'Hash keys identical' if %hayhash ~~ %haymap;

=end programlisting

Smart match works even if one operand is a I<reference> to the given data type:

=begin programlisting

    say 'Hash keys identical' if %hayhash ~~ \%hayhash;

=end programlisting
