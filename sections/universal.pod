=head1 The UNIVERSAL Package

Z<universal>

X<C<UNIVERSAL>>

Perl 5 provides a special package which is the ancestor of all other packages
in a very object-oriented way.  The C<UNIVERSAL> package provides a few methods
available for all other classes and objects.

=head2 The isa() Method

X<C<UNIVERSAL::isa>>
X<C<isa()>>

The C<isa()> method takes a string containing the name of a class or the name
of a built-in type.  You can call it as a class method or an instance method on
an object.  It returns true if the class or object is or derives from the named
class, or if the object itself is a blessed reference to the given type.

Given an object C<$pepper>, a hash reference blessed into the C<Monkey> class
(which inherits from the C<Mammal> class):

=begin programlisting

    say $pepper->isa( 'Monkey'  );  # prints 1
    say $pepper->isa( 'Mammal'  );  # prints 1
    say $pepper->isa( 'HASH'    );  # prints 1
    say Monkey->isa(  'Mammal'  );  # prints 1

    say $pepper->isa( 'Dolphin' );  # prints 0
    say $pepper->isa( 'ARRAY'   );  # prints 0
    say Monkey->isa(  'HASH'    );  # prints 0

=end programlisting

X<C<SCALAR>>
X<C<ARRAY>>
X<C<HASH>>
X<C<Regexp>>
X<C<IO>>
X<C<CODE>>

Perl 5's core types are C<SCALAR>, C<ARRAY>, C<HASH>, C<Regexp>, C<IO>, and
C<CODE>.

You can override C<isa()> in your own classes.  This can be useful when working
with mock objects (see C<Test::MockObject> and C<Test::MockModule> on the CPAN,
for example) or with code that does not use roles (L<roles>).

=head2 The can() Method

X<C<UNIVERSAL::can>>
X<C<can()>>

The C<can()> method takes a string containing the name of a method.  It returns
a reference to the function which implements that method, if it exists.
Otherwise, it returns false.  You may call this on a class, an object, or the
name of a package.  In the latter case, it returns a reference to a function,
not a method.

Given a class named C<SpiderMonkey> with a method named C<screech>, you can get
a reference to the method with:

=begin programlisting

    if (my $meth = SpiderMonkey->can( 'screech' )) { ... }

    if (my $meth = $sm->can( 'screech' )
    {
        $sm->$meth();
    }

=end programlisting

X<builtins; C<require>>

Given a plugin-style architecture, you can test to see if a package implements
a specific function in a similar way.  The C<UNIVERSAL::require> module adds a
C<require()> method to the C<UNIVERSAL> namespace to invert the sense of the
C<require> builtin:

=begin programlisting

    # a useful CPAN module
    use UNIVERSAL::require;

    die $@ unless $module->require();

    if (my $register = $module->can( 'register' )
    {
        $register->();
    }

=end programlisting

... though in larger programs, use C<Module::Pluggable> to handle this busy
work for you.

You can (and should) override C<can()> in your own code if you use
C<AUTOLOAD()> (L<autoload_drawbacks>).

=begin sidebar

There is I<one> known case where calling C<UNIVERSAL::can()> as a function and
not a method is not incorrect: to determine whether a class exists in Perl 5.
If C<UNIVERSAL::can( $classname, 'can' )> returns true, someone somewhere has
defined a class of the name C<$classname>--though consider using instead
Moose's introspection.

=end sidebar

=head2 The VERSION() Method

X<C<UNIVERSAL::VERSION>>
X<C<VERSION()>>

The C<VERSION()> method is available to all packages, classes, and objects.  It
returns the value of the C<$VERSION> variable for the appropriate package or
class.  It takes a version number as an optional parameter.  If you provide
this version number, the method will throw an exception if the queried
C<$VERSION> is not equal to or greater than the parameter.

Given a C<HowlerMonkey> module of version C<1.23>:

=begin programlisting

    say HowlerMonkey->VERSION();    # prints 1.23
    say $hm->VERSION();             # prints 1.23
    say $hm->VERSION( 0.0  );       # prints 1.23
    say $hm->VERSION( 1.23 );       # prints 1.23
    say $hm->VERSION( 2.0  );       # throws exception

=end programlisting

You can override C<VERSION()> in your own code, but there's little reason to do
so.

=head2 The DOES() Method

X<C<UNIVERSAL::DOES>>
X<C<DOES()>>

The C<DOES()> method is new in Perl 5.10.0.  It exists to support the use of
roles (L<roles>) in programs.  Pass it an invocant and the name of a role, and
the method will return true if the appropriate class somehow does that
role--whether through inheritance, delegation, composition, role application,
or any other mechanism.

The default implementation of C<DOES()> falls back to C<isa()>, because
inheritance is one mechanism by which a class may do a role.  Given a
C<Cappuchin>:

=begin programlisting

    say Cappuchin->DOES( 'Monkey'       );  # prints 1
    say $cappy->DOES(    'Monkey'       );  # prints 1
    say Cappuchin->DOES( 'Invertebrate' );  # prints 0

=end programlisting

You can (and should) override C<DOES()> in your own code if you manually
provide a role or other allomorphic behavior.

=head2 Extending UNIVERSAL

It's tempting to store other methods in C<UNIVERSAL> to make it available to
all other classes and objects in Perl 5.  Avoid this temptation; this global
behavior can have subtle side effects because it is unconstrained.

X<C<UNIVERSAL::ref>>
X<C<UNIVERSAL::isa>>
X<C<UNIVERSAL::can>>
X<C<Perl::Critic>>

With that said, occasional abuse of C<UNIVERSAL> for I<debugging> purposes and
to fix improper default behavior may be excusable.  For example, Joshua ben
Jore's C<UNIVERSAL::ref> distribution makes the nearly-useless C<ref()>
operator usable.  The C<UNIVERSAL::can> and C<UNIVERSAL::isa> distributions can
help you debug anti-polymorphism bugs (L<method_sub_equivalence>), while
C<Perl::Critic> can detect thoseN<... and many, many other.> problems.

Outside of very carefully controlled code and very specific, very pragmatic
situations, there's no reason to put code in C<UNIVERSAL> directly.  There are
almost always much better design alternatives.
