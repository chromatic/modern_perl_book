=head2 Blessed References

Z<blessed_references>

Perl 5's default object system is deliberately minimal.  Three simple rules
combine to form the simple--though effective--basic object system:

=over 4

=item * A class is a package.

=item * A method is a function.

=item * A (blessed) reference is an object.

=back

X<bless>
X<operators; bless>

You've already seen the first two rules with Moose.  The third rule is new.
The C<bless> keyword associates the name of a class with a reference, such that
any method invocation performed on that reference uses the associated class for
resolution.  That sounds more complicated than it is.

=begin sidebar

Though these rules explain Perl 5's underlying object system, they are somewhat
more minimal in practice than may be practical, especially for larger projects.
In particular, they offer few facilities for metaprogramming (using APIs to
manipulate the program itself).

Moose (L<moose>) is a better choice for serious, modern Perl programs larger
than a couple of hundred lines, but you will likely encounter bare-bones Perl 5
OO in existing code.

=end sidebar

X<constructor>
X<OO; constructor>

X<class method>
X<methods; class>

The default Perl 5 object constructor is a method which creates and blesses a
reference.  By convention, constructors have the name C<new()>, but this is not
a requirement.  Constructors are also almost always I<class methods>:

=begin programlisting

    sub new
    {
        my $class = shift;
        bless {}, $class;
    }

=end programlisting

C<bless> takes two arguments, the reference to associate with a class and the
name of a class.  You may use C<bless> outside of a constructor or a
class--though abstraction recommends the use of the method.  The class name
does not have to exist yet.

By design, this constructor receives the class name as the method's invocant.
It's possible, but inadvisable, to hard-code the name of a class directly.  The
parametric constructor allows reuse of the method through inheritance,
delegation, or exporting.

X<instance data>
X<OO; instance data>

The type of reference makes no difference when invoking methods on the object.
It only governs how the object stores I<instance data>--the object's own
information.  Hash references are most common, but you can bless any type of
reference:

=begin programlisting

    my $array_obj  = bless [], $class;
    my $scalar_obj = bless \$scalar, $class;
    my $sub_obj    = bless \&some_sub, $class;

=end programlisting

Where classes built with Moose define their own object attributes
declaratively, Perl 5's default OO is lax.  A class representing basketball
players which stores jersey number and position might use a constructor like:

=begin programlisting

    package Player;

    sub new
    {
        my ($class, %attrs) = @_;

        bless \%attrs, $class;
    }

=end programlisting

... and create players with:

=begin programlisting

    my $joel = Player->new(
        number   => 10,
        position => 'center',
    );

    my $jerryd = Player->new(
        number   => 4,
        position => 'guard',
    );

=end programlisting

Within the body of the class, methods can access hash elements directly:

=begin programlisting

    sub format
    {
        my $self = shift;
        return '#' . $self->{number} . ' plays ' . $self->{position};
    }

=end programlisting

Yet so can any code outside of the class.  This violates encapsulation--in
particular, it means that you can never change the object's internal
representation without breaking external code or performing hacks--so it's
safer to provide accessor methods:

=begin programlisting

    sub number   { return shift->{number}   }
    sub position { return shift->{position} }

=end programlisting

Even with two attributes, Moose is much more appealing in terms of code you
don't have to write.

=begin sidebar

Moose's default behavior of accessor generation encourages you to do the right
thing with regard to encapsulation as well as genericity.

=end sidebar

=head3 Method Lookup and Inheritance

X<method dispatch>
X<objects; methods>

Besides instance data, the other part of objects is method dispatch.  Given an
object (a blessed reference), a method call of the form:

=begin programlisting

    my $number = $joel->number();

=end programlisting

... looks up the name of the class associated with the blessed reference
C<$joel>.  In this case, the class is C<Player>.  Next, Perl looks for a
function named C<number> in the C<Player> package.  If the C<Player> class
inherits from another class, Perl looks in the parent class (and so on and so
on) until it finds a C<number> method.  If one exists, Perl calls it with
C<$joel> as an invocant.

X<@ISA>
X<variables; @ISA>

Moose classes store their inheritance information in a metamodel.  Each class
of a blessed reference stores information about its parents in a package global
variable named C<@ISA>.  The method dispatcher looks in a class's C<@ISA> to
find the names of parent classes in which to search for the appropriate method.
Thus, an C<InjuredPlayer> class might contain C<Player> in its C<@ISA>.  You
could write this relationship as:

=begin programlisting

    package InjuredPlayer;

    @InjuredPlayer::ISA = 'Player';

=end programlisting

X<parent>
X<pragmas; parent>

Many existing Perl 5 projects do this, but it's easier and simpler to use the
C<parent> pragma instead:

=begin programlisting

    package InjuredPlayer;

    use parent 'Player';

=end programlisting

X<base>
X<pragmas; base>

=begin sidebar

Perl 5.10 added C<parent> to supersede the C<base> pragma added in Perl
5.004_4.  If you can't use Moose, use C<parent>.

=end sidebar

X<multiple inheritance>
X<objects; inheritance>

You may inherit from multiple parent classes:

=begin programlisting

    package InjuredPlayer;

    use parent qw( Player Hospital::Patient );

=end programlisting

Perl 5 has traditionally preferred a depth-first search of parents when
resolving method dispatch.  That is to say, if C<InjuredPlayer> inherits from
both C<Player> and C<Hospital::Patient>, a method call on an C<InjuredPlayer>
instance will dispatch first to C<InjuredPlayer>, then C<Player>, then any of
C<Player>'s parents before dispatching in C<Hospital::Patient>.

X<mro>
X<pragmas; mro>

Perl 5.10 added a pragma called C<mro> which allows you to use a different
method resolution scheme called C3.  While the specific details can get complex
in the case of complex multiple inheritance hierarchies, the important
difference is that method resolution will visit all children of a parent before
visiting the parent.

While other techniques (such as L<roles> and Moose method modifiers) allow you
to avoid multiple inheritance, the C<mro> pragma can help avoid surprising
behavior with method dispatch.  Enable it in your class with:

=begin programlisting

    package InjuredPlayer;

    use mro 'c3';

=end programlisting

Unless you're writing a complex framework with multiple interoperable plugins,
you likely never need to use this.

=head3 AUTOLOAD

X<AUTOLOAD>
X<objects; AUTOLOAD>
X<methods; AUTOLOAD>

If there is no applicable method in the invocant's class or any of its
superclasses, Perl 5 will next look for an C<AUTOLOAD> function in every class
according to the selected method resolution order.  Perl will invoke any
C<AUTOLOAD> it finds to provide or decline the desired method.  See L<autoload>
for more details.

As you might expect, this can get quite complex in the face of multiple
inheritance and multiple potential C<AUTOLOAD> targets.

=head3 Method Overriding and SUPER

You may override methods in the default Perl 5 OO system as well as in Moose.
Unfortunately, core Perl 5 provides no mechanism for indicating your I<intent>
to override a parent's method.  Worse yet, any function you predeclare,
declare, or import into the child class may override a method in the parent
class simply by existing and having the same name.  While you may forget to use
the C<override> system of Moose, you have no such protection (even optional) in
the default Perl 5 OO system.

To override a method in a child class, declare a method of the same name as the
method in the parent.  Within an overridden method, call the parent method with
the C<SUPER::> dispatch hint:

=begin programlisting

    sub overridden
    {
        my $self = shift;
        warn "Called overridden() in child!";
        return $self->SUPER::overridden( @_ );
    }

=end programlisting

The C<SUPER::> prefix to the method name tells the method dispatcher to
dispatch to the named method in a I<parent> implementation.  You may pass any
arguments to it you like, but it's safest to reuse C<@_>.

=begin sidebar

Beware that this dispatcher relies on the package into which the overridden
method was originally compiled when redispatching to a parent method.  This is
a long-standing misfeature retained for the sake of backwards compatibility.
If you export methods into other classes or compose roles into classes
manually, you may run afoul of this feature.  The C<SUPER> module on the CPAN
can work around this for you.  Moose handles it nicely as well.

=end sidebar

=head3 Strategies for Coping with Blessed References

Avoid C<AUTOLOAD> where possible.  If you I<must> use it, use forward
declarations of your functions (L<functions>) to help Perl know which
C<AUTOLOAD> will provide the method implementation.

Use accessor methods rather than accessing instance data directly through the
reference.  This applies even within the bodies of methods within the class
itself.  Generating these yourself can be tedious; if you can't use Moose,
consider using a module such as C<Class::Accessor> to avoid repetitive
boilerplate.

Expect that someone, somewhere will eventually need to subclass (or delegate to
or reimplement the interface of) your classes.  Make it easier for them by not
assuming details of the internals of your code, by using the two-argument form
of C<bless>, and by breaking your classes into the smallest responsible units
of code.

Do not mix functions and methods in the same class.

Use a single F<.pm> file for each class, unless the class is a small,
self-contained helper used from a single place.

Consider using Moose and C<Any::Moose> instead of bare-bones Perl 5 OO; they
can interact with vanilla classes and objects with ease, alleviate almost of
the tedium of declaring classes, and provide more and better features.
